# FastenHomeAut - Gitlab CI

# Documentation for Gitlab CI (yaml)
# https://docs.gitlab.com/ee/development/cicd/templates.html
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages

stages:
  - build
  - test

# Note:
## - I expect, the runner is a pure linux
## - sudo cannot use


before_script:
    - gcc --version

    #  Install a CMake 3.0.2 version.
    #- apt-get update -qq
    #- apt-get install cmake -y
    #  Alternatively you could install a CMake 3.2.2 version through PPA repository.
    - apt-get update -qq
    - apt-get install software-properties-common -y

    - apt-get update -qq
    - apt-get install cmake -y --allow  --force-yes

    - cmake --version


build_job_linux_gcc:
  stage: build
  script:
    - chmod u+x ./RunCMake_Mingw64_OnLinux.sh
    - ./RunCMake_Mingw64_OnLinux.sh


build_linux_gcc_arm:
  stage: build
  script: |

    echo 'Start Linux build pipeline - GCC - ARM - arm-none-eabi-gcc'
    
    # ARM-none-eabi-gcc
    apt-get update -y
    apt-get install -y gcc-arm-none-eabi

    arm-none-eabi-gcc --version

    mkdir -p Out/CMakeBuild
    cd out/CMakeBuild

    # Call the CMake.
    # Normally: "cmake" or "cmake .." used
    #cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE:PATH="..\toolchain.cmake"  ..
    cmake -G "Unix Makefiles" -DCMAKE_TOOLCHAIN_FILE:PATH="../../Toolchain_ST32F4_arm-none-eabi-gcc.cmake" ../..
    # cmake CC=gcc ../..
    # -D"CMAKE_MAKE_PROGRAM:FILEPATH=make.exe" -D"CMAKE_C_COMPILER:FILEPATH=gcc.exe" -D"CMAKE_CXX_COMPILER:FILEPATH=g++.exe" CC=gcc -G "MinGW Makefiles"

    # Build the project.
    echo 'Start Make'
    #make VERBOSE=1
    make VERBOSE=1 &>> GCC_ARM_build.log

    # Echo the file
    echo 'Print: GCC_ARM_build.log'
    cat GCC_ARM_build.log

    # Check the results
    echo 'Finished compile-ing'
    ls

    # Run
    echo 'Test result exists...'

    file="./FastenHomeAut"
    if [ -f "$file" ]
    then
        echo "$0: File '${file}' has found."
        # TODO: Turned off as continue the execution
        #echo 'Finished...'
        #exit 0
    else
        echo "$0: File '${file}' not found."
        echo 'Finished...'
        exit -1
    fi
  artifacts:
    paths:
      - Out/CMakeBuild/GCC_ARM_build.log
      - Out/CMakeBuild/FastenHomeAut
    expire_in: 1 week


build_linux_cmake_clang:
  stage: build
  script:
    - chmod u+x ./RunCMake_Clang.sh
    - ./RunCMake_Clang.sh
  artifacts:
    paths:
      - Out/CMakeBuild_Clang/Clang_build.log
    expire_in: 1 week


