
STM32F407DiscoHomeAut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ee8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a4  08002070  08002070  00012070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002514  08002514  00012514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002518  08002518  00012518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800251c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000338  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000033c  2000033c  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000de94  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000296b  00000000  00000000  0002dec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000069f6  00000000  00000000  00030833  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000aa0  00000000  00000000  00037230  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000c78  00000000  00000000  00037cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004f99  00000000  00000000  00038948  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003e37  00000000  00000000  0003d8e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  00041718  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001c18  00000000  00000000  00041798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002058 	.word	0x08002058

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002058 	.word	0x08002058

080001c8 <__aeabi_d2f>:
 80001c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80001cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80001d0:	bf24      	itt	cs
 80001d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80001d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80001da:	d90d      	bls.n	80001f8 <__aeabi_d2f+0x30>
 80001dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80001e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80001e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80001e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80001ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80001f0:	bf08      	it	eq
 80001f2:	f020 0001 	biceq.w	r0, r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80001fc:	d121      	bne.n	8000242 <__aeabi_d2f+0x7a>
 80001fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000202:	bfbc      	itt	lt
 8000204:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000208:	4770      	bxlt	lr
 800020a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800020e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000212:	f1c2 0218 	rsb	r2, r2, #24
 8000216:	f1c2 0c20 	rsb	ip, r2, #32
 800021a:	fa10 f30c 	lsls.w	r3, r0, ip
 800021e:	fa20 f002 	lsr.w	r0, r0, r2
 8000222:	bf18      	it	ne
 8000224:	f040 0001 	orrne.w	r0, r0, #1
 8000228:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800022c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000230:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000234:	ea40 000c 	orr.w	r0, r0, ip
 8000238:	fa23 f302 	lsr.w	r3, r3, r2
 800023c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000240:	e7cc      	b.n	80001dc <__aeabi_d2f+0x14>
 8000242:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000246:	d107      	bne.n	8000258 <__aeabi_d2f+0x90>
 8000248:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800024c:	bf1e      	ittt	ne
 800024e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000252:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000256:	4770      	bxne	lr
 8000258:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800025c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000260:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop

08000268 <USART_Init>:

/***************************************************************************//**
 * @brief		-	USART_Init:	Inicializalja az USART periferiat
 ******************************************************************************/
void USART_Init ( UART_HandleTypeDef *UartHandle)
{
 8000268:	b538      	push	{r3, r4, r5, lr}
	  - Stop Bit = One Stop bit
	  - Parity = None
	  - BaudRate = 9600 baud
	  - Hardware flow control disabled (RTS and CTS signals) */
#ifdef CONFIG_MODULE_DEBUGUSART_ENABLE
	if ( UartHandle == &Debug_UartHandle)
 800026a:	4b13      	ldr	r3, [pc, #76]	; (80002b8 <USART_Init+0x50>)
 800026c:	4298      	cmp	r0, r3

/***************************************************************************//**
 * @brief		-	USART_Init:	Inicializalja az USART periferiat
 ******************************************************************************/
void USART_Init ( UART_HandleTypeDef *UartHandle)
{
 800026e:	4604      	mov	r4, r0
	  - Hardware flow control disabled (RTS and CTS signals) */
#ifdef CONFIG_MODULE_DEBUGUSART_ENABLE
	if ( UartHandle == &Debug_UartHandle)
	{
		UartHandle->Instance        = DEBUG_USARTx;
		UartHandle->Init.BaudRate   = 115200;		// Monitor program
 8000270:	bf08      	it	eq
 8000272:	4812      	ldreq	r0, [pc, #72]	; (80002bc <USART_Init+0x54>)
 8000274:	461d      	mov	r5, r3
 8000276:	bf04      	itt	eq
 8000278:	f44f 33e1 	moveq.w	r3, #115200	; 0x1c200
 800027c:	e884 0009 	stmiaeq.w	r4, {r0, r3}
		UartHandle->Instance        = ESP8266_USARTx;
		UartHandle->Init.BaudRate   = 9600;			// ESP8266
	}
#endif
	
	UartHandle->Init.WordLength = UART_WORDLENGTH_8B;
 8000280:	2300      	movs	r3, #0
 8000282:	60a3      	str	r3, [r4, #8]
	UartHandle->Init.StopBits   = UART_STOPBITS_1;
 8000284:	60e3      	str	r3, [r4, #12]
	UartHandle->Init.Parity     = UART_PARITY_NONE;
 8000286:	6123      	str	r3, [r4, #16]
	UartHandle->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000288:	61a3      	str	r3, [r4, #24]
	UartHandle->Init.Mode       = UART_MODE_TX_RX;
 800028a:	230c      	movs	r3, #12
 800028c:	6163      	str	r3, [r4, #20]

	if(HAL_UART_Init(UartHandle) == HAL_OK)
 800028e:	4620      	mov	r0, r4
 8000290:	f001 f9ca 	bl	8001628 <HAL_UART_Init>
 8000294:	b950      	cbnz	r0, 80002ac <USART_Init+0x44>
	{	
#ifdef CONFIG_MODULE_DEBUGUSART_ENABLE
		if ( UartHandle == &Debug_UartHandle)
 8000296:	42ac      	cmp	r4, r5
 8000298:	d10c      	bne.n	80002b4 <USART_Init+0x4c>
		{
			USART_SendEnable_flag = ENABLE;
 800029a:	4b09      	ldr	r3, [pc, #36]	; (80002c0 <USART_Init+0x58>)
 800029c:	2201      	movs	r2, #1
 800029e:	701a      	strb	r2, [r3, #0]
			__HAL_UART_CLEAR_FLAG(&Debug_UartHandle, UART_FLAG_CTS | UART_FLAG_RXNE | UART_FLAG_TXE | UART_FLAG_TC | UART_FLAG_ORE | UART_FLAG_NE | UART_FLAG_FE | UART_FLAG_PE);
 80002a0:	f46f 713c 	mvn.w	r1, #752	; 0x2f0
 80002a4:	6823      	ldr	r3, [r4, #0]
 80002a6:	440a      	add	r2, r1
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	bd38      	pop	{r3, r4, r5, pc}
		Error_Handler();
	}
	
	

}
 80002ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		}
#endif
	}
	else	// != HAL_OK
	{	
		Error_Handler();
 80002b0:	f000 bdba 	b.w	8000e28 <Error_Handler>
 80002b4:	bd38      	pop	{r3, r4, r5, pc}
 80002b6:	bf00      	nop
 80002b8:	200001e0 	.word	0x200001e0
 80002bc:	40004400 	.word	0x40004400
 80002c0:	20000220 	.word	0x20000220

080002c4 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80002c4:	b510      	push	{r4, lr}
	GPIO_InitTypeDef  GPIO_InitStruct;

	
#ifdef CONFIG_MODULE_DEBUGUSART_ENABLE

	if (huart == &Debug_UartHandle)
 80002c6:	4b1c      	ldr	r3, [pc, #112]	; (8000338 <HAL_UART_MspInit+0x74>)
 80002c8:	4283      	cmp	r3, r0




void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80002ca:	b088      	sub	sp, #32
	GPIO_InitTypeDef  GPIO_InitStruct;

	
#ifdef CONFIG_MODULE_DEBUGUSART_ENABLE

	if (huart == &Debug_UartHandle)
 80002cc:	d130      	bne.n	8000330 <HAL_UART_MspInit+0x6c>
	{
		// ##-1- Enable peripherals and GPIO Clocks #################################

		// Enable GPIO TX/RX clock
		// Enable USARTx clock
		DEBUG_USART_CLK_ENABLES();
 80002ce:	4b1b      	ldr	r3, [pc, #108]	; (800033c <HAL_UART_MspInit+0x78>)
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull      = GPIO_NOPULL;
		GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
		GPIO_InitStruct.Alternate = DEBUG_USART_AF;		// It is initialie alternate function

		HAL_GPIO_Init(DEBUG_USART_TX_GPIO_PORT, &GPIO_InitStruct);
 80002d0:	481b      	ldr	r0, [pc, #108]	; (8000340 <HAL_UART_MspInit+0x7c>)
	{
		// ##-1- Enable peripherals and GPIO Clocks #################################

		// Enable GPIO TX/RX clock
		// Enable USARTx clock
		DEBUG_USART_CLK_ENABLES();
 80002d2:	2400      	movs	r4, #0
 80002d4:	9401      	str	r4, [sp, #4]
 80002d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002d8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80002dc:	641a      	str	r2, [r3, #64]	; 0x40
 80002de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80002e0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80002e4:	9201      	str	r2, [sp, #4]
 80002e6:	9a01      	ldr	r2, [sp, #4]
 80002e8:	9402      	str	r4, [sp, #8]
 80002ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002ec:	f042 0201 	orr.w	r2, r2, #1
 80002f0:	631a      	str	r2, [r3, #48]	; 0x30
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30

		// ##-2- Configure peripheral GPIO ##########################################
		// UART TX GPIO pin configuration
		GPIO_InitStruct.Pin       = DEBUG_USART_TX_GPIO_PIN;
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80002f4:	9405      	str	r4, [sp, #20]
	{
		// ##-1- Enable peripherals and GPIO Clocks #################################

		// Enable GPIO TX/RX clock
		// Enable USARTx clock
		DEBUG_USART_CLK_ENABLES();
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	9302      	str	r3, [sp, #8]
 80002fc:	9b02      	ldr	r3, [sp, #8]

		// ##-2- Configure peripheral GPIO ##########################################
		// UART TX GPIO pin configuration
		GPIO_InitStruct.Pin       = DEBUG_USART_TX_GPIO_PIN;
 80002fe:	2304      	movs	r3, #4
 8000300:	9303      	str	r3, [sp, #12]
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8000302:	2302      	movs	r3, #2
 8000304:	9304      	str	r3, [sp, #16]
		GPIO_InitStruct.Pull      = GPIO_NOPULL;
		GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8000306:	9306      	str	r3, [sp, #24]
		GPIO_InitStruct.Alternate = DEBUG_USART_AF;		// It is initialie alternate function

		HAL_GPIO_Init(DEBUG_USART_TX_GPIO_PORT, &GPIO_InitStruct);
 8000308:	a903      	add	r1, sp, #12
		// UART TX GPIO pin configuration
		GPIO_InitStruct.Pin       = DEBUG_USART_TX_GPIO_PIN;
		GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
		GPIO_InitStruct.Pull      = GPIO_NOPULL;
		GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
		GPIO_InitStruct.Alternate = DEBUG_USART_AF;		// It is initialie alternate function
 800030a:	2307      	movs	r3, #7
 800030c:	9307      	str	r3, [sp, #28]

		HAL_GPIO_Init(DEBUG_USART_TX_GPIO_PORT, &GPIO_InitStruct);
 800030e:	f001 fc7d 	bl	8001c0c <HAL_GPIO_Init>

		// UART RX GPIO pin configuration
		GPIO_InitStruct.Pin = DEBUG_USART_RX_GPIO_PIN;
 8000312:	2308      	movs	r3, #8
		//GPIO_InitStruct.Alternate = DEBUG_USART_AF;

		HAL_GPIO_Init(DEBUG_USART_RX_GPIO_PORT, &GPIO_InitStruct);
 8000314:	a903      	add	r1, sp, #12
 8000316:	480a      	ldr	r0, [pc, #40]	; (8000340 <HAL_UART_MspInit+0x7c>)
		GPIO_InitStruct.Alternate = DEBUG_USART_AF;		// It is initialie alternate function

		HAL_GPIO_Init(DEBUG_USART_TX_GPIO_PORT, &GPIO_InitStruct);

		// UART RX GPIO pin configuration
		GPIO_InitStruct.Pin = DEBUG_USART_RX_GPIO_PIN;
 8000318:	9303      	str	r3, [sp, #12]
		//GPIO_InitStruct.Alternate = DEBUG_USART_AF;

		HAL_GPIO_Init(DEBUG_USART_RX_GPIO_PORT, &GPIO_InitStruct);
 800031a:	f001 fc77 	bl	8001c0c <HAL_GPIO_Init>


		// ##-3- Configure the NVIC for UART ########################################
		// NVIC for USARTx

		HAL_NVIC_SetPriority(DEBUG_USARTx_IRQn, DEBUG_USART_PREEMT_PRIORITY, DEBUG_USART_SUB_PRIORITY);
 800031e:	4622      	mov	r2, r4
 8000320:	210a      	movs	r1, #10
 8000322:	2026      	movs	r0, #38	; 0x26
 8000324:	f001 fd76 	bl	8001e14 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(DEBUG_USARTx_IRQn);
 8000328:	2026      	movs	r0, #38	; 0x26
 800032a:	f001 fda7 	bl	8001e7c <HAL_NVIC_EnableIRQ>
 800032e:	e001      	b.n	8000334 <HAL_UART_MspInit+0x70>
		
	}
#endif
	else
	{
		Error_Handler();
 8000330:	f000 fd7a 	bl	8000e28 <Error_Handler>
	}

	
}
 8000334:	b008      	add	sp, #32
 8000336:	bd10      	pop	{r4, pc}
 8000338:	200001e0 	.word	0x200001e0
 800033c:	40023800 	.word	0x40023800
 8000340:	40020000 	.word	0x40020000

08000344 <USART1_IRQHandler>:




void USART1_IRQHandler(void)
{
 8000344:	4770      	bx	lr
	...

08000348 <USART2_IRQHandler>:

#ifdef CONFIG_USE_PANEL_DISCOVERY
void USART2_IRQHandler(void)
{

	HAL_UART_IRQHandler(&Debug_UartHandle);
 8000348:	4801      	ldr	r0, [pc, #4]	; (8000350 <USART2_IRQHandler+0x8>)
 800034a:	f001 ba19 	b.w	8001780 <HAL_UART_IRQHandler>
 800034e:	bf00      	nop
 8000350:	200001e0 	.word	0x200001e0

08000354 <HAL_UART_TxCpltCallback>:
	xSemaphoreGiveFromISR(DEBUG_USART_Tx_Semaphore,(BaseType_t *)NULL);
	#endif
	
	// Successful sending

	USART_SendEnable_flag = ENABLE;
 8000354:	4b01      	ldr	r3, [pc, #4]	; (800035c <HAL_UART_TxCpltCallback+0x8>)
 8000356:	2201      	movs	r2, #1
 8000358:	701a      	strb	r2, [r3, #0]
 800035a:	4770      	bx	lr
 800035c:	20000220 	.word	0x20000220

08000360 <HAL_UART_RxCpltCallback>:
	#ifdef CONFIG_USE_FREERTOS
	taskDISABLE_INTERRUPTS();
	#endif

	#ifdef CONFIG_MODULE_DEBUGUSART_ENABLE
	if ( ( UartHandle->Instance == DEBUG_USARTx ) && ( UartHandle == &Debug_UartHandle ) )
 8000360:	6801      	ldr	r1, [r0, #0]
 8000362:	4a3a      	ldr	r2, [pc, #232]	; (800044c <HAL_UART_RxCpltCallback+0xec>)
 8000364:	4291      	cmp	r1, r2
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	#ifdef CONFIG_USE_FREERTOS
	taskDISABLE_INTERRUPTS();
	#endif

	#ifdef CONFIG_MODULE_DEBUGUSART_ENABLE
	if ( ( UartHandle->Instance == DEBUG_USARTx ) && ( UartHandle == &Debug_UartHandle ) )
 8000368:	d16f      	bne.n	800044a <HAL_UART_RxCpltCallback+0xea>
 800036a:	4a39      	ldr	r2, [pc, #228]	; (8000450 <HAL_UART_RxCpltCallback+0xf0>)
 800036c:	4290      	cmp	r0, r2
 800036e:	d16c      	bne.n	800044a <HAL_UART_RxCpltCallback+0xea>
	{

		if ( MONITOR_CommandEnable )
 8000370:	4b38      	ldr	r3, [pc, #224]	; (8000454 <HAL_UART_RxCpltCallback+0xf4>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d068      	beq.n	800044a <HAL_UART_RxCpltCallback+0xea>
		{
			// ESCAPE SEQUENCE
			if ( MONITOR_CommandEscapeStart_flag == 1 )
 8000378:	4b37      	ldr	r3, [pc, #220]	; (8000458 <HAL_UART_RxCpltCallback+0xf8>)
 800037a:	781a      	ldrb	r2, [r3, #0]
 800037c:	b2d2      	uxtb	r2, r2
 800037e:	2a01      	cmp	r2, #1
 8000380:	d105      	bne.n	800038e <HAL_UART_RxCpltCallback+0x2e>
			{	// We are in escape sequence
				MONITOR_CommandEscapeStart_flag = 0;
 8000382:	2100      	movs	r1, #0
 8000384:	7019      	strb	r1, [r3, #0]
				MONITOR_CommandEscapeEnd_flag = 1;
 8000386:	4b35      	ldr	r3, [pc, #212]	; (800045c <HAL_UART_RxCpltCallback+0xfc>)
						MONITOR_CommandActualEscape[MONITOR_CommandEscape_cnt++] = USART_ReceivedChar;
						MONITOR_CommandEscapeStart_flag = 0;
						MONITOR_CommandEscapeEnd_flag = 1;
					}
				*/
				HAL_UART_Receive_IT(&Debug_UartHandle, (uint8_t *)USART_RxBuffer, RXBUFFERSIZE);
 8000388:	4935      	ldr	r1, [pc, #212]	; (8000460 <HAL_UART_RxCpltCallback+0x100>)
		{
			// ESCAPE SEQUENCE
			if ( MONITOR_CommandEscapeStart_flag == 1 )
			{	// We are in escape sequence
				MONITOR_CommandEscapeStart_flag = 0;
				MONITOR_CommandEscapeEnd_flag = 1;
 800038a:	701a      	strb	r2, [r3, #0]
 800038c:	e058      	b.n	8000440 <HAL_UART_RxCpltCallback+0xe0>

			}
			else	// No escape sequence
			{
				// An character received
				USART_ReceivedChar = USART_RxBuffer[0];	// TODO!
 800038e:	4a34      	ldr	r2, [pc, #208]	; (8000460 <HAL_UART_RxCpltCallback+0x100>)
 8000390:	4934      	ldr	r1, [pc, #208]	; (8000464 <HAL_UART_RxCpltCallback+0x104>)
 8000392:	7812      	ldrb	r2, [r2, #0]
 8000394:	700a      	strb	r2, [r1, #0]

				if ( USART_ReceivedChar  == '\x1B') {	// receive an Escape sequence
 8000396:	2a1b      	cmp	r2, #27
 8000398:	d108      	bne.n	80003ac <HAL_UART_RxCpltCallback+0x4c>
					MONITOR_CommandEscapeStart_flag = 1;
 800039a:	2401      	movs	r4, #1
 800039c:	701c      	strb	r4, [r3, #0]
					MONITOR_CommandActualEscape[0] = USART_ReceivedChar;
 800039e:	4932      	ldr	r1, [pc, #200]	; (8000468 <HAL_UART_RxCpltCallback+0x108>)
					MONITOR_CommandEscape_cnt = 1;
 80003a0:	4b32      	ldr	r3, [pc, #200]	; (800046c <HAL_UART_RxCpltCallback+0x10c>)
				// An character received
				USART_ReceivedChar = USART_RxBuffer[0];	// TODO!

				if ( USART_ReceivedChar  == '\x1B') {	// receive an Escape sequence
					MONITOR_CommandEscapeStart_flag = 1;
					MONITOR_CommandActualEscape[0] = USART_ReceivedChar;
 80003a2:	f801 2b01 	strb.w	r2, [r1], #1
					MONITOR_CommandEscape_cnt = 1;
 80003a6:	701c      	strb	r4, [r3, #0]
					HAL_UART_Receive_IT(UartHandle, &MONITOR_CommandActualEscape[1], 2);
 80003a8:	2202      	movs	r2, #2
 80003aa:	e049      	b.n	8000440 <HAL_UART_RxCpltCallback+0xe0>
				}
				else
				{
					if ( (USART_ReceivedChar  == '\r') || (USART_ReceivedChar == '\n'))
 80003ac:	2a0d      	cmp	r2, #13
 80003ae:	d001      	beq.n	80003b4 <HAL_UART_RxCpltCallback+0x54>
 80003b0:	2a0a      	cmp	r2, #10
 80003b2:	d109      	bne.n	80003c8 <HAL_UART_RxCpltCallback+0x68>
					{		// receive Enter
						MONITOR_CommandReadable = 1;
 80003b4:	4b2e      	ldr	r3, [pc, #184]	; (8000470 <HAL_UART_RxCpltCallback+0x110>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	701a      	strb	r2, [r3, #0]
						MONITOR_CommandActual[MONITOR_CommandLength] = '\0';
 80003ba:	4b2e      	ldr	r3, [pc, #184]	; (8000474 <HAL_UART_RxCpltCallback+0x114>)
 80003bc:	4a2e      	ldr	r2, [pc, #184]	; (8000478 <HAL_UART_RxCpltCallback+0x118>)
 80003be:	781b      	ldrb	r3, [r3, #0]
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	2100      	movs	r1, #0
 80003c4:	54d1      	strb	r1, [r2, r3]
 80003c6:	e038      	b.n	800043a <HAL_UART_RxCpltCallback+0xda>
					}
					else if ( USART_ReceivedChar  == USART_KEY_DELETE )
 80003c8:	2a7f      	cmp	r2, #127	; 0x7f
 80003ca:	d102      	bne.n	80003d2 <HAL_UART_RxCpltCallback+0x72>
					{	// In real world this is backspace	// PuTTy vs ZOC
						MONITOR_CommandReceivedBackspace = 1;
 80003cc:	2201      	movs	r2, #1
 80003ce:	4b2b      	ldr	r3, [pc, #172]	; (800047c <HAL_UART_RxCpltCallback+0x11c>)
 80003d0:	e032      	b.n	8000438 <HAL_UART_RxCpltCallback+0xd8>
					}
					else
					{	// simple char for the command
						// Receive an char
						if ( MONITOR_CommandLength < MONITOR_MAX_COMMAND_LENGTH )	// shorted than max length?
 80003d2:	4b28      	ldr	r3, [pc, #160]	; (8000474 <HAL_UART_RxCpltCallback+0x114>)
 80003d4:	7819      	ldrb	r1, [r3, #0]
 80003d6:	29ff      	cmp	r1, #255	; 0xff
 80003d8:	d02f      	beq.n	800043a <HAL_UART_RxCpltCallback+0xda>
						{
							if ( MONITOR_CommandCursorPosition == MONITOR_CommandLength )
 80003da:	4829      	ldr	r0, [pc, #164]	; (8000480 <HAL_UART_RxCpltCallback+0x120>)
 80003dc:	4d26      	ldr	r5, [pc, #152]	; (8000478 <HAL_UART_RxCpltCallback+0x118>)
 80003de:	7804      	ldrb	r4, [r0, #0]
 80003e0:	7819      	ldrb	r1, [r3, #0]
 80003e2:	428c      	cmp	r4, r1
							{	// CursorPosition = CommandLength		(end character)
								MONITOR_CommandActual[MONITOR_CommandLength] = USART_ReceivedChar ;
 80003e4:	7819      	ldrb	r1, [r3, #0]
					else
					{	// simple char for the command
						// Receive an char
						if ( MONITOR_CommandLength < MONITOR_MAX_COMMAND_LENGTH )	// shorted than max length?
						{
							if ( MONITOR_CommandCursorPosition == MONITOR_CommandLength )
 80003e6:	d10b      	bne.n	8000400 <HAL_UART_RxCpltCallback+0xa0>
							{	// CursorPosition = CommandLength		(end character)
								MONITOR_CommandActual[MONITOR_CommandLength] = USART_ReceivedChar ;
 80003e8:	546a      	strb	r2, [r5, r1]
								MONITOR_CommandLength++;
 80003ea:	781a      	ldrb	r2, [r3, #0]
 80003ec:	3201      	adds	r2, #1
 80003ee:	b2d2      	uxtb	r2, r2
 80003f0:	701a      	strb	r2, [r3, #0]
								MONITOR_CommandCursorPosition++;
 80003f2:	7803      	ldrb	r3, [r0, #0]
 80003f4:	3301      	adds	r3, #1
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	7003      	strb	r3, [r0, #0]
								MONITOR_CommandReceivedLastChar = 1;
 80003fa:	2201      	movs	r2, #1
 80003fc:	4b21      	ldr	r3, [pc, #132]	; (8000484 <HAL_UART_RxCpltCallback+0x124>)
 80003fe:	e01b      	b.n	8000438 <HAL_UART_RxCpltCallback+0xd8>

							}
							else
							{	// CursorPosition < CommandLength		(inner character)
								MONITOR_CommandLength++;
 8000400:	3101      	adds	r1, #1
 8000402:	b2c9      	uxtb	r1, r1
 8000404:	7019      	strb	r1, [r3, #0]
								// copy
								for ( int i = MONITOR_CommandLength; i > MONITOR_CommandCursorPosition; i-- ) MONITOR_CommandActual[i] = MONITOR_CommandActual[i-1];
 8000406:	7819      	ldrb	r1, [r3, #0]
 8000408:	4429      	add	r1, r5
 800040a:	f890 e000 	ldrb.w	lr, [r0]
 800040e:	4c1c      	ldr	r4, [pc, #112]	; (8000480 <HAL_UART_RxCpltCallback+0x120>)
 8000410:	4e19      	ldr	r6, [pc, #100]	; (8000478 <HAL_UART_RxCpltCallback+0x118>)
 8000412:	1b4f      	subs	r7, r1, r5
 8000414:	45be      	cmp	lr, r7
 8000416:	da03      	bge.n	8000420 <HAL_UART_RxCpltCallback+0xc0>
 8000418:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 800041c:	704c      	strb	r4, [r1, #1]
 800041e:	e7f4      	b.n	800040a <HAL_UART_RxCpltCallback+0xaa>
								MONITOR_CommandActual [ MONITOR_CommandCursorPosition ] = USART_ReceivedChar ;
 8000420:	7821      	ldrb	r1, [r4, #0]
								MONITOR_CommandActual [ MONITOR_CommandLength ] = '\0';
 8000422:	781b      	ldrb	r3, [r3, #0]
							else
							{	// CursorPosition < CommandLength		(inner character)
								MONITOR_CommandLength++;
								// copy
								for ( int i = MONITOR_CommandLength; i > MONITOR_CommandCursorPosition; i-- ) MONITOR_CommandActual[i] = MONITOR_CommandActual[i-1];
								MONITOR_CommandActual [ MONITOR_CommandCursorPosition ] = USART_ReceivedChar ;
 8000424:	5472      	strb	r2, [r6, r1]
								MONITOR_CommandActual [ MONITOR_CommandLength ] = '\0';
 8000426:	b2db      	uxtb	r3, r3
 8000428:	2200      	movs	r2, #0
 800042a:	54f2      	strb	r2, [r6, r3]
								MONITOR_CommandCursorPosition++;
 800042c:	7823      	ldrb	r3, [r4, #0]
 800042e:	3301      	adds	r3, #1
 8000430:	b2db      	uxtb	r3, r3
 8000432:	7023      	strb	r3, [r4, #0]
								MONITOR_CommandReceivedNotLastChar = 1;
 8000434:	4b14      	ldr	r3, [pc, #80]	; (8000488 <HAL_UART_RxCpltCallback+0x128>)
 8000436:	2201      	movs	r2, #1
 8000438:	701a      	strb	r2, [r3, #0]
						else	// longer than max length ...
						{
						}

					}
					HAL_UART_Receive_IT(&Debug_UartHandle, (uint8_t *)USART_RxBuffer, RXBUFFERSIZE);
 800043a:	4909      	ldr	r1, [pc, #36]	; (8000460 <HAL_UART_RxCpltCallback+0x100>)
 800043c:	4804      	ldr	r0, [pc, #16]	; (8000450 <HAL_UART_RxCpltCallback+0xf0>)
 800043e:	2201      	movs	r2, #1
 8000440:	f001 f93f 	bl	80016c2 <HAL_UART_Receive_IT>
			// Szemafor beallitasa:
			#ifdef CONFIG_USE_FREERTOS
			//xSemaphoreGive(DEBUG_Rx_Semaphore); // !! IMPORTANT !! ISR-bol nem szabad hasznalni!
			xSemaphoreGiveFromISR(DEBUG_USART_Rx_Semaphore,0);
			#endif
			MONITOR_CommandEvent = 1;
 8000444:	4b11      	ldr	r3, [pc, #68]	; (800048c <HAL_UART_RxCpltCallback+0x12c>)
 8000446:	2201      	movs	r2, #1
 8000448:	701a      	strb	r2, [r3, #0]
 800044a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800044c:	40004400 	.word	0x40004400
 8000450:	200001e0 	.word	0x200001e0
 8000454:	20000021 	.word	0x20000021
 8000458:	2000032d 	.word	0x2000032d
 800045c:	2000032a 	.word	0x2000032a
 8000460:	200000dc 	.word	0x200000dc
 8000464:	200000dd 	.word	0x200000dd
 8000468:	20000327 	.word	0x20000327
 800046c:	2000032c 	.word	0x2000032c
 8000470:	20000224 	.word	0x20000224
 8000474:	20000223 	.word	0x20000223
 8000478:	20000227 	.word	0x20000227
 800047c:	20000225 	.word	0x20000225
 8000480:	20000326 	.word	0x20000326
 8000484:	2000032b 	.word	0x2000032b
 8000488:	20000226 	.word	0x20000226
 800048c:	20000222 	.word	0x20000222

08000490 <HAL_UART_ErrorCallback>:



// !! IMPORTANT !! Hiba eseten ebbe az ErrorCallback-be jutunk.
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000490:	b508      	push	{r3, lr}

	if (huart->Instance == USART1 )
 8000492:	6802      	ldr	r2, [r0, #0]
 8000494:	4b0d      	ldr	r3, [pc, #52]	; (80004cc <HAL_UART_ErrorCallback+0x3c>)
 8000496:	429a      	cmp	r2, r3
 8000498:	d114      	bne.n	80004c4 <HAL_UART_ErrorCallback+0x34>

		//__HAL_UART_RESET_HANDLE_STATE(&BluetoothUartHandle);
		//__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
		//__HAL_UART_CLEAR_FLAG(&BluetoothUartHandle, UART_FLAG_CTS | UART_FLAG_RXNE | UART_FLAG_TXE | UART_FLAG_TC | UART_FLAG_ORE | UART_FLAG_NE | UART_FLAG_FE | UART_FLAG_PE);

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800049a:	2300      	movs	r3, #0
		huart->gState = HAL_UART_STATE_READY;
 800049c:	2220      	movs	r2, #32

		//__HAL_UART_RESET_HANDLE_STATE(&BluetoothUartHandle);
		//__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
		//__HAL_UART_CLEAR_FLAG(&BluetoothUartHandle, UART_FLAG_CTS | UART_FLAG_RXNE | UART_FLAG_TXE | UART_FLAG_TC | UART_FLAG_ORE | UART_FLAG_NE | UART_FLAG_FE | UART_FLAG_PE);

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800049e:	63c3      	str	r3, [r0, #60]	; 0x3c
		huart->gState = HAL_UART_STATE_READY;
		huart->TxXferCount = 0;
 80004a0:	84c3      	strh	r3, [r0, #38]	; 0x26
		//__HAL_UART_RESET_HANDLE_STATE(&BluetoothUartHandle);
		//__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
		//__HAL_UART_CLEAR_FLAG(&BluetoothUartHandle, UART_FLAG_CTS | UART_FLAG_RXNE | UART_FLAG_TXE | UART_FLAG_TC | UART_FLAG_ORE | UART_FLAG_NE | UART_FLAG_FE | UART_FLAG_PE);

		huart->ErrorCode = HAL_UART_ERROR_NONE;
		huart->gState = HAL_UART_STATE_READY;
 80004a2:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
		huart->TxXferCount = 0;
		huart->TxXferSize = 0;
 80004a6:	8483      	strh	r3, [r0, #36]	; 0x24
		huart->RxXferCount = 0;
 80004a8:	85c3      	strh	r3, [r0, #46]	; 0x2e
		huart->RxXferSize = 0;
 80004aa:	8583      	strh	r3, [r0, #44]	; 0x2c

		//__HAL_UART_FLUSH_DRREGISTER(&BluetoothUartHandle);
		#ifdef CONFIG_MODULE_DEBUGUSART_ENABLE
		
		HAL_UART_Receive_IT(&Debug_UartHandle, (uint8_t *)USART_RxBuffer, RXBUFFERSIZE);
 80004ac:	2201      	movs	r2, #1
 80004ae:	4908      	ldr	r1, [pc, #32]	; (80004d0 <HAL_UART_ErrorCallback+0x40>)
 80004b0:	4808      	ldr	r0, [pc, #32]	; (80004d4 <HAL_UART_ErrorCallback+0x44>)
 80004b2:	f001 f906 	bl	80016c2 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&Debug_UartHandle,(uint8_t *)"$",1);
 80004b6:	2201      	movs	r2, #1
 80004b8:	4907      	ldr	r1, [pc, #28]	; (80004d8 <HAL_UART_ErrorCallback+0x48>)
 80004ba:	4806      	ldr	r0, [pc, #24]	; (80004d4 <HAL_UART_ErrorCallback+0x44>)
	{
		Error_Handler();
	}
	
	return;
}
 80004bc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

		//__HAL_UART_FLUSH_DRREGISTER(&BluetoothUartHandle);
		#ifdef CONFIG_MODULE_DEBUGUSART_ENABLE
		
		HAL_UART_Receive_IT(&Debug_UartHandle, (uint8_t *)USART_RxBuffer, RXBUFFERSIZE);
		HAL_UART_Transmit_IT(&Debug_UartHandle,(uint8_t *)"$",1);
 80004c0:	f001 b8e0 	b.w	8001684 <HAL_UART_Transmit_IT>
	{
		Error_Handler();
	}
	
	return;
}
 80004c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

	}	
#endif
	else
	{
		Error_Handler();
 80004c8:	f000 bcae 	b.w	8000e28 <Error_Handler>
 80004cc:	40011000 	.word	0x40011000
 80004d0:	200000dc 	.word	0x200000dc
 80004d4:	200001e0 	.word	0x200001e0
 80004d8:	08002070 	.word	0x08002070

080004dc <USART_ReceiveMessage>:
 #ifdef CONFIG_MODULE_DEBUGUSART_ENABLE
void USART_ReceiveMessage ( void )
{

	// USART - Receive Message - uzenetvaras
	HAL_UART_Receive_IT(&Debug_UartHandle, (uint8_t *)USART_RxBuffer, RXBUFFERSIZE);
 80004dc:	2201      	movs	r2, #1
 80004de:	4902      	ldr	r1, [pc, #8]	; (80004e8 <USART_ReceiveMessage+0xc>)
 80004e0:	4802      	ldr	r0, [pc, #8]	; (80004ec <USART_ReceiveMessage+0x10>)
 80004e2:	f001 b8ee 	b.w	80016c2 <HAL_UART_Receive_IT>
 80004e6:	bf00      	nop
 80004e8:	200000dc 	.word	0x200000dc
 80004ec:	200001e0 	.word	0x200001e0

080004f0 <USART_WaitForSend>:
#endif	// #ifdef CONFIG_MODULE_DEBUGUSART_ENABLE



uint8_t USART_WaitForSend (uint16_t timeoutMiliSecond)
{
 80004f0:	b538      	push	{r3, r4, r5, lr}

	while(USART_SendEnable_flag == DISABLE && timeoutMiliSecond != 0)
 80004f2:	4d07      	ldr	r5, [pc, #28]	; (8000510 <USART_WaitForSend+0x20>)
#endif	// #ifdef CONFIG_MODULE_DEBUGUSART_ENABLE



uint8_t USART_WaitForSend (uint16_t timeoutMiliSecond)
{
 80004f4:	4604      	mov	r4, r0

	while(USART_SendEnable_flag == DISABLE && timeoutMiliSecond != 0)
 80004f6:	782b      	ldrb	r3, [r5, #0]
 80004f8:	b933      	cbnz	r3, 8000508 <USART_WaitForSend+0x18>
 80004fa:	b12c      	cbz	r4, 8000508 <USART_WaitForSend+0x18>
	{	
		timeoutMiliSecond--;
 80004fc:	3c01      	subs	r4, #1
		HAL_Delay(1);
 80004fe:	2001      	movs	r0, #1
uint8_t USART_WaitForSend (uint16_t timeoutMiliSecond)
{

	while(USART_SendEnable_flag == DISABLE && timeoutMiliSecond != 0)
	{	
		timeoutMiliSecond--;
 8000500:	b2a4      	uxth	r4, r4
		HAL_Delay(1);
 8000502:	f001 fd25 	bl	8001f50 <HAL_Delay>
 8000506:	e7f6      	b.n	80004f6 <USART_WaitForSend+0x6>
	}
	
	USART_SendEnable_flag = ENABLE;
 8000508:	4b01      	ldr	r3, [pc, #4]	; (8000510 <USART_WaitForSend+0x20>)
 800050a:	2001      	movs	r0, #1
 800050c:	7018      	strb	r0, [r3, #0]

	
	return ENABLE;
	
}
 800050e:	bd38      	pop	{r3, r4, r5, pc}
 8000510:	20000220 	.word	0x20000220

08000514 <USART_SendMessage>:
/**
 * \brief	Send string on USART
 */
// TODO: ReturnType + Check Pointer
bool USART_SendMessage ( const char *aTxBuffer )
{
 8000514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000516:	4607      	mov	r7, r0
	#ifdef CONFIG_MODULE_DEBUGUSART_ENABLE
	uint8_t length = 0;

	length = StringLength(aTxBuffer);
 8000518:	f000 f9fd 	bl	8000916 <StringLength>

	if ( length == 0 )
 800051c:	4606      	mov	r6, r0
 800051e:	b908      	cbnz	r0, 8000524 <USART_SendMessage+0x10>
	{
		return false;
 8000520:	2000      	movs	r0, #0
 8000522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}


	#ifdef CONFIG_USE_FREERTOS
	if ( xSemaphoreTake(DEBUG_USART_Tx_Semaphore, (portTickType) 10000) == pdTRUE )
	#else
	if ( USART_WaitForSend(500))
 8000524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000528:	f7ff ffe2 	bl	80004f0 <USART_WaitForSend>
 800052c:	2800      	cmp	r0, #0
 800052e:	d0f7      	beq.n	8000520 <USART_SendMessage+0xc>
	#endif
	{
		// Take semaphore, can sending
		
		USART_SendEnable_flag = DISABLE;
 8000530:	4d08      	ldr	r5, [pc, #32]	; (8000554 <USART_SendMessage+0x40>)
		
		StrCpy(USART_TxBuffer,aTxBuffer);
 8000532:	4809      	ldr	r0, [pc, #36]	; (8000558 <USART_SendMessage+0x44>)
 8000534:	4639      	mov	r1, r7
	if ( USART_WaitForSend(500))
	#endif
	{
		// Take semaphore, can sending
		
		USART_SendEnable_flag = DISABLE;
 8000536:	2400      	movs	r4, #0
 8000538:	702c      	strb	r4, [r5, #0]
		
		StrCpy(USART_TxBuffer,aTxBuffer);
 800053a:	f000 fa06 	bl	800094a <StrCpy>

		// ComIT
		if(HAL_UART_Transmit_IT(&Debug_UartHandle, (uint8_t*)USART_TxBuffer, length)!= HAL_OK)
 800053e:	b2b2      	uxth	r2, r6
 8000540:	4905      	ldr	r1, [pc, #20]	; (8000558 <USART_SendMessage+0x44>)
 8000542:	4806      	ldr	r0, [pc, #24]	; (800055c <USART_SendMessage+0x48>)
 8000544:	f001 f89e 	bl	8001684 <HAL_UART_Transmit_IT>
 8000548:	2301      	movs	r3, #1
 800054a:	b108      	cbz	r0, 8000550 <USART_SendMessage+0x3c>
			// NOTE: !!IMPORTANT!! Not sent message
			//Error_Handler();
			#ifdef CONFIG_USE_FREERTOS
			xSemaphoreGive(DEBUG_USART_Tx_Semaphore);
			#endif
			USART_SendEnable_flag = ENABLE;	// Failed to send, now we can send message
 800054c:	702b      	strb	r3, [r5, #0]
 800054e:	e7e7      	b.n	8000520 <USART_SendMessage+0xc>
		}
		else
		{
			// Successful sending with IT
			// Semaphore give by IT routine
			return true;
 8000550:	4618      	mov	r0, r3
		return false;
	}


	#endif // #ifdef CONFIG_MODULE_DEBUGUSART_ENABLE
}
 8000552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000554:	20000220 	.word	0x20000220
 8000558:	200000de 	.word	0x200000de
 800055c:	200001e0 	.word	0x200001e0

08000560 <USART_SendChar>:

/**
 * \brief	Send a char on USART
 */
bool USART_SendChar ( char c )
{
 8000560:	b537      	push	{r0, r1, r2, r4, r5, lr}
	#ifdef CONFIG_MODULE_DEBUGUSART_ENABLE
	char buf[2];
	buf[0] = c;
	buf[1] = '\0';
 8000562:	2400      	movs	r4, #0
 */
bool USART_SendChar ( char c )
{
	#ifdef CONFIG_MODULE_DEBUGUSART_ENABLE
	char buf[2];
	buf[0] = c;
 8000564:	f88d 0004 	strb.w	r0, [sp, #4]

	
	#ifdef CONFIG_USE_FREERTOS
	if ( xSemaphoreTake(DEBUG_USART_Tx_Semaphore, (portTickType) 1000) == pdTRUE )
	#else
	if ( USART_WaitForSend(100))
 8000568:	2064      	movs	r0, #100	; 0x64
bool USART_SendChar ( char c )
{
	#ifdef CONFIG_MODULE_DEBUGUSART_ENABLE
	char buf[2];
	buf[0] = c;
	buf[1] = '\0';
 800056a:	f88d 4005 	strb.w	r4, [sp, #5]

	
	#ifdef CONFIG_USE_FREERTOS
	if ( xSemaphoreTake(DEBUG_USART_Tx_Semaphore, (portTickType) 1000) == pdTRUE )
	#else
	if ( USART_WaitForSend(100))
 800056e:	f7ff ffbf 	bl	80004f0 <USART_WaitForSend>
 8000572:	b180      	cbz	r0, 8000596 <USART_SendChar+0x36>
	#endif	
	{
		// Successful take USART semaphore
		USART_SendEnable_flag = DISABLE;
 8000574:	4d09      	ldr	r5, [pc, #36]	; (800059c <USART_SendChar+0x3c>)

		StrCpy(USART_TxBuffer,buf);
 8000576:	480a      	ldr	r0, [pc, #40]	; (80005a0 <USART_SendChar+0x40>)
	#else
	if ( USART_WaitForSend(100))
	#endif	
	{
		// Successful take USART semaphore
		USART_SendEnable_flag = DISABLE;
 8000578:	702c      	strb	r4, [r5, #0]

		StrCpy(USART_TxBuffer,buf);
 800057a:	a901      	add	r1, sp, #4
 800057c:	f000 f9e5 	bl	800094a <StrCpy>

		if(HAL_UART_Transmit_IT(&Debug_UartHandle, (uint8_t *)USART_TxBuffer, 1)!= HAL_OK)
 8000580:	2201      	movs	r2, #1
 8000582:	4907      	ldr	r1, [pc, #28]	; (80005a0 <USART_SendChar+0x40>)
 8000584:	4807      	ldr	r0, [pc, #28]	; (80005a4 <USART_SendChar+0x44>)
 8000586:	f001 f87d 	bl	8001684 <HAL_UART_Transmit_IT>
 800058a:	2301      	movs	r3, #1
 800058c:	b110      	cbz	r0, 8000594 <USART_SendChar+0x34>
			// NOTE: !! IMPORTANT!! Not sent message
			//Error_Handler();
			#ifdef CONFIG_USE_FREERTOS
			xSemaphoreGive(DEBUG_USART_Tx_Semaphore);
			#endif
			USART_SendEnable_flag = ENABLE;
 800058e:	702b      	strb	r3, [r5, #0]
			return false;
 8000590:	4620      	mov	r0, r4
 8000592:	e000      	b.n	8000596 <USART_SendChar+0x36>
		}
		else
		{
			// Successful sending on USART
			// Semaphore will give from ISR
			return true;
 8000594:	4618      	mov	r0, r3
		return false;
	}


	#endif // #ifdef CONFIG_MODULE_DEBUGUSART_ENABLE
}
 8000596:	b003      	add	sp, #12
 8000598:	bd30      	pop	{r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000220 	.word	0x20000220
 80005a0:	200000de 	.word	0x200000de
 80005a4:	200001e0 	.word	0x200001e0

080005a8 <uprintf>:



// Function: like printf(); C function
// Bemasoljuk egy stringbe a szoveget, es csak azutan kuldjuk ki
void uprintf(char * param, ...) {			// d, w, h, b, c, s, %
 80005a8:	b40f      	push	{r0, r1, r2, r3}
 80005aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ac:	b0c3      	sub	sp, #268	; 0x10c
 80005ae:	aa48      	add	r2, sp, #288	; 0x120
	unsigned int uival;	// uint
	float	flval;		// float
	char 	cval;		// character

	char *string;
	string = TxBuffer;
 80005b0:	ac02      	add	r4, sp, #8



// Function: like printf(); C function
// Bemasoljuk egy stringbe a szoveget, es csak azutan kuldjuk ki
void uprintf(char * param, ...) {			// d, w, h, b, c, s, %
 80005b2:	f852 3b04 	ldr.w	r3, [r2], #4

	char *string;
	string = TxBuffer;
	//uint8_t	length = 0;

	va_start(ap, param); 							// ap on arg
 80005b6:	9201      	str	r2, [sp, #4]
 80005b8:	4625      	mov	r5, r4
					  break;

			case 'c': cval = va_arg(ap, int);						// Char
					  *string = cval;								// copy to string
					  string++;
					  *string = '\0';
 80005ba:	2600      	movs	r6, #0
	char *string;
	string = TxBuffer;
	//uint8_t	length = 0;

	va_start(ap, param); 							// ap on arg
	for (p = param; *p; p++) {  	       			// p to EOS
 80005bc:	781a      	ldrb	r2, [r3, #0]
 80005be:	2a00      	cmp	r2, #0
 80005c0:	d069      	beq.n	8000696 <uprintf+0xee>
		if (*p != '%')								// copy, if not '%'
 80005c2:	2a25      	cmp	r2, #37	; 0x25
 80005c4:	d003      	beq.n	80005ce <uprintf+0x26>
		{
			*string = *p;							// copy to string
 80005c6:	f804 2b01 	strb.w	r2, [r4], #1
 80005ca:	461f      	mov	r7, r3
 80005cc:	e061      	b.n	8000692 <uprintf+0xea>
			string++;
		}
		else            							// there is %, working
		{ switch(*++p)
 80005ce:	1c5f      	adds	r7, r3, #1
 80005d0:	785b      	ldrb	r3, [r3, #1]
 80005d2:	f1a3 0262 	sub.w	r2, r3, #98	; 0x62
 80005d6:	2a15      	cmp	r2, #21
 80005d8:	d859      	bhi.n	800068e <uprintf+0xe6>
 80005da:	e8df f002 	tbb	[pc, r2]
 80005de:	302a      	.short	0x302a
 80005e0:	583a580b 	.word	0x583a580b
 80005e4:	58585821 	.word	0x58585821
 80005e8:	58585858 	.word	0x58585858
 80005ec:	4d585858 	.word	0x4d585858
 80005f0:	1b581358 	.word	0x1b581358
		  {
			case 'd': ival = va_arg(ap, int);						// Decimal
 80005f4:	9b01      	ldr	r3, [sp, #4]
					  string += SignedDecimalToString(ival,string);
 80005f6:	4621      	mov	r1, r4
			string++;
		}
		else            							// there is %, working
		{ switch(*++p)
		  {
			case 'd': ival = va_arg(ap, int);						// Decimal
 80005f8:	1d1a      	adds	r2, r3, #4
					  string += SignedDecimalToString(ival,string);
 80005fa:	6818      	ldr	r0, [r3, #0]
			string++;
		}
		else            							// there is %, working
		{ switch(*++p)
		  {
			case 'd': ival = va_arg(ap, int);						// Decimal
 80005fc:	9201      	str	r2, [sp, #4]
					  string += SignedDecimalToString(ival,string);
 80005fe:	f000 f871 	bl	80006e4 <SignedDecimalToString>
 8000602:	e037      	b.n	8000674 <uprintf+0xcc>
					  break;

			case 'u': uival = va_arg(ap, int);						// unsigned
 8000604:	9b01      	ldr	r3, [sp, #4]
					  string += UnsignedDecimalToString(uival,string);
 8000606:	4621      	mov	r1, r4
		  {
			case 'd': ival = va_arg(ap, int);						// Decimal
					  string += SignedDecimalToString(ival,string);
					  break;

			case 'u': uival = va_arg(ap, int);						// unsigned
 8000608:	1d1a      	adds	r2, r3, #4
					  string += UnsignedDecimalToString(uival,string);
 800060a:	6818      	ldr	r0, [r3, #0]
		  {
			case 'd': ival = va_arg(ap, int);						// Decimal
					  string += SignedDecimalToString(ival,string);
					  break;

			case 'u': uival = va_arg(ap, int);						// unsigned
 800060c:	9201      	str	r2, [sp, #4]
					  string += UnsignedDecimalToString(uival,string);
 800060e:	f000 f84b 	bl	80006a8 <UnsignedDecimalToString>
 8000612:	e02f      	b.n	8000674 <uprintf+0xcc>
					  break;

			case 'w': uival = va_arg(ap, unsigned int);				// Hex // 32 bits	// 8 hex	// 4 byte
 8000614:	9b01      	ldr	r3, [sp, #4]
 8000616:	1d1a      	adds	r2, r3, #4
 8000618:	9201      	str	r2, [sp, #4]
					  string += DecimalToHexaString(uival,4,string);// copy to string
 800061a:	2104      	movs	r1, #4
 800061c:	4622      	mov	r2, r4
 800061e:	e004      	b.n	800062a <uprintf+0x82>
					  break;

			case 'h': ival = va_arg(ap, int);						// Hex // 16 bits	// 4 hex	// 2 byte
 8000620:	9b01      	ldr	r3, [sp, #4]
 8000622:	1d1a      	adds	r2, r3, #4
 8000624:	9201      	str	r2, [sp, #4]
					  string += DecimalToHexaString(ival,2,string);	// copy to string
 8000626:	2102      	movs	r1, #2
 8000628:	4622      	mov	r2, r4
 800062a:	6818      	ldr	r0, [r3, #0]
 800062c:	f000 f888 	bl	8000740 <DecimalToHexaString>
 8000630:	e020      	b.n	8000674 <uprintf+0xcc>
					  break;

			case 'b': ival = va_arg(ap, int);						// Hex	// 8 bits	// 2 hex	// 1 byte
 8000632:	9b01      	ldr	r3, [sp, #4]
 8000634:	1d1a      	adds	r2, r3, #4
 8000636:	9201      	str	r2, [sp, #4]
					  string += DecimalToHexaString(ival,1,string);	// copy to string
 8000638:	2101      	movs	r1, #1
 800063a:	4622      	mov	r2, r4
 800063c:	e7f5      	b.n	800062a <uprintf+0x82>
					  break;

			case 'c': cval = va_arg(ap, int);						// Char
 800063e:	9b01      	ldr	r3, [sp, #4]
 8000640:	1d1a      	adds	r2, r3, #4
 8000642:	9201      	str	r2, [sp, #4]
					  *string = cval;								// copy to string
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	4623      	mov	r3, r4
 8000648:	f803 2b01 	strb.w	r2, [r3], #1
					  string++;
					  *string = '\0';
 800064c:	7066      	strb	r6, [r4, #1]
					  string += DecimalToHexaString(ival,1,string);	// copy to string
					  break;

			case 'c': cval = va_arg(ap, int);						// Char
					  *string = cval;								// copy to string
					  string++;
 800064e:	461c      	mov	r4, r3
					  *string = '\0';
					  break;
 8000650:	e01f      	b.n	8000692 <uprintf+0xea>
			case 'f': //flval = va_arg(ap, float);					// float
					  //string += FloatToString(ival,string,6);
					  //flval = va_arg(ap, float);					// GOOD, but warning
					  flval = va_arg(ap, double);
 8000652:	9b01      	ldr	r3, [sp, #4]
 8000654:	3307      	adds	r3, #7
 8000656:	f023 0307 	bic.w	r3, r3, #7
 800065a:	f103 0208 	add.w	r2, r3, #8
					  string += FloatToString(flval,string,6);
 800065e:	e9d3 0100 	ldrd	r0, r1, [r3]
					  *string = '\0';
					  break;
			case 'f': //flval = va_arg(ap, float);					// float
					  //string += FloatToString(ival,string,6);
					  //flval = va_arg(ap, float);					// GOOD, but warning
					  flval = va_arg(ap, double);
 8000662:	9201      	str	r2, [sp, #4]
					  string += FloatToString(flval,string,6);
 8000664:	f7ff fdb0 	bl	80001c8 <__aeabi_d2f>
 8000668:	2106      	movs	r1, #6
 800066a:	ee00 0a10 	vmov	s0, r0
 800066e:	4620      	mov	r0, r4
 8000670:	f000 f888 	bl	8000784 <FloatToString>
 8000674:	4404      	add	r4, r0
					  break;
 8000676:	e00c      	b.n	8000692 <uprintf+0xea>
			case 's': for(sval = va_arg(ap,char*); *sval; sval++)	// String
 8000678:	9b01      	ldr	r3, [sp, #4]
 800067a:	1d1a      	adds	r2, r3, #4
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	9201      	str	r2, [sp, #4]
 8000680:	3b01      	subs	r3, #1
 8000682:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8000686:	b122      	cbz	r2, 8000692 <uprintf+0xea>
					  {
						*string = *sval;							// copy to string
 8000688:	f804 2b01 	strb.w	r2, [r4], #1
 800068c:	e7f9      	b.n	8000682 <uprintf+0xda>
						string++;
					  }
					  break;

			default:  *string = *p;									// Other, for example: '%'
 800068e:	f804 3b01 	strb.w	r3, [r4], #1
	char *string;
	string = TxBuffer;
	//uint8_t	length = 0;

	va_start(ap, param); 							// ap on arg
	for (p = param; *p; p++) {  	       			// p to EOS
 8000692:	1c7b      	adds	r3, r7, #1
 8000694:	e792      	b.n	80005bc <uprintf+0x14>
		  }
		}
	}
	va_end(ap);						 							// Cleaning after end

	*string = '\0';												// string's end
 8000696:	7022      	strb	r2, [r4, #0]

	USART_SendMessage(TxBuffer);							// Send on Usart
 8000698:	4628      	mov	r0, r5
 800069a:	f7ff ff3b 	bl	8000514 <USART_SendMessage>
}
 800069e:	b043      	add	sp, #268	; 0x10c
 80006a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80006a4:	b004      	add	sp, #16
 80006a6:	4770      	bx	lr

080006a8 <UnsignedDecimalToString>:
/*
 * \brief	Convert unsigned decimal to string
 * \return	created string length
 */
uint8_t UnsignedDecimalToString (uint32_t value, char *string)
{
 80006a8:	4603      	mov	r3, r0

	uint8_t length = 0;

	// Largest num: 1xxxxxx...
	uint32_t decade = 1000000000;
 80006aa:	480d      	ldr	r0, [pc, #52]	; (80006e0 <UnsignedDecimalToString+0x38>)
/*
 * \brief	Convert unsigned decimal to string
 * \return	created string length
 */
uint8_t UnsignedDecimalToString (uint32_t value, char *string)
{
 80006ac:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint8_t length = 0;
 80006ae:	2200      	movs	r2, #0
/*
 * \brief	Convert unsigned decimal to string
 * \return	created string length
 */
uint8_t UnsignedDecimalToString (uint32_t value, char *string)
{
 80006b0:	2409      	movs	r4, #9

		// Value - first digit
		value %= decade;

		// /10
		decade /= 10;
 80006b2:	260a      	movs	r6, #10
	// Largest num: 1xxxxxx...
	uint32_t decade = 1000000000;

	while (decade > 1)
	{
		if (value >= decade)
 80006b4:	4283      	cmp	r3, r0
 80006b6:	fbb3 f5f0 	udiv	r5, r3, r0
		{
			// Put first digit
			string[length++] = ((value/decade) + '0');
 80006ba:	bf21      	itttt	cs
 80006bc:	1c57      	addcs	r7, r2, #1
 80006be:	f105 0e30 	addcs.w	lr, r5, #48	; 0x30
 80006c2:	f801 e002 	strbcs.w	lr, [r1, r2]
 80006c6:	b2fa      	uxtbcs	r2, r7
	uint8_t length = 0;

	// Largest num: 1xxxxxx...
	uint32_t decade = 1000000000;

	while (decade > 1)
 80006c8:	3c01      	subs	r4, #1
			// Put first digit
			string[length++] = ((value/decade) + '0');
		}

		// Value - first digit
		value %= decade;
 80006ca:	fb00 3315 	mls	r3, r0, r5, r3

		// /10
		decade /= 10;
 80006ce:	fbb0 f0f6 	udiv	r0, r0, r6
	uint8_t length = 0;

	// Largest num: 1xxxxxx...
	uint32_t decade = 1000000000;

	while (decade > 1)
 80006d2:	d1ef      	bne.n	80006b4 <UnsignedDecimalToString+0xc>
		// /10
		decade /= 10;
	}

	// Last digit
	string[length++] = (value+ '0');
 80006d4:	1c50      	adds	r0, r2, #1
 80006d6:	b2c0      	uxtb	r0, r0
 80006d8:	3330      	adds	r3, #48	; 0x30
 80006da:	548b      	strb	r3, [r1, r2]

	// End character
	string[length] = '\0';
 80006dc:	540c      	strb	r4, [r1, r0]

	return length;
}
 80006de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e0:	3b9aca00 	.word	0x3b9aca00

080006e4 <SignedDecimalToString>:
 * \brief	Convert signed decimal to string
 * \note	Only max INT_MAX / 2 number can be converted
 * \return	created string length
 */
uint8_t SignedDecimalToString (int32_t value, char *string)
{
 80006e4:	b510      	push	{r4, lr}
	uint8_t length = 0;
	
	// Check pointer
	if (string == NULL)
 80006e6:	b169      	cbz	r1, 8000704 <SignedDecimalToString+0x20>
	{
		return 0;
	}

	if (value < 0)	// if negative decimal num
 80006e8:	2800      	cmp	r0, #0
	{
		string[length++] = '-';
 80006ea:	bfb7      	itett	lt
 80006ec:	2401      	movlt	r4, #1
 * \note	Only max INT_MAX / 2 number can be converted
 * \return	created string length
 */
uint8_t SignedDecimalToString (int32_t value, char *string)
{
	uint8_t length = 0;
 80006ee:	2400      	movge	r4, #0
		return 0;
	}

	if (value < 0)	// if negative decimal num
	{
		string[length++] = '-';
 80006f0:	232d      	movlt	r3, #45	; 0x2d
 80006f2:	700b      	strblt	r3, [r1, #0]
		value = (uint32_t) (value * (-1));// Sign +
 80006f4:	bfb8      	it	lt
 80006f6:	4240      	neglt	r0, r0
	}

	return (length + UnsignedDecimalToString (value,&string[length]));
 80006f8:	4421      	add	r1, r4
 80006fa:	f7ff ffd5 	bl	80006a8 <UnsignedDecimalToString>
 80006fe:	4420      	add	r0, r4
 8000700:	b2c0      	uxtb	r0, r0
 8000702:	bd10      	pop	{r4, pc}
	uint8_t length = 0;
	
	// Check pointer
	if (string == NULL)
	{
		return 0;
 8000704:	4608      	mov	r0, r1
		value = (uint32_t) (value * (-1));// Sign +
	}

	return (length + UnsignedDecimalToString (value,&string[length]));

}
 8000706:	bd10      	pop	{r4, pc}

08000708 <OctetToChar>:
 * \return	character (octet)
 */
char OctetToChar (uint8_t octet)
{
	char convertedOctet;
	if ((octet >= 0) && (octet <= 9))
 8000708:	2809      	cmp	r0, #9
 800070a:	d801      	bhi.n	8000710 <OctetToChar+0x8>
	{
		// 0- 9
		convertedOctet = (octet + '0');
 800070c:	3030      	adds	r0, #48	; 0x30
 800070e:	e004      	b.n	800071a <OctetToChar+0x12>
	}
	else if ((octet >= 10) && (octet <= 15))
 8000710:	f1a0 030a 	sub.w	r3, r0, #10
 8000714:	2b05      	cmp	r3, #5
 8000716:	d802      	bhi.n	800071e <OctetToChar+0x16>
	{
		// A-F
		convertedOctet = (octet - 10 + 'A');
 8000718:	3037      	adds	r0, #55	; 0x37
 800071a:	b2c0      	uxtb	r0, r0
 800071c:	4770      	bx	lr
	}
	else
	{
		convertedOctet = 'x';
 800071e:	2078      	movs	r0, #120	; 0x78
	}

	return convertedOctet;
}
 8000720:	4770      	bx	lr

08000722 <ByteToHexaString>:
/*
 * \brief	Convert a byte to hexa string
 * \return	Length
 */
uint8_t ByteToHexaString (uint8_t byte, char *string)
{
 8000722:	4602      	mov	r2, r0
 8000724:	b508      	push	{r3, lr}
	uint8_t length = 0;
	uint8_t octet;

	// First octet
	octet = (byte >> 4);
	string[length++] = OctetToChar (octet);
 8000726:	0900      	lsrs	r0, r0, #4
 8000728:	f7ff ffee 	bl	8000708 <OctetToChar>
 800072c:	7008      	strb	r0, [r1, #0]

	// Second octet
	octet = (byte & 0x0F);
	string[length++] = OctetToChar (octet);
 800072e:	f002 000f 	and.w	r0, r2, #15
 8000732:	f7ff ffe9 	bl	8000708 <OctetToChar>

	// Put end char
	string[length] = '\0';
 8000736:	2300      	movs	r3, #0
	octet = (byte >> 4);
	string[length++] = OctetToChar (octet);

	// Second octet
	octet = (byte & 0x0F);
	string[length++] = OctetToChar (octet);
 8000738:	7048      	strb	r0, [r1, #1]

	// Put end char
	string[length] = '\0';
 800073a:	708b      	strb	r3, [r1, #2]

	return length;

}
 800073c:	2002      	movs	r0, #2
 800073e:	bd08      	pop	{r3, pc}

08000740 <DecimalToHexaString>:
/*
 * \brief	Convert value to hexadecimalstring
 * \return	created string length
 */
uint8_t DecimalToHexaString (uint32_t value, uint8_t ByteNum, char *string)
{
 8000740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t i;
	uint8_t length = 0;

	// Check parameters
	if ((ByteNum > 4) || (ByteNum == 0))
 8000744:	1e4e      	subs	r6, r1, #1
 8000746:	b2f4      	uxtb	r4, r6
 8000748:	2c03      	cmp	r4, #3
/*
 * \brief	Convert value to hexadecimalstring
 * \return	created string length
 */
uint8_t DecimalToHexaString (uint32_t value, uint8_t ByteNum, char *string)
{
 800074a:	4680      	mov	r8, r0
 800074c:	4617      	mov	r7, r2
	uint8_t i;
	uint8_t length = 0;

	// Check parameters
	if ((ByteNum > 4) || (ByteNum == 0))
 800074e:	d816      	bhi.n	800077e <DecimalToHexaString+0x3e>
 8000750:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
 8000754:	3902      	subs	r1, #2
 8000756:	1b09      	subs	r1, r1, r4
 8000758:	00f6      	lsls	r6, r6, #3
 800075a:	00cc      	lsls	r4, r1, #3
 800075c:	2500      	movs	r5, #0

	for (i = 0; i < ByteNum; i++)
	{
		// Convert next byte
		uint8_t byte = (uint8_t)( value >> ((ByteNum-i-1)*8) );
		length += ByteToHexaString (byte,  string);
 800075e:	fa28 f006 	lsr.w	r0, r8, r6
 8000762:	4639      	mov	r1, r7
 8000764:	b2c0      	uxtb	r0, r0
 8000766:	f7ff ffdc 	bl	8000722 <ByteToHexaString>
 800076a:	3e08      	subs	r6, #8
 800076c:	4428      	add	r0, r5
	if ((ByteNum > 4) || (ByteNum == 0))
	{
		return 0;
	}

	for (i = 0; i < ByteNum; i++)
 800076e:	42a6      	cmp	r6, r4
	{
		// Convert next byte
		uint8_t byte = (uint8_t)( value >> ((ByteNum-i-1)*8) );
		length += ByteToHexaString (byte,  string);
 8000770:	b2c5      	uxtb	r5, r0
	if ((ByteNum > 4) || (ByteNum == 0))
	{
		return 0;
	}

	for (i = 0; i < ByteNum; i++)
 8000772:	d1f4      	bne.n	800075e <DecimalToHexaString+0x1e>
		// Convert next byte
		uint8_t byte = (uint8_t)( value >> ((ByteNum-i-1)*8) );
		length += ByteToHexaString (byte,  string);
	}

	string[length] = '\0';
 8000774:	2300      	movs	r3, #0
 8000776:	557b      	strb	r3, [r7, r5]

	for (i = 0; i < ByteNum; i++)
	{
		// Convert next byte
		uint8_t byte = (uint8_t)( value >> ((ByteNum-i-1)*8) );
		length += ByteToHexaString (byte,  string);
 8000778:	4628      	mov	r0, r5
	}

	string[length] = '\0';

	return length;
 800077a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint8_t length = 0;

	// Check parameters
	if ((ByteNum > 4) || (ByteNum == 0))
	{
		return 0;
 800077e:	2000      	movs	r0, #0

	string[length] = '\0';

	return length;

}
 8000780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000784 <FloatToString>:
	uint8_t length = 0;
	uint32_t calcValue;


	// Sign
	if (value < 0)
 8000784:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	{
		// Put '-'
		string[length++] = '-';
		value = (value * (-1));	// make positive
 800078c:	bf48      	it	mi
 800078e:	eeb1 0a40 	vnegmi.f32	s0, s0
	}


	// Integer
	calcValue = (uint32_t)value;
 8000792:	eefc 7ac0 	vcvt.u32.f32	s15, s0
/*
 * \brief	Convert float value to String
 * \return	Length
 */
uint8_t FloatToString (float value, char *string, uint8_t fractionLength)
{
 8000796:	b573      	push	{r0, r1, r4, r5, r6, lr}

	// Sign
	if (value < 0)
	{
		// Put '-'
		string[length++] = '-';
 8000798:	bf45      	ittet	mi
 800079a:	232d      	movmi	r3, #45	; 0x2d
 800079c:	2401      	movmi	r4, #1
 * \return	Length
 */
uint8_t FloatToString (float value, char *string, uint8_t fractionLength)
{
	uint8_t num;
	uint8_t length = 0;
 800079e:	2400      	movpl	r4, #0

	// Sign
	if (value < 0)
	{
		// Put '-'
		string[length++] = '-';
 80007a0:	7003      	strbmi	r3, [r0, #0]
/*
 * \brief	Convert float value to String
 * \return	Length
 */
uint8_t FloatToString (float value, char *string, uint8_t fractionLength)
{
 80007a2:	4606      	mov	r6, r0
 80007a4:	460d      	mov	r5, r1
	}


	// Integer
	calcValue = (uint32_t)value;
	length += UnsignedDecimalToString(calcValue,&string[length]);
 80007a6:	1901      	adds	r1, r0, r4
 80007a8:	ee17 0a90 	vmov	r0, s15
 80007ac:	f7ff ff7c 	bl	80006a8 <UnsignedDecimalToString>
 80007b0:	4420      	add	r0, r4
 80007b2:	b2c4      	uxtb	r4, r0


	// Point '.'
	string[length++] = '.';
 80007b4:	232e      	movs	r3, #46	; 0x2e
 80007b6:	1c60      	adds	r0, r4, #1
 80007b8:	5533      	strb	r3, [r6, r4]
	// fractionLength: 4
	// string: 4.5670

	// 4.567 --> 0.567 --> 5670
	// Only fraction
	value = (value - (uint32_t)value);
 80007ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007be:	1c6b      	adds	r3, r5, #1
	calcValue = (uint32_t)value;
	length += UnsignedDecimalToString(calcValue,&string[length]);


	// Point '.'
	string[length++] = '.';
 80007c0:	b2c0      	uxtb	r0, r0
 80007c2:	441c      	add	r4, r3
	// fractionLength: 4
	// string: 4.5670

	// 4.567 --> 0.567 --> 5670
	// Only fraction
	value = (value - (uint32_t)value);
 80007c4:	ee30 0a67 	vsub.f32	s0, s0, s15
 80007c8:	b2e4      	uxtb	r4, r4
	calcValue = (uint32_t)value;
	length += UnsignedDecimalToString(calcValue,&string[length]);


	// Point '.'
	string[length++] = '.';
 80007ca:	4602      	mov	r2, r0

	// * 10, and write
	while (fractionLength--)
	{
		// 0.567 --> 5.67
		value *= 10; 			// "shift left" = *10
 80007cc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
	// 4.567 --> 0.567 --> 5670
	// Only fraction
	value = (value - (uint32_t)value);

	// * 10, and write
	while (fractionLength--)
 80007d0:	42a2      	cmp	r2, r4
 80007d2:	d012      	beq.n	80007fa <FloatToString+0x76>
	{
		// 0.567 --> 5.67
		value *= 10; 			// "shift left" = *10
 80007d4:	ee20 0a27 	vmul.f32	s0, s0, s15
		// 5.67 --> 5
		num = (uint8_t)value;	// integer value (MSB octet)
		// 5.67 - 5
		value -= num;			// value--
		string[length++] = num + '0';
 80007d8:	1c51      	adds	r1, r2, #1
	while (fractionLength--)
	{
		// 0.567 --> 5.67
		value *= 10; 			// "shift left" = *10
		// 5.67 --> 5
		num = (uint8_t)value;	// integer value (MSB octet)
 80007da:	eebc 7ac0 	vcvt.u32.f32	s14, s0
 80007de:	ed8d 7a01 	vstr	s14, [sp, #4]
 80007e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
		// 5.67 - 5
		value -= num;			// value--
 80007e6:	ee07 3a10 	vmov	s14, r3
 80007ea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		string[length++] = num + '0';
 80007ee:	3330      	adds	r3, #48	; 0x30
 80007f0:	54b3      	strb	r3, [r6, r2]
		// 0.567 --> 5.67
		value *= 10; 			// "shift left" = *10
		// 5.67 --> 5
		num = (uint8_t)value;	// integer value (MSB octet)
		// 5.67 - 5
		value -= num;			// value--
 80007f2:	ee30 0a47 	vsub.f32	s0, s0, s14
		string[length++] = num + '0';
 80007f6:	b2ca      	uxtb	r2, r1
 80007f8:	e7ea      	b.n	80007d0 <FloatToString+0x4c>
 80007fa:	4428      	add	r0, r5
 80007fc:	b2c0      	uxtb	r0, r0
	}

	// Put end char
	string[length] = '\0';
 80007fe:	2300      	movs	r3, #0
 8000800:	5433      	strb	r3, [r6, r0]


	return length;
}
 8000802:	b002      	add	sp, #8
 8000804:	bd70      	pop	{r4, r5, r6, pc}

08000806 <IsHexChar>:
 * 			false, if no hex number
 */
bool IsHexChar(char c)
{
	bool isOk = false;
	if ((c >= '0') && (c <='9'))
 8000806:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800080a:	2b09      	cmp	r3, #9
 800080c:	d909      	bls.n	8000822 <IsHexChar+0x1c>
	{
		isOk = true;
	}
	else if ((c >= 'A') && (c <= 'F'))
 800080e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8000812:	2b05      	cmp	r3, #5
 8000814:	d905      	bls.n	8000822 <IsHexChar+0x1c>
	{
		isOk = true;
	}
	else if ((c >= 'a') && (c <= 'f'))
 8000816:	3861      	subs	r0, #97	; 0x61
 8000818:	2805      	cmp	r0, #5
 800081a:	bf8c      	ite	hi
 800081c:	2000      	movhi	r0, #0
 800081e:	2001      	movls	r0, #1
 8000820:	4770      	bx	lr
bool IsHexChar(char c)
{
	bool isOk = false;
	if ((c >= '0') && (c <='9'))
	{
		isOk = true;
 8000822:	2001      	movs	r0, #1
	{
		isOk = true;
	}

	return isOk;
}
 8000824:	4770      	bx	lr

08000826 <StringIsHexadecimalString>:
/*
 * \brief	Look the string is hexa or not
 * \return	How many hexa characters are...
 */
uint8_t StringIsHexadecimalString (const char *string)
{
 8000826:	b508      	push	{r3, lr}
	uint8_t length = 0;
	uint8_t i;

	// Check parameters
	if (string == NULL)
 8000828:	4602      	mov	r2, r0
 800082a:	b158      	cbz	r0, 8000844 <StringIsHexadecimalString+0x1e>
 800082c:	2100      	movs	r1, #0
 800082e:	b2cb      	uxtb	r3, r1
	{
		return 0;
	}
	
	for (i=0; string[i] != '\0'; i++)
 8000830:	5cd0      	ldrb	r0, [r2, r3]
 8000832:	b128      	cbz	r0, 8000840 <StringIsHexadecimalString+0x1a>
	{
		// Number all? 0-9, A-F, a-f
		if (IsHexChar(string[i]))
 8000834:	f7ff ffe7 	bl	8000806 <IsHexChar>
 8000838:	3101      	adds	r1, #1
 800083a:	2800      	cmp	r0, #0
 800083c:	d1f7      	bne.n	800082e <StringIsHexadecimalString+0x8>
 800083e:	e001      	b.n	8000844 <StringIsHexadecimalString+0x1e>
 8000840:	4618      	mov	r0, r3
 8000842:	bd08      	pop	{r3, pc}
			return 0;
		}
	}

	return length;
}
 8000844:	bd08      	pop	{r3, pc}

08000846 <HexCharToOctet>:
/*
 * \brief	Convert Hex character to octet (0-9, A-F)
 * \return	Value (number)
 */
uint8_t HexCharToOctet(char c)
{
 8000846:	4603      	mov	r3, r0
	uint8_t octet = 0;
	if ((c >= '0') && (c <='9'))
 8000848:	3830      	subs	r0, #48	; 0x30
 800084a:	b2c0      	uxtb	r0, r0
 800084c:	2809      	cmp	r0, #9
 800084e:	d90d      	bls.n	800086c <HexCharToOctet+0x26>
	{
		octet = c - '0';
	}
	else if ((c >= 'A') && (c <= 'F'))
 8000850:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8000854:	2a05      	cmp	r2, #5
 8000856:	d801      	bhi.n	800085c <HexCharToOctet+0x16>
	{
		octet = c - 'A' + 10;
 8000858:	3b37      	subs	r3, #55	; 0x37
 800085a:	e004      	b.n	8000866 <HexCharToOctet+0x20>
	}
	else if ((c >= 'a') && (c <= 'f'))
 800085c:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8000860:	2a05      	cmp	r2, #5
 8000862:	d802      	bhi.n	800086a <HexCharToOctet+0x24>
	{
		octet = c - 'a' + 10;
 8000864:	3b57      	subs	r3, #87	; 0x57
 8000866:	b2d8      	uxtb	r0, r3
 8000868:	4770      	bx	lr
 * \brief	Convert Hex character to octet (0-9, A-F)
 * \return	Value (number)
 */
uint8_t HexCharToOctet(char c)
{
	uint8_t octet = 0;
 800086a:	2000      	movs	r0, #0
	{
		octet = c - 'a' + 10;
	}

	return octet;
}
 800086c:	4770      	bx	lr

0800086e <StringByteToNum>:
 * \brief	Convert two hexadecimal string to number (byte)
 * \return	true, if successul
 * 			false, if has error
 */
bool StringByteToNum(const char *string, uint8_t *byte)
{
 800086e:	b538      	push	{r3, r4, r5, lr}
 8000870:	4605      	mov	r5, r0
	uint8_t calculatedByte = 0;
	calculatedByte |= (HexCharToOctet(string[0])&0x0F) << 4;
 8000872:	7800      	ldrb	r0, [r0, #0]
 8000874:	f7ff ffe7 	bl	8000846 <HexCharToOctet>
 8000878:	4604      	mov	r4, r0
	calculatedByte |= (HexCharToOctet(string[1])&0x0F);
 800087a:	7868      	ldrb	r0, [r5, #1]
 800087c:	f7ff ffe3 	bl	8000846 <HexCharToOctet>

	*byte = calculatedByte;
 8000880:	f004 040f 	and.w	r4, r4, #15
 8000884:	f000 000f 	and.w	r0, r0, #15
 8000888:	ea40 1004 	orr.w	r0, r0, r4, lsl #4
 800088c:	7008      	strb	r0, [r1, #0]
	return true;

}
 800088e:	2001      	movs	r0, #1
 8000890:	bd38      	pop	{r3, r4, r5, pc}

08000892 <StringHexToNum>:
 * \brief	Convert Hex string to number(integer)
 * \return	true, if successul
 * 			false, if has error
 */
bool StringHexToNum (const char *string, uint32_t *hexValue, uint8_t byteLength)
{
 8000892:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t i;
	uint32_t calculatedValue = 0;
	uint8_t calculatedByte = 0;
 8000894:	2300      	movs	r3, #0
 * \brief	Convert Hex string to number(integer)
 * \return	true, if successul
 * 			false, if has error
 */
bool StringHexToNum (const char *string, uint32_t *hexValue, uint8_t byteLength)
{
 8000896:	4606      	mov	r6, r0
 8000898:	460f      	mov	r7, r1
 800089a:	4614      	mov	r4, r2
	uint8_t i;
	uint32_t calculatedValue = 0;
	uint8_t calculatedByte = 0;
 800089c:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t octetLength = 0;


	octetLength = StringIsHexadecimalString (string);	// octetLength = how many hex character have
 80008a0:	f7ff ffc1 	bl	8000826 <StringIsHexadecimalString>

	if (octetLength == 0 || (octetLength%2))
 80008a4:	b908      	cbnz	r0, 80008aa <StringHexToNum+0x18>
	{
		// Wrong string or wrong octetlength
		return false;
 80008a6:	2000      	movs	r0, #0
 80008a8:	e01d      	b.n	80008e6 <StringHexToNum+0x54>
	uint8_t octetLength = 0;


	octetLength = StringIsHexadecimalString (string);	// octetLength = how many hex character have

	if (octetLength == 0 || (octetLength%2))
 80008aa:	07c3      	lsls	r3, r0, #31
 80008ac:	d4fb      	bmi.n	80008a6 <StringHexToNum+0x14>
	{
		// Wrong string or wrong octetlength
		return false;
	}

	if (byteLength == 0)
 80008ae:	b914      	cbnz	r4, 80008b6 <StringHexToNum+0x24>
	{
		// Calculate byte length
		byteLength = octetLength / 2;
 80008b0:	f3c0 0447 	ubfx	r4, r0, #1, #8
 80008b4:	e002      	b.n	80008bc <StringHexToNum+0x2a>
	}
	else if (octetLength != byteLength*2)
 80008b6:	ebb0 0f44 	cmp.w	r0, r4, lsl #1
 80008ba:	d1f4      	bne.n	80008a6 <StringHexToNum+0x14>
		// 2. = 1 = odd --> not need shift
		if ( StringByteToNum(&string[i],&calculatedByte) )
		{
			// For example: for 4 byte, first need << 24 (3*8)
			// After that, << 16 (2*8)
			calculatedValue = calculatedByte << ((byteLength-1)*8);
 80008bc:	3c01      	subs	r4, #1
 * 			false, if has error
 */
bool StringHexToNum (const char *string, uint32_t *hexValue, uint8_t byteLength)
{
	uint8_t i;
	uint32_t calculatedValue = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	00e4      	lsls	r4, r4, #3
		// Wrong byteLength
		return false;
	}

	// Create hexValue
	for (i=0; string[i] != '\0'; i++)
 80008c2:	461d      	mov	r5, r3
 80008c4:	5d72      	ldrb	r2, [r6, r5]
 80008c6:	1970      	adds	r0, r6, r5
 80008c8:	b15a      	cbz	r2, 80008e2 <StringHexToNum+0x50>
	{
		// 1. = 0 = event --> shift <<4
		// 2. = 1 = odd --> not need shift
		if ( StringByteToNum(&string[i],&calculatedByte) )
 80008ca:	f10d 0107 	add.w	r1, sp, #7
 80008ce:	f7ff ffce 	bl	800086e <StringByteToNum>
 80008d2:	2800      	cmp	r0, #0
 80008d4:	d0e7      	beq.n	80008a6 <StringHexToNum+0x14>
		{
			// For example: for 4 byte, first need << 24 (3*8)
			// After that, << 16 (2*8)
			calculatedValue = calculatedByte << ((byteLength-1)*8);
 80008d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		// Wrong byteLength
		return false;
	}

	// Create hexValue
	for (i=0; string[i] != '\0'; i++)
 80008da:	3502      	adds	r5, #2
		// 2. = 1 = odd --> not need shift
		if ( StringByteToNum(&string[i],&calculatedByte) )
		{
			// For example: for 4 byte, first need << 24 (3*8)
			// After that, << 16 (2*8)
			calculatedValue = calculatedByte << ((byteLength-1)*8);
 80008dc:	40a3      	lsls	r3, r4
		// Wrong byteLength
		return false;
	}

	// Create hexValue
	for (i=0; string[i] != '\0'; i++)
 80008de:	b2ed      	uxtb	r5, r5
 80008e0:	e7f0      	b.n	80008c4 <StringHexToNum+0x32>
		{
			return false;
		}
	}

	*hexValue = calculatedValue;
 80008e2:	603b      	str	r3, [r7, #0]

	return true;
 80008e4:	2001      	movs	r0, #1
}
 80008e6:	b003      	add	sp, #12
 80008e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008ea <UnsignedDecimalStringToNum>:
 * \brief	Convert Unsigned decimal string to integer
 * \return	true, if successul
 * 			false, if has error
 */
bool UnsignedDecimalStringToNum (const char *string, uint32_t *value)
{
 80008ea:	b530      	push	{r4, r5, lr}
	uint32_t calculatedValue = 0;
 80008ec:	2200      	movs	r2, #0
 80008ee:	1e44      	subs	r4, r0, #1
	{
		if (IsDecimalChar(string[i]))
		{
			decimal = DecimalCharToNum(string[i]);
			// Shift left 1* =  *10
			calculatedValue *= 10;
 80008f0:	250a      	movs	r5, #10
 80008f2:	300b      	adds	r0, #11
	uint32_t calculatedValue = 0;
	uint8_t i;
	uint8_t decimal;


	for (i=0; string[i] != '\0'; i++)
 80008f4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80008f8:	b143      	cbz	r3, 800090c <UnsignedDecimalStringToNum+0x22>
 * 			false, if no number
 */
bool IsDecimalChar(char c)
{
	bool isOk = false;
	if ((c >= '0') && (c <='9'))
 80008fa:	3b30      	subs	r3, #48	; 0x30
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b09      	cmp	r3, #9
 8000900:	d807      	bhi.n	8000912 <UnsignedDecimalStringToNum+0x28>
		{
			// Wrong character
			return false;
		}

		if (i>10)
 8000902:	4284      	cmp	r4, r0
		{
			decimal = DecimalCharToNum(string[i]);
			// Shift left 1* =  *10
			calculatedValue *= 10;
			// Add new value
			calculatedValue += decimal;
 8000904:	fb05 3202 	mla	r2, r5, r2, r3
		{
			// Wrong character
			return false;
		}

		if (i>10)
 8000908:	d1f4      	bne.n	80008f4 <UnsignedDecimalStringToNum+0xa>
 800090a:	e002      	b.n	8000912 <UnsignedDecimalStringToNum+0x28>
			// To long num
			return false;
		}
	}

	*value = calculatedValue;
 800090c:	600a      	str	r2, [r1, #0]

	return true;
 800090e:	2001      	movs	r0, #1
 8000910:	bd30      	pop	{r4, r5, pc}
			calculatedValue += decimal;
		}
		else
		{
			// Wrong character
			return false;
 8000912:	2000      	movs	r0, #0
	}

	*value = calculatedValue;

	return true;
}
 8000914:	bd30      	pop	{r4, r5, pc}

08000916 <StringLength>:
 */
uint8_t StringLength (const char *string)
{
	uint8_t length = 0;

	if (string == NULL)
 8000916:	b130      	cbz	r0, 8000926 <StringLength+0x10>
 8000918:	2300      	movs	r3, #0
 800091a:	b2da      	uxtb	r2, r3
 800091c:	3301      	adds	r3, #1
	{
		return 0;
	}

	while (string[length] !='\0') length++;	// Length = string length
 800091e:	5c81      	ldrb	r1, [r0, r2]
 8000920:	2900      	cmp	r1, #0
 8000922:	d1fa      	bne.n	800091a <StringLength+0x4>
 8000924:	4610      	mov	r0, r2
	return length;
}
 8000926:	4770      	bx	lr

08000928 <StrCmp>:
/*
 * \brief	Compare two string
 * \return	1, if not equal
 * 			0, if equal
 */
uint8_t StrCmp(const char * ch1, const char *ch2) {
 8000928:	3801      	subs	r0, #1

	while ( *ch1 )
 800092a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800092e:	460a      	mov	r2, r1
 8000930:	b133      	cbz	r3, 8000940 <StrCmp+0x18>
	{
		if ( *ch1 !=  *ch2 )
 8000932:	7812      	ldrb	r2, [r2, #0]
 8000934:	429a      	cmp	r2, r3
 8000936:	f101 0101 	add.w	r1, r1, #1
 800093a:	d0f6      	beq.n	800092a <StrCmp+0x2>
		{
			return 1;	// not equal
 800093c:	2001      	movs	r0, #1
	else
	{
		return 0;		// last ch2 char is '\0'
	}

}
 800093e:	4770      	bx	lr

	while ( *ch1 )
	{
		if ( *ch1 !=  *ch2 )
		{
			return 1;	// not equal
 8000940:	7808      	ldrb	r0, [r1, #0]
 8000942:	3000      	adds	r0, #0
 8000944:	bf18      	it	ne
 8000946:	2001      	movne	r0, #1
 8000948:	4770      	bx	lr

0800094a <StrCpy>:
/*
 * \brief	Copy string to *dest pointer
 * \return	copied string length
 */
uint8_t StrCpy (char *dest, const char *string)
{
 800094a:	b570      	push	{r4, r5, r6, lr}
 800094c:	4605      	mov	r5, r0
	uint8_t i;
	uint8_t length;

	length = StringLength(string);
 800094e:	4608      	mov	r0, r1
/*
 * \brief	Copy string to *dest pointer
 * \return	copied string length
 */
uint8_t StrCpy (char *dest, const char *string)
{
 8000950:	460c      	mov	r4, r1
	uint8_t i;
	uint8_t length;

	length = StringLength(string);
 8000952:	f7ff ffe0 	bl	8000916 <StringLength>
	if ( length == 0 )
 8000956:	b160      	cbz	r0, 8000972 <StrCpy+0x28>
 8000958:	1e43      	subs	r3, r0, #1
 800095a:	1e62      	subs	r2, r4, #1
 800095c:	1e6e      	subs	r6, r5, #1
 800095e:	18e1      	adds	r1, r4, r3
		// Return 0 length
		return 0;
	}

	// Copy characters
	for ( i = 0; i < length; i++ )
 8000960:	428a      	cmp	r2, r1
 8000962:	d004      	beq.n	800096e <StrCpy+0x24>
	{
		dest[i] = string[i];
 8000964:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8000968:	f806 3f01 	strb.w	r3, [r6, #1]!
 800096c:	e7f8      	b.n	8000960 <StrCpy+0x16>
	}
	dest[length] = '\0';
 800096e:	2300      	movs	r3, #0
 8000970:	542b      	strb	r3, [r5, r0]

	// Return length
	return length;
}
 8000972:	bd70      	pop	{r4, r5, r6, pc}

08000974 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8000974:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000976:	f001 fadd 	bl	8001f34 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  osSystickHandler();
 800097e:	f000 bd1d 	b.w	80013bc <osSystickHandler>

08000982 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000982:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000984:	2003      	movs	r0, #3
 8000986:	f001 fa33 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	4611      	mov	r1, r2
 800098e:	f06f 000b 	mvn.w	r0, #11
 8000992:	f001 fa3f 	bl	8001e14 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	4611      	mov	r1, r2
 800099a:	f06f 000a 	mvn.w	r0, #10
 800099e:	f001 fa39 	bl	8001e14 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	4611      	mov	r1, r2
 80009a6:	f06f 0009 	mvn.w	r0, #9
 80009aa:	f001 fa33 	bl	8001e14 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	4611      	mov	r1, r2
 80009b2:	f06f 0004 	mvn.w	r0, #4
 80009b6:	f001 fa2d 	bl	8001e14 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	4611      	mov	r1, r2
 80009be:	f06f 0003 	mvn.w	r0, #3
 80009c2:	f001 fa27 	bl	8001e14 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	210f      	movs	r1, #15
 80009ca:	f06f 0001 	mvn.w	r0, #1
 80009ce:	f001 fa21 	bl	8001e14 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	210f      	movs	r1, #15
 80009d6:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80009de:	f001 ba19 	b.w	8001e14 <HAL_NVIC_SetPriority>
	...

080009e4 <MONITOR_Init>:
// TODO: kiszedve a kikuldes, mert faultot okoz, ha nincs kapcsolat
uint8_t MONITOR_Init ( void ) {

	// INIT									// Init CommandActual

	MONITOR_CommandEvent = 0;
 80009e4:	4a0b      	ldr	r2, [pc, #44]	; (8000a14 <MONITOR_Init+0x30>)
 80009e6:	2300      	movs	r3, #0
 80009e8:	7013      	strb	r3, [r2, #0]
	MONITOR_CommandLength = 0;
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <MONITOR_Init+0x34>)
 80009ec:	7013      	strb	r3, [r2, #0]
	MONITOR_CommandCursorPosition = 0;
 80009ee:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <MONITOR_Init+0x38>)
 80009f0:	7013      	strb	r3, [r2, #0]
	MONITOR_CommandEscapeEnd_flag = 0;
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <MONITOR_Init+0x3c>)
 80009f4:	7013      	strb	r3, [r2, #0]
	MONITOR_CommandEscapeStart_flag = 0;
 80009f6:	4a0b      	ldr	r2, [pc, #44]	; (8000a24 <MONITOR_Init+0x40>)
 80009f8:	7013      	strb	r3, [r2, #0]
	MONITOR_CommandReceivedLastChar = 0;
 80009fa:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <MONITOR_Init+0x44>)
 80009fc:	7013      	strb	r3, [r2, #0]
	MONITOR_CommandReceivedNotLastChar = 0;
 80009fe:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <MONITOR_Init+0x48>)
 8000a00:	7013      	strb	r3, [r2, #0]
	MONITOR_CommandEscape_cnt = 0;
 8000a02:	4a0b      	ldr	r2, [pc, #44]	; (8000a30 <MONITOR_Init+0x4c>)
 8000a04:	7013      	strb	r3, [r2, #0]
	MONITOR_CommandSendBackChar_Enable = 1;	// enable
 8000a06:	4a0b      	ldr	r2, [pc, #44]	; (8000a34 <MONITOR_Init+0x50>)
 8000a08:	2001      	movs	r0, #1
 8000a0a:	7010      	strb	r0, [r2, #0]
	USART_TxBuffer[TXBUFFERSIZE-1] = '\0';
 8000a0c:	4a0a      	ldr	r2, [pc, #40]	; (8000a38 <MONITOR_Init+0x54>)
 8000a0e:	f882 30fe 	strb.w	r3, [r2, #254]	; 0xfe
	
	// !!IMPORTANT!! Nem szabad kikuldeni uzenetet a kapcsolat letrejotte elott, mert faultba juthatunk.
	
	
	return RETURN_SUCCESS;
}
 8000a12:	4770      	bx	lr
 8000a14:	20000222 	.word	0x20000222
 8000a18:	20000223 	.word	0x20000223
 8000a1c:	20000326 	.word	0x20000326
 8000a20:	2000032a 	.word	0x2000032a
 8000a24:	2000032d 	.word	0x2000032d
 8000a28:	2000032b 	.word	0x2000032b
 8000a2c:	20000226 	.word	0x20000226
 8000a30:	2000032c 	.word	0x2000032c
 8000a34:	20000020 	.word	0x20000020
 8000a38:	200000de 	.word	0x200000de

08000a3c <MONITOR_SendPrimitiveWelcome>:
}



uint8_t MONITOR_SendPrimitiveWelcome ( void )
{
 8000a3c:	b508      	push	{r3, lr}


	#ifdef CONFIG_USE_FREERTOS
	vTaskDelay(1);
	#else
	HAL_Delay(1);
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f001 fa86 	bl	8001f50 <HAL_Delay>
	#endif

	
	USART_SEND_CLS();						// Clean screen
 8000a44:	4808      	ldr	r0, [pc, #32]	; (8000a68 <MONITOR_SendPrimitiveWelcome+0x2c>)
 8000a46:	f7ff fd65 	bl	8000514 <USART_SendMessage>
 8000a4a:	4808      	ldr	r0, [pc, #32]	; (8000a6c <MONITOR_SendPrimitiveWelcome+0x30>)
 8000a4c:	f7ff fd62 	bl	8000514 <USART_SendMessage>
	MONITOR_SEND_WELCOME();					// Welcome message
 8000a50:	4807      	ldr	r0, [pc, #28]	; (8000a70 <MONITOR_SendPrimitiveWelcome+0x34>)
 8000a52:	f7ff fd5f 	bl	8000514 <USART_SendMessage>


	USART_SEND_NEW_LINE();
 8000a56:	4807      	ldr	r0, [pc, #28]	; (8000a74 <MONITOR_SendPrimitiveWelcome+0x38>)
 8000a58:	f7ff fd5c 	bl	8000514 <USART_SendMessage>
	MONITOR_SEND_PROMT();					// New promt
 8000a5c:	4806      	ldr	r0, [pc, #24]	; (8000a78 <MONITOR_SendPrimitiveWelcome+0x3c>)
 8000a5e:	f7ff fd59 	bl	8000514 <USART_SendMessage>

	return RETURN_SUCCESS;
	
}
 8000a62:	2001      	movs	r0, #1
 8000a64:	bd08      	pop	{r3, pc}
 8000a66:	bf00      	nop
 8000a68:	08002078 	.word	0x08002078
 8000a6c:	0800207d 	.word	0x0800207d
 8000a70:	08002084 	.word	0x08002084
 8000a74:	08002111 	.word	0x08002111
 8000a78:	08002160 	.word	0x08002160

08000a7c <MONITOR_CommandSeparate>:
	// seperate command to argumentums
	// return arc; = argumentum's num
	// call from void MonitorWaitCommand(void);

	int i;
	int j = 0;
 8000a7c:	2200      	movs	r2, #0



// Function: Seperate words (command) to command word, and 2 argument
// from char *CommandActul, to argv[0], [1], [2]
uint8_t MONITOR_CommandSeparate ( char** argv, char *CommandActual ) {
 8000a7e:	b570      	push	{r4, r5, r6, lr}
 8000a80:	3901      	subs	r1, #1
	// return arc; = argumentum's num
	// call from void MonitorWaitCommand(void);

	int i;
	int j = 0;
	uint8_t CommandArgCount = 1;	// 1-3	// Arguments num is 1, when we start separate
 8000a82:	2301      	movs	r3, #1
		if ( CommandActual[i] != ' '  ) {						// Not space, copy char to  Argument (CommandArgX[])
			argv[CommandArgCount-1][j] = CommandActual[i];
			j++;
		}
		else {													// It's space or the end, skip the space
			argv[CommandArgCount-1][j] = '\0';
 8000a84:	4616      	mov	r6, r2
	int i;
	int j = 0;
	uint8_t CommandArgCount = 1;	// 1-3	// Arguments num is 1, when we start separate


	for (i=0; CommandActual[i]!='\0'; i++) {
 8000a86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8000a8a:	f103 4580 	add.w	r5, r3, #1073741824	; 0x40000000
 8000a8e:	3d01      	subs	r5, #1
 8000a90:	b1bc      	cbz	r4, 8000ac2 <MONITOR_CommandSeparate+0x46>
		if ( CommandActual[i] != ' '  ) {						// Not space, copy char to  Argument (CommandArgX[])
 8000a92:	2c20      	cmp	r4, #32
 8000a94:	d007      	beq.n	8000aa6 <MONITOR_CommandSeparate+0x2a>
			argv[CommandArgCount-1][j] = CommandActual[i];
 8000a96:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
 8000a9a:	54ac      	strb	r4, [r5, r2]
			j++;
 8000a9c:	3201      	adds	r2, #1
			argv[CommandArgCount-1][j] = '\0';
			CommandArgCount++;
			j = 0;
			if ( CommandArgCount >3) { uprintf("Too many arguments!\r\n"); return 0; }
		}
		if ( j >= MONITOR_MAX_ARG_LENGTH ) { uprintf("Too long argument!\r\n"); return 0;}
 8000a9e:	2a27      	cmp	r2, #39	; 0x27
 8000aa0:	ddf1      	ble.n	8000a86 <MONITOR_CommandSeparate+0xa>
 8000aa2:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <MONITOR_CommandSeparate+0x64>)
 8000aa4:	e007      	b.n	8000ab6 <MONITOR_CommandSeparate+0x3a>
			argv[CommandArgCount-1][j] = CommandActual[i];
			j++;
		}
		else {													// It's space or the end, skip the space
			argv[CommandArgCount-1][j] = '\0';
			CommandArgCount++;
 8000aa6:	3301      	adds	r3, #1
		if ( CommandActual[i] != ' '  ) {						// Not space, copy char to  Argument (CommandArgX[])
			argv[CommandArgCount-1][j] = CommandActual[i];
			j++;
		}
		else {													// It's space or the end, skip the space
			argv[CommandArgCount-1][j] = '\0';
 8000aa8:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
			CommandArgCount++;
 8000aac:	b2db      	uxtb	r3, r3
			j = 0;
			if ( CommandArgCount >3) { uprintf("Too many arguments!\r\n"); return 0; }
 8000aae:	2b03      	cmp	r3, #3
		if ( CommandActual[i] != ' '  ) {						// Not space, copy char to  Argument (CommandArgX[])
			argv[CommandArgCount-1][j] = CommandActual[i];
			j++;
		}
		else {													// It's space or the end, skip the space
			argv[CommandArgCount-1][j] = '\0';
 8000ab0:	54a6      	strb	r6, [r4, r2]
			CommandArgCount++;
			j = 0;
			if ( CommandArgCount >3) { uprintf("Too many arguments!\r\n"); return 0; }
 8000ab2:	d904      	bls.n	8000abe <MONITOR_CommandSeparate+0x42>
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <MONITOR_CommandSeparate+0x68>)
		}
		if ( j >= MONITOR_MAX_ARG_LENGTH ) { uprintf("Too long argument!\r\n"); return 0;}
 8000ab6:	f7ff fd77 	bl	80005a8 <uprintf>
 8000aba:	2000      	movs	r0, #0
 8000abc:	bd70      	pop	{r4, r5, r6, pc}
			j++;
		}
		else {													// It's space or the end, skip the space
			argv[CommandArgCount-1][j] = '\0';
			CommandArgCount++;
			j = 0;
 8000abe:	2200      	movs	r2, #0
 8000ac0:	e7e1      	b.n	8000a86 <MONITOR_CommandSeparate+0xa>
			if ( CommandArgCount >3) { uprintf("Too many arguments!\r\n"); return 0; }
		}
		if ( j >= MONITOR_MAX_ARG_LENGTH ) { uprintf("Too long argument!\r\n"); return 0;}
	} // End of copies

	argv[CommandArgCount-1][j] = '\0';							// Last argument's end
 8000ac2:	f850 1025 	ldr.w	r1, [r0, r5, lsl #2]

	if ( CommandArgCount < 3 ) argv[2][0] = '\0';				// 3. argument is empty
 8000ac6:	2b02      	cmp	r3, #2
			if ( CommandArgCount >3) { uprintf("Too many arguments!\r\n"); return 0; }
		}
		if ( j >= MONITOR_MAX_ARG_LENGTH ) { uprintf("Too long argument!\r\n"); return 0;}
	} // End of copies

	argv[CommandArgCount-1][j] = '\0';							// Last argument's end
 8000ac8:	548c      	strb	r4, [r1, r2]

	if ( CommandArgCount < 3 ) argv[2][0] = '\0';				// 3. argument is empty
 8000aca:	d805      	bhi.n	8000ad8 <MONITOR_CommandSeparate+0x5c>
 8000acc:	6882      	ldr	r2, [r0, #8]
	if ( CommandArgCount < 2 ) argv[1][0] = '\0';				// 2. argument is empty
 8000ace:	2b01      	cmp	r3, #1
		if ( j >= MONITOR_MAX_ARG_LENGTH ) { uprintf("Too long argument!\r\n"); return 0;}
	} // End of copies

	argv[CommandArgCount-1][j] = '\0';							// Last argument's end

	if ( CommandArgCount < 3 ) argv[2][0] = '\0';				// 3. argument is empty
 8000ad0:	7014      	strb	r4, [r2, #0]
	if ( CommandArgCount < 2 ) argv[1][0] = '\0';				// 2. argument is empty
 8000ad2:	d103      	bne.n	8000adc <MONITOR_CommandSeparate+0x60>
 8000ad4:	6842      	ldr	r2, [r0, #4]
 8000ad6:	7014      	strb	r4, [r2, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	bd70      	pop	{r4, r5, r6, pc}
 8000adc:	2002      	movs	r0, #2

	return CommandArgCount;
}
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
 8000ae0:	0800217b 	.word	0x0800217b
 8000ae4:	08002165 	.word	0x08002165

08000ae8 <MONITOR_CommandFind>:



// Function: Find the command
uint8_t MONITOR_CommandFind( unsigned int argc, char** argv ) {
 8000ae8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aec:	4681      	mov	r9, r0
 8000aee:	460f      	mov	r7, r1

	uint8_t i;
	uint8_t CommandValid = 0;
	FunctionPointer	thisFunction;
	uint8_t commandNum = COMMAND_GetCommandNum();
 8000af0:	f000 fafa 	bl	80010e8 <COMMAND_GetCommandNum>
	
	// Find the command
	//for (i=0; i < MONITOR_MAX_COMMAND_NUM; i++) {		// Need an correct "MAX_COMMAND_NUM" define
	//for (i=0; CommandList[i].name != NULL; i++) {		// If last command = 0
	for (i=0; i < commandNum; i++) {					// get the command.c "MAX_COMMAND_NUM" define
		if (!StrCmp(argv[0],CommandList[i].name)) {						// Found the command
 8000af4:	f8df b048 	ldr.w	fp, [pc, #72]	; 8000b40 <MONITOR_CommandFind+0x58>
uint8_t MONITOR_CommandFind( unsigned int argc, char** argv ) {

	uint8_t i;
	uint8_t CommandValid = 0;
	FunctionPointer	thisFunction;
	uint8_t commandNum = COMMAND_GetCommandNum();
 8000af8:	4680      	mov	r8, r0

	
	// Find the command
	//for (i=0; i < MONITOR_MAX_COMMAND_NUM; i++) {		// Need an correct "MAX_COMMAND_NUM" define
	//for (i=0; CommandList[i].name != NULL; i++) {		// If last command = 0
	for (i=0; i < commandNum; i++) {					// get the command.c "MAX_COMMAND_NUM" define
 8000afa:	2400      	movs	r4, #0
		if (!StrCmp(argv[0],CommandList[i].name)) {						// Found the command
 8000afc:	f04f 0a0c 	mov.w	sl, #12

	
	// Find the command
	//for (i=0; i < MONITOR_MAX_COMMAND_NUM; i++) {		// Need an correct "MAX_COMMAND_NUM" define
	//for (i=0; CommandList[i].name != NULL; i++) {		// If last command = 0
	for (i=0; i < commandNum; i++) {					// get the command.c "MAX_COMMAND_NUM" define
 8000b00:	b2e3      	uxtb	r3, r4
 8000b02:	4598      	cmp	r8, r3
 8000b04:	d914      	bls.n	8000b30 <MONITOR_CommandFind+0x48>
		if (!StrCmp(argv[0],CommandList[i].name)) {						// Found the command
 8000b06:	fb0a f304 	mul.w	r3, sl, r4
 8000b0a:	6838      	ldr	r0, [r7, #0]
 8000b0c:	f853 100b 	ldr.w	r1, [r3, fp]
 8000b10:	f7ff ff0a 	bl	8000928 <StrCmp>
 8000b14:	4626      	mov	r6, r4
 8000b16:	4605      	mov	r5, r0
 8000b18:	3401      	adds	r4, #1
 8000b1a:	2800      	cmp	r0, #0
 8000b1c:	d1f0      	bne.n	8000b00 <MONITOR_CommandFind+0x18>
			thisFunction = ( FunctionPointer )CommandList[i].CommandFunctionPointer;	// execute the command function
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MONITOR_CommandFind+0x58>)
 8000b20:	220c      	movs	r2, #12
 8000b22:	fb02 3606 	mla	r6, r2, r6, r3
			thisFunction(argc,argv);
 8000b26:	4639      	mov	r1, r7
 8000b28:	6873      	ldr	r3, [r6, #4]
 8000b2a:	4648      	mov	r0, r9
 8000b2c:	4798      	blx	r3
 8000b2e:	e003      	b.n	8000b38 <MONITOR_CommandFind+0x50>
		}
	}

	// Valid command or not?
	if (!CommandValid) {
		uprintf("Unknown Command.\r\n");	// Has valid command? If not, throw error text
 8000b30:	4804      	ldr	r0, [pc, #16]	; (8000b44 <MONITOR_CommandFind+0x5c>)
 8000b32:	f7ff fd39 	bl	80005a8 <uprintf>
		return RETURN_SUCCESS;
 8000b36:	2501      	movs	r5, #1
	}
	else {
		return RETURN_FALSE;				// Valid command
	}

}
 8000b38:	4628      	mov	r0, r5
 8000b3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b3e:	bf00      	nop
 8000b40:	0800248c 	.word	0x0800248c
 8000b44:	08002190 	.word	0x08002190

08000b48 <MONITOR_EndCommand>:
}



// Function: Prepare (Separate) the command and Find and Run it...
uint8_t MONITOR_EndCommand ( char *CommandActual, unsigned int argc, char** argv  ) {
 8000b48:	b510      	push	{r4, lr}

	// Separate command
	// CommandActual = MONITOR_CommandActual[]
	argc = MONITOR_CommandSeparate ( argv, CommandActual );
 8000b4a:	4601      	mov	r1, r0
 8000b4c:	4610      	mov	r0, r2
}



// Function: Prepare (Separate) the command and Find and Run it...
uint8_t MONITOR_EndCommand ( char *CommandActual, unsigned int argc, char** argv  ) {
 8000b4e:	4614      	mov	r4, r2

	// Separate command
	// CommandActual = MONITOR_CommandActual[]
	argc = MONITOR_CommandSeparate ( argv, CommandActual );
 8000b50:	f7ff ff94 	bl	8000a7c <MONITOR_CommandSeparate>

	if ( argc ) {
 8000b54:	b128      	cbz	r0, 8000b62 <MONITOR_EndCommand+0x1a>
		
		MONITOR_CommandFind ( argc, argv );		// Find and probing execute the command
 8000b56:	4621      	mov	r1, r4
 8000b58:	f7ff ffc6 	bl	8000ae8 <MONITOR_CommandFind>
		USART_SEND_NEW_LINE();
 8000b5c:	4803      	ldr	r0, [pc, #12]	; (8000b6c <MONITOR_EndCommand+0x24>)
 8000b5e:	f7ff fcd9 	bl	8000514 <USART_SendMessage>
	}
	//else USART_SEND_NEW_LINE();				// argc == 0

	
	// Init new command
	MONITOR_SEND_PROMT();
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <MONITOR_EndCommand+0x28>)
 8000b64:	f7ff fcd6 	bl	8000514 <USART_SendMessage>

	return RETURN_SUCCESS;
}
 8000b68:	2001      	movs	r0, #1
 8000b6a:	bd10      	pop	{r4, pc}
 8000b6c:	08002111 	.word	0x08002111
 8000b70:	08002160 	.word	0x08002160

08000b74 <MONITOR_CommandBackspace>:


/*
\brief			Command's letter deleting (backspace)
*/
uint8_t MONITOR_CommandBackspace ( void ) {
 8000b74:	b510      	push	{r4, lr}
	uint8_t i;

	if (MONITOR_CommandLength > 0) {
 8000b76:	4927      	ldr	r1, [pc, #156]	; (8000c14 <MONITOR_CommandBackspace+0xa0>)
 8000b78:	780b      	ldrb	r3, [r1, #0]
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d047      	beq.n	8000c10 <MONITOR_CommandBackspace+0x9c>

		if ( MONITOR_CommandCursorPosition == MONITOR_CommandLength) {
 8000b80:	4b25      	ldr	r3, [pc, #148]	; (8000c18 <MONITOR_CommandBackspace+0xa4>)
 8000b82:	781c      	ldrb	r4, [r3, #0]
 8000b84:	780a      	ldrb	r2, [r1, #0]
 8000b86:	4294      	cmp	r4, r2
			MONITOR_CommandActual[--MONITOR_CommandCursorPosition] = '\0';	// del from CommandActual, and Position--
 8000b88:	781a      	ldrb	r2, [r3, #0]
uint8_t MONITOR_CommandBackspace ( void ) {
	uint8_t i;

	if (MONITOR_CommandLength > 0) {

		if ( MONITOR_CommandCursorPosition == MONITOR_CommandLength) {
 8000b8a:	d113      	bne.n	8000bb4 <MONITOR_CommandBackspace+0x40>
			MONITOR_CommandActual[--MONITOR_CommandCursorPosition] = '\0';	// del from CommandActual, and Position--
 8000b8c:	3a01      	subs	r2, #1
 8000b8e:	b2d2      	uxtb	r2, r2
 8000b90:	701a      	strb	r2, [r3, #0]
 8000b92:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MONITOR_CommandBackspace+0xa8>)
 8000b94:	2000      	movs	r0, #0
 8000b96:	5498      	strb	r0, [r3, r2]
			MONITOR_CommandLength--;
 8000b98:	780b      	ldrb	r3, [r1, #0]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	b2db      	uxtb	r3, r3
			
#ifdef CONFIG_USE_TERMINAL_ZOC
			USART_SEND_KEY_BACKSPACE();
 8000b9e:	2008      	movs	r0, #8

	if (MONITOR_CommandLength > 0) {

		if ( MONITOR_CommandCursorPosition == MONITOR_CommandLength) {
			MONITOR_CommandActual[--MONITOR_CommandCursorPosition] = '\0';	// del from CommandActual, and Position--
			MONITOR_CommandLength--;
 8000ba0:	700b      	strb	r3, [r1, #0]
			
#ifdef CONFIG_USE_TERMINAL_ZOC
			USART_SEND_KEY_BACKSPACE();
 8000ba2:	f7ff fcdd 	bl	8000560 <USART_SendChar>
			USART_SEND_KEY_DEL();
 8000ba6:	207f      	movs	r0, #127	; 0x7f
 8000ba8:	f7ff fcda 	bl	8000560 <USART_SendChar>
			USART_SEND_KEY_BACKSPACE();
 8000bac:	2008      	movs	r0, #8
 8000bae:	f7ff fcd7 	bl	8000560 <USART_SendChar>
 8000bb2:	e02d      	b.n	8000c10 <MONITOR_CommandBackspace+0x9c>
#endif

		}
		else {										// CursorPosition != CommandLength, we are in command chars

			if ( MONITOR_CommandCursorPosition > 0 ) {			// not at 0 position
 8000bb4:	b362      	cbz	r2, 8000c10 <MONITOR_CommandBackspace+0x9c>
				// delete line
				// save cursor
				// send new command
				// restore cursor

				MONITOR_CommandLength--;
 8000bb6:	780a      	ldrb	r2, [r1, #0]
 8000bb8:	3a01      	subs	r2, #1
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	700a      	strb	r2, [r1, #0]
				MONITOR_CommandCursorPosition--;
 8000bbe:	781a      	ldrb	r2, [r3, #0]
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	b2d2      	uxtb	r2, r2
 8000bc4:	701a      	strb	r2, [r3, #0]

				for ( i = MONITOR_CommandCursorPosition; i < MONITOR_CommandLength; i++ ) {
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <MONITOR_CommandBackspace+0xa8>)
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	7801      	ldrb	r1, [r0, #0]
 8000bce:	4c13      	ldr	r4, [pc, #76]	; (8000c1c <MONITOR_CommandBackspace+0xa8>)
 8000bd0:	428b      	cmp	r3, r1
 8000bd2:	d205      	bcs.n	8000be0 <MONITOR_CommandBackspace+0x6c>
					MONITOR_CommandActual[i] = MONITOR_CommandActual[i+1];		// copy
 8000bd4:	18d1      	adds	r1, r2, r3
 8000bd6:	7849      	ldrb	r1, [r1, #1]
 8000bd8:	54d1      	strb	r1, [r2, r3]
				// restore cursor

				MONITOR_CommandLength--;
				MONITOR_CommandCursorPosition--;

				for ( i = MONITOR_CommandCursorPosition; i < MONITOR_CommandLength; i++ ) {
 8000bda:	3301      	adds	r3, #1
 8000bdc:	b2db      	uxtb	r3, r3
 8000bde:	e7f5      	b.n	8000bcc <MONITOR_CommandBackspace+0x58>
					MONITOR_CommandActual[i] = MONITOR_CommandActual[i+1];		// copy
				}
				MONITOR_CommandActual[i] = '\0';
 8000be0:	2200      	movs	r2, #0

				// Send backspace
				USART_SEND_KEY_BACKSPACE();
 8000be2:	2008      	movs	r0, #8
				MONITOR_CommandCursorPosition--;

				for ( i = MONITOR_CommandCursorPosition; i < MONITOR_CommandLength; i++ ) {
					MONITOR_CommandActual[i] = MONITOR_CommandActual[i+1];		// copy
				}
				MONITOR_CommandActual[i] = '\0';
 8000be4:	54e2      	strb	r2, [r4, r3]

				// Send backspace
				USART_SEND_KEY_BACKSPACE();
 8000be6:	f7ff fcbb 	bl	8000560 <USART_SendChar>

				// Delete this line
				USART_ESCAPE_DELETELINE();
 8000bea:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MONITOR_CommandBackspace+0xac>)
 8000bec:	f7ff fc92 	bl	8000514 <USART_SendMessage>

				// Save the cursor ( we need backup this, because the user's cursor is stand this position
				USART_ESCAPE_SAVECURSOR();
 8000bf0:	480c      	ldr	r0, [pc, #48]	; (8000c24 <MONITOR_CommandBackspace+0xb0>)
 8000bf2:	f7ff fc8f 	bl	8000514 <USART_SendMessage>

				// Cursor to line start -> we want write the "CommandActual"
				USART_ESCAPE_CURSOR_TO_LINESTART();
 8000bf6:	480c      	ldr	r0, [pc, #48]	; (8000c28 <MONITOR_CommandBackspace+0xb4>)
 8000bf8:	f7ff fc8c 	bl	8000514 <USART_SendMessage>
				USART_ESCAPE_CURSORLEFTLOTOF();
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <MONITOR_CommandBackspace+0xb8>)
 8000bfe:	f7ff fc89 	bl	8000514 <USART_SendMessage>

				// Write new CommandActual
				uprintf("# %s",MONITOR_CommandActual);
 8000c02:	480b      	ldr	r0, [pc, #44]	; (8000c30 <MONITOR_CommandBackspace+0xbc>)
 8000c04:	4621      	mov	r1, r4
 8000c06:	f7ff fccf 	bl	80005a8 <uprintf>

				// restore the position
				USART_ESCAPE_RESTORECURSOR();
 8000c0a:	480a      	ldr	r0, [pc, #40]	; (8000c34 <MONITOR_CommandBackspace+0xc0>)
 8000c0c:	f7ff fc82 	bl	8000514 <USART_SendMessage>
			}
		}
	}
	return RETURN_SUCCESS;			// not do anything
}
 8000c10:	2001      	movs	r0, #1
 8000c12:	bd10      	pop	{r4, pc}
 8000c14:	20000223 	.word	0x20000223
 8000c18:	20000326 	.word	0x20000326
 8000c1c:	20000227 	.word	0x20000227
 8000c20:	080021a3 	.word	0x080021a3
 8000c24:	080021a8 	.word	0x080021a8
 8000c28:	080021ac 	.word	0x080021ac
 8000c2c:	080021b1 	.word	0x080021b1
 8000c30:	080021b8 	.word	0x080021b8
 8000c34:	080021bd 	.word	0x080021bd

08000c38 <MONITOR_CommandResendLine>:


/*
\brief		Resend the actual line/command
*/
uint8_t MONITOR_CommandResendLine ( void ) {
 8000c38:	b508      	push	{r3, lr}

	//step right
	USART_ESCAPE_CURSORRIGHT();
 8000c3a:	480c      	ldr	r0, [pc, #48]	; (8000c6c <MONITOR_CommandResendLine+0x34>)
 8000c3c:	f7ff fc6a 	bl	8000514 <USART_SendMessage>

	// Delete the line
	USART_ESCAPE_DELETELINE();
 8000c40:	480b      	ldr	r0, [pc, #44]	; (8000c70 <MONITOR_CommandResendLine+0x38>)
 8000c42:	f7ff fc67 	bl	8000514 <USART_SendMessage>

	// Save cursor
	USART_ESCAPE_SAVECURSOR();
 8000c46:	480b      	ldr	r0, [pc, #44]	; (8000c74 <MONITOR_CommandResendLine+0x3c>)
 8000c48:	f7ff fc64 	bl	8000514 <USART_SendMessage>

	// Cursor to line start
	USART_ESCAPE_CURSOR_TO_LINESTART();
 8000c4c:	480a      	ldr	r0, [pc, #40]	; (8000c78 <MONITOR_CommandResendLine+0x40>)
 8000c4e:	f7ff fc61 	bl	8000514 <USART_SendMessage>
	USART_ESCAPE_CURSORLEFTLOTOF();
 8000c52:	480a      	ldr	r0, [pc, #40]	; (8000c7c <MONITOR_CommandResendLine+0x44>)
 8000c54:	f7ff fc5e 	bl	8000514 <USART_SendMessage>

	// Write new CommandActual
	uprintf("# %s",MONITOR_CommandActual);
 8000c58:	4909      	ldr	r1, [pc, #36]	; (8000c80 <MONITOR_CommandResendLine+0x48>)
 8000c5a:	480a      	ldr	r0, [pc, #40]	; (8000c84 <MONITOR_CommandResendLine+0x4c>)
 8000c5c:	f7ff fca4 	bl	80005a8 <uprintf>

	// Restore the position
	USART_ESCAPE_RESTORECURSOR();
 8000c60:	4809      	ldr	r0, [pc, #36]	; (8000c88 <MONITOR_CommandResendLine+0x50>)
 8000c62:	f7ff fc57 	bl	8000514 <USART_SendMessage>

	return RETURN_SUCCESS;
}
 8000c66:	2001      	movs	r0, #1
 8000c68:	bd08      	pop	{r3, pc}
 8000c6a:	bf00      	nop
 8000c6c:	080021c1 	.word	0x080021c1
 8000c70:	080021a3 	.word	0x080021a3
 8000c74:	080021a8 	.word	0x080021a8
 8000c78:	080021ac 	.word	0x080021ac
 8000c7c:	080021b1 	.word	0x080021b1
 8000c80:	20000227 	.word	0x20000227
 8000c84:	080021b8 	.word	0x080021b8
 8000c88:	080021bd 	.word	0x080021bd

08000c8c <MONITOR_CommandEscapeCharValidation>:


/*
\brief		Process Excape sequence
*/
uint8_t MONITOR_CommandEscapeCharValidation ( void ) {
 8000c8c:	b510      	push	{r4, lr}
	// return valid char, or 0 if invalid
	// work with ANSI escape codes

	if (MONITOR_CommandActualEscape[0] == '\x1B') { 								// ESC
 8000c8e:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <MONITOR_CommandEscapeCharValidation+0x58>)
 8000c90:	781a      	ldrb	r2, [r3, #0]
 8000c92:	2a1b      	cmp	r2, #27
 8000c94:	d122      	bne.n	8000cdc <MONITOR_CommandEscapeCharValidation+0x50>
		if ( MONITOR_CommandActualEscape[1] == '[' )							// '[', escape sequence 2. letter
 8000c96:	785a      	ldrb	r2, [r3, #1]
 8000c98:	2a5b      	cmp	r2, #91	; 0x5b
 8000c9a:	d11f      	bne.n	8000cdc <MONITOR_CommandEscapeCharValidation+0x50>
		{
			// This is an escape sequence
			if ( MONITOR_CommandActualEscape[2] == 'A' )						// Up cursor		// previous History command
 8000c9c:	789b      	ldrb	r3, [r3, #2]
 8000c9e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8000ca2:	2a01      	cmp	r2, #1
 8000ca4:	d91c      	bls.n	8000ce0 <MONITOR_CommandEscapeCharValidation+0x54>
				#ifdef USE_MONITOR_HISTORY
				MONITOR_HISTORY_Load ( 0 );
				#endif
				return RETURN_SUCCESS;
			}
			else if (  MONITOR_CommandActualEscape[2] == 'C' )					// Right cursor
 8000ca6:	2b43      	cmp	r3, #67	; 0x43
 8000ca8:	d10b      	bne.n	8000cc2 <MONITOR_CommandEscapeCharValidation+0x36>
			{
				if ( MONITOR_CommandCursorPosition < MONITOR_CommandLength )	// if not at end
 8000caa:	4c0f      	ldr	r4, [pc, #60]	; (8000ce8 <MONITOR_CommandEscapeCharValidation+0x5c>)
 8000cac:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <MONITOR_CommandEscapeCharValidation+0x60>)
 8000cae:	7822      	ldrb	r2, [r4, #0]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	429a      	cmp	r2, r3
 8000cb4:	d214      	bcs.n	8000ce0 <MONITOR_CommandEscapeCharValidation+0x54>
				{
					USART_ESCAPE_CURSORRIGHT();
 8000cb6:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <MONITOR_CommandEscapeCharValidation+0x64>)
 8000cb8:	f7ff fc2c 	bl	8000514 <USART_SendMessage>
					MONITOR_CommandCursorPosition++;
 8000cbc:	7823      	ldrb	r3, [r4, #0]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	e009      	b.n	8000cd6 <MONITOR_CommandEscapeCharValidation+0x4a>
					return RETURN_SUCCESS;
				}
				else return RETURN_SUCCESS;								// not do anything
			}
			else if (  MONITOR_CommandActualEscape[2] == 'D' )	{		// Left cursor
 8000cc2:	2b44      	cmp	r3, #68	; 0x44
 8000cc4:	d10a      	bne.n	8000cdc <MONITOR_CommandEscapeCharValidation+0x50>
				if ( MONITOR_CommandCursorPosition > 0 )				// if not at start
 8000cc6:	4c08      	ldr	r4, [pc, #32]	; (8000ce8 <MONITOR_CommandEscapeCharValidation+0x5c>)
 8000cc8:	7823      	ldrb	r3, [r4, #0]
 8000cca:	b14b      	cbz	r3, 8000ce0 <MONITOR_CommandEscapeCharValidation+0x54>
				{
					USART_ESCAPE_CURSORLEFT();
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <MONITOR_CommandEscapeCharValidation+0x68>)
 8000cce:	f7ff fc21 	bl	8000514 <USART_SendMessage>
					MONITOR_CommandCursorPosition--;
 8000cd2:	7823      	ldrb	r3, [r4, #0]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	7023      	strb	r3, [r4, #0]
 8000cda:	e001      	b.n	8000ce0 <MONITOR_CommandEscapeCharValidation+0x54>
			return RETURN_FALSE;
		}
	}
	else
	{
		return RETURN_FALSE;
 8000cdc:	2000      	movs	r0, #0
 8000cde:	bd10      	pop	{r4, pc}
			if ( MONITOR_CommandActualEscape[2] == 'A' )						// Up cursor		// previous History command
			{
				#ifdef USE_MONITOR_HISTORY
				MONITOR_HISTORY_Load ( 1 );
				#endif
				return RETURN_SUCCESS;
 8000ce0:	2001      	movs	r0, #1
		return RETURN_FALSE;
	}

	return RETURN_FALSE;

}
 8000ce2:	bd10      	pop	{r4, pc}
 8000ce4:	20000327 	.word	0x20000327
 8000ce8:	20000326 	.word	0x20000326
 8000cec:	20000223 	.word	0x20000223
 8000cf0:	080021c1 	.word	0x080021c1
 8000cf4:	080021c5 	.word	0x080021c5

08000cf8 <MONITOR_ConvertSmallLetter>:

/*
\brief		MONITOR_Actual konvertálása kisbetusre...
*/
uint8_t MONITOR_ConvertSmallLetter( void )
{
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <MONITOR_ConvertSmallLetter+0x1c>)
	int i;
	
	for ( i = 0; MONITOR_CommandActual[i] != '\0'; i++ )
 8000cfa:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8000cfe:	b133      	cbz	r3, 8000d0e <MONITOR_ConvertSmallLetter+0x16>
	{
		if ( ( MONITOR_CommandActual[i] > 'A' ) && ( MONITOR_CommandActual[i] < 'Z' ) )
 8000d00:	f1a3 0142 	sub.w	r1, r3, #66	; 0x42
 8000d04:	2917      	cmp	r1, #23
		{	// need to change to small letter
			MONITOR_CommandActual[i] = MONITOR_CommandActual[i] - ( 'A' - 'a'); // length between Big Letter and small letter
 8000d06:	bf9c      	itt	ls
 8000d08:	3320      	addls	r3, #32
 8000d0a:	7013      	strbls	r3, [r2, #0]
 8000d0c:	e7f5      	b.n	8000cfa <MONITOR_ConvertSmallLetter+0x2>
		//else OK;
	}

	return RETURN_SUCCESS;
	
}
 8000d0e:	2001      	movs	r0, #1
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000226 	.word	0x20000226

08000d18 <MONITOR_CheckCommand>:
}



// Function: Always run, wait command and execute it
uint8_t MONITOR_CheckCommand ( void ) {
 8000d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d1c:	b0a2      	sub	sp, #136	; 0x88

	char CommandArg1[MONITOR_MAX_ARG_LENGTH];
	char CommandArg2[MONITOR_MAX_ARG_LENGTH];
	char CommandArg3[MONITOR_MAX_ARG_LENGTH];

	argv[0] = CommandArg1;
 8000d1e:	ab04      	add	r3, sp, #16
 8000d20:	9301      	str	r3, [sp, #4]
	argv[1] = CommandArg2;
 8000d22:	ab0e      	add	r3, sp, #56	; 0x38
 8000d24:	9302      	str	r3, [sp, #8]
		
	argc = 0;
	
	// Initialize - End

	MONITOR_CommandEnable = 1;	// !! IMPORTANT !! Last initialize
 8000d26:	4d33      	ldr	r5, [pc, #204]	; (8000df4 <MONITOR_CheckCommand+0xdc>)
	while (1) {												// always checking the Command
		if ( MONITOR_CommandEnable ) {

			USART_ReceiveMessage ();	// Receiving

			if ( MONITOR_CommandEvent ) {
 8000d28:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8000df8 <MONITOR_CheckCommand+0xe0>
	char CommandArg2[MONITOR_MAX_ARG_LENGTH];
	char CommandArg3[MONITOR_MAX_ARG_LENGTH];

	argv[0] = CommandArg1;
	argv[1] = CommandArg2;
	argv[2] = CommandArg3;
 8000d2c:	ab18      	add	r3, sp, #96	; 0x60
 8000d2e:	9303      	str	r3, [sp, #12]
		
	argc = 0;
	
	// Initialize - End

	MONITOR_CommandEnable = 1;	// !! IMPORTANT !! Last initialize
 8000d30:	2301      	movs	r3, #1
 8000d32:	702b      	strb	r3, [r5, #0]
	//HAL_UART_Receive_IT(&BluetoothUartHandle, (uint8_t *)USART_RxBuffer, RXBUFFERSIZE);	// TODO: VG - USART - TEST - uzenetvaras

	
	
	// Welcome message
	MONITOR_SendPrimitiveWelcome();
 8000d34:	f7ff fe82 	bl	8000a3c <MONITOR_SendPrimitiveWelcome>
	// Enable sendings
#endif


	while (1) {												// always checking the Command
		if ( MONITOR_CommandEnable ) {
 8000d38:	462c      	mov	r4, r5
 8000d3a:	782b      	ldrb	r3, [r5, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d0fc      	beq.n	8000d3a <MONITOR_CheckCommand+0x22>

			USART_ReceiveMessage ();	// Receiving
 8000d40:	f7ff fbcc 	bl	80004dc <USART_ReceiveMessage>

			if ( MONITOR_CommandEvent ) {
 8000d44:	f898 3000 	ldrb.w	r3, [r8]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d0f6      	beq.n	8000d3a <MONITOR_CheckCommand+0x22>
				MONITOR_CommandEvent = 0;
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <MONITOR_CheckCommand+0xe0>)
 8000d4e:	2100      	movs	r1, #0
 8000d50:	7019      	strb	r1, [r3, #0]

				if ( MONITOR_CommandReceivedLastChar ){												// print the last chars
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <MONITOR_CheckCommand+0xe4>)
 8000d54:	7818      	ldrb	r0, [r3, #0]
 8000d56:	f000 02ff 	and.w	r2, r0, #255	; 0xff
 8000d5a:	b168      	cbz	r0, 8000d78 <MONITOR_CheckCommand+0x60>

					MONITOR_CommandReceivedLastChar = 0;
 8000d5c:	7019      	strb	r1, [r3, #0]
					if ( MONITOR_CommandSendBackChar_Enable )
 8000d5e:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <MONITOR_CheckCommand+0xe8>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0e9      	beq.n	8000d3a <MONITOR_CheckCommand+0x22>
					{	// if Enable send back
						USART_SendChar( MONITOR_CommandActual[MONITOR_CommandLength-1] );
 8000d66:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <MONITOR_CheckCommand+0xec>)
 8000d68:	4a27      	ldr	r2, [pc, #156]	; (8000e08 <MONITOR_CheckCommand+0xf0>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8000d72:	f7ff fbf5 	bl	8000560 <USART_SendChar>
 8000d76:	e7e0      	b.n	8000d3a <MONITOR_CheckCommand+0x22>
					}
				}

				else if ( MONITOR_CommandReceivedNotLastChar ) {							// Nost Last char - Refresh the line
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <MONITOR_CheckCommand+0xf4>)
 8000d7a:	7818      	ldrb	r0, [r3, #0]
 8000d7c:	f000 01ff 	and.w	r1, r0, #255	; 0xff
 8000d80:	b120      	cbz	r0, 8000d8c <MONITOR_CheckCommand+0x74>
					MONITOR_CommandEnable = 0;
 8000d82:	7022      	strb	r2, [r4, #0]
					MONITOR_CommandReceivedNotLastChar = 0;
 8000d84:	701a      	strb	r2, [r3, #0]
					MONITOR_CommandResendLine();
 8000d86:	f7ff ff57 	bl	8000c38 <MONITOR_CommandResendLine>
 8000d8a:	e012      	b.n	8000db2 <MONITOR_CheckCommand+0x9a>
					MONITOR_CommandEnable = 1;
				}
				else if ( MONITOR_CommandEscapeEnd_flag ) {										// Escape sequence
 8000d8c:	4b20      	ldr	r3, [pc, #128]	; (8000e10 <MONITOR_CheckCommand+0xf8>)
 8000d8e:	7818      	ldrb	r0, [r3, #0]
 8000d90:	f000 02ff 	and.w	r2, r0, #255	; 0xff
 8000d94:	b120      	cbz	r0, 8000da0 <MONITOR_CheckCommand+0x88>
					MONITOR_CommandEnable = 0;
 8000d96:	7021      	strb	r1, [r4, #0]
					MONITOR_CommandEscapeEnd_flag = 0;
 8000d98:	7019      	strb	r1, [r3, #0]
					MONITOR_CommandEscapeCharValidation ();
 8000d9a:	f7ff ff77 	bl	8000c8c <MONITOR_CommandEscapeCharValidation>
 8000d9e:	e008      	b.n	8000db2 <MONITOR_CheckCommand+0x9a>
					MONITOR_CommandEnable = 1;
				}
				else if ( MONITOR_CommandReceivedBackspace ) {								// Backspace
 8000da0:	4b1c      	ldr	r3, [pc, #112]	; (8000e14 <MONITOR_CheckCommand+0xfc>)
 8000da2:	7819      	ldrb	r1, [r3, #0]
 8000da4:	f001 06ff 	and.w	r6, r1, #255	; 0xff
 8000da8:	b131      	cbz	r1, 8000db8 <MONITOR_CheckCommand+0xa0>
					MONITOR_CommandEnable = 0;
 8000daa:	7022      	strb	r2, [r4, #0]
					MONITOR_CommandReceivedBackspace = 0;
 8000dac:	701a      	strb	r2, [r3, #0]
					MONITOR_CommandBackspace();
 8000dae:	f7ff fee1 	bl	8000b74 <MONITOR_CommandBackspace>
					MONITOR_CommandEnable = 1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	7023      	strb	r3, [r4, #0]
 8000db6:	e7c0      	b.n	8000d3a <MONITOR_CheckCommand+0x22>
				}
				else if ( MONITOR_CommandReadable ) {										// Pressed Enter, EndCommand();
 8000db8:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <MONITOR_CheckCommand+0x100>)
 8000dba:	781a      	ldrb	r2, [r3, #0]
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	d0bc      	beq.n	8000d3a <MONITOR_CheckCommand+0x22>
					MONITOR_CommandEnable = 0;			// Disable
					MONITOR_CommandReadable = 0;
					if ( MONITOR_CommandLength > 0) {										// There are some char in the line
 8000dc0:	4f10      	ldr	r7, [pc, #64]	; (8000e04 <MONITOR_CheckCommand+0xec>)
					MONITOR_CommandReceivedBackspace = 0;
					MONITOR_CommandBackspace();
					MONITOR_CommandEnable = 1;
				}
				else if ( MONITOR_CommandReadable ) {										// Pressed Enter, EndCommand();
					MONITOR_CommandEnable = 0;			// Disable
 8000dc2:	7026      	strb	r6, [r4, #0]
					MONITOR_CommandReadable = 0;
 8000dc4:	701e      	strb	r6, [r3, #0]
					if ( MONITOR_CommandLength > 0) {										// There are some char in the line
 8000dc6:	783b      	ldrb	r3, [r7, #0]
 8000dc8:	b153      	cbz	r3, 8000de0 <MONITOR_CheckCommand+0xc8>
						// has an command
						MONITOR_ConvertSmallLetter();
 8000dca:	f7ff ff95 	bl	8000cf8 <MONITOR_ConvertSmallLetter>
						
						USART_SEND_NEW_LINE();
 8000dce:	4813      	ldr	r0, [pc, #76]	; (8000e1c <MONITOR_CheckCommand+0x104>)
 8000dd0:	f7ff fba0 	bl	8000514 <USART_SendMessage>
						
						// TODO: 1. parametert kiszedni
						MONITOR_EndCommand ( (char *)MONITOR_CommandActual, argc, argv );	// Parancs megkeresése és futtatási kísérlet		
 8000dd4:	aa01      	add	r2, sp, #4
 8000dd6:	4631      	mov	r1, r6
 8000dd8:	480b      	ldr	r0, [pc, #44]	; (8000e08 <MONITOR_CheckCommand+0xf0>)
 8000dda:	f7ff feb5 	bl	8000b48 <MONITOR_EndCommand>
 8000dde:	e002      	b.n	8000de6 <MONITOR_CheckCommand+0xce>
						MONITOR_HISTORY_Save ();											// History-ba lementés
						#endif
					}
					else {																	// There is no char in the line	
						//USART_SEND_NEW_LINE();											
						MONITOR_SEND_PROMT();
 8000de0:	480f      	ldr	r0, [pc, #60]	; (8000e20 <MONITOR_CheckCommand+0x108>)
 8000de2:	f7ff fb97 	bl	8000514 <USART_SendMessage>
					}
					MONITOR_CommandLength = 0;
					MONITOR_CommandCursorPosition = 0;
 8000de6:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <MONITOR_CheckCommand+0x10c>)
					}
					else {																	// There is no char in the line	
						//USART_SEND_NEW_LINE();											
						MONITOR_SEND_PROMT();
					}
					MONITOR_CommandLength = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	703b      	strb	r3, [r7, #0]
					MONITOR_CommandCursorPosition = 0;
 8000dec:	7013      	strb	r3, [r2, #0]
					MONITOR_CommandEnable = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	702b      	strb	r3, [r5, #0]
 8000df2:	e7a2      	b.n	8000d3a <MONITOR_CheckCommand+0x22>
 8000df4:	20000021 	.word	0x20000021
 8000df8:	20000222 	.word	0x20000222
 8000dfc:	2000032b 	.word	0x2000032b
 8000e00:	20000020 	.word	0x20000020
 8000e04:	20000223 	.word	0x20000223
 8000e08:	20000227 	.word	0x20000227
 8000e0c:	20000226 	.word	0x20000226
 8000e10:	2000032a 	.word	0x2000032a
 8000e14:	20000225 	.word	0x20000225
 8000e18:	20000224 	.word	0x20000224
 8000e1c:	08002111 	.word	0x08002111
 8000e20:	08002160 	.word	0x08002160
 8000e24:	20000326 	.word	0x20000326

08000e28 <Error_Handler>:

/*
\brief	Error_Handler - Hibakat feldolgozo fuggveny.
*/
void Error_Handler( void )
{
 8000e28:	e7fe      	b.n	8000e28 <Error_Handler>
	...

08000e2c <SystemClock_Config>:


#if defined(CONFIG_USE_PANEL_CENTERPANEL) || defined(CONFIG_USE_PANEL_DISCOVERY)

void SystemClock_Config(void)
{
 8000e2c:	b500      	push	{lr}
 8000e2e:	b08f      	sub	sp, #60	; 0x3c

  RCC_OscInitTypeDef RCC_OscInitStruct;

  __PWR_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <SystemClock_Config+0x64>)
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000e38:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000e3c:	6411      	str	r1, [r2, #64]	; 0x40
 8000e3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000e40:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000e44:	9200      	str	r2, [sp, #0]
 8000e46:	9a00      	ldr	r2, [sp, #0]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e48:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <SystemClock_Config+0x68>)
 8000e4a:	9301      	str	r3, [sp, #4]
 8000e4c:	6811      	ldr	r1, [r2, #0]
 8000e4e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000e52:	6011      	str	r1, [r2, #0]
 8000e54:	6812      	ldr	r2, [r2, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e56:	9308      	str	r3, [sp, #32]

  RCC_OscInitTypeDef RCC_OscInitStruct;

  __PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e58:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000e5c:	9201      	str	r2, [sp, #4]
 8000e5e:	9a01      	ldr	r2, [sp, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e60:	2202      	movs	r2, #2
 8000e62:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e64:	2201      	movs	r2, #1
 8000e66:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000e68:	a802      	add	r0, sp, #8

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000e6a:	2210      	movs	r2, #16
 8000e6c:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000e6e:	f000 fd2f 	bl	80018d0 <HAL_RCC_OscConfig>

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8000e72:	f000 fe95 	bl	8001ba0 <HAL_RCC_GetHCLKFreq>
 8000e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e7e:	f001 f809 	bl	8001e94 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8000e82:	2004      	movs	r0, #4
 8000e84:	f001 f81c 	bl	8001ec0 <HAL_SYSTICK_CLKSourceConfig>

}
 8000e88:	b00f      	add	sp, #60	; 0x3c
 8000e8a:	f85d fb04 	ldr.w	pc, [sp], #4
 8000e8e:	bf00      	nop
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40007000 	.word	0x40007000

08000e98 <main>:


//#ifdef CONFIG_USE_PANEL_CENTERPANEL
// TODO:
int main(void)
{
 8000e98:	b508      	push	{r3, lr}


	/* MCU Configuration----------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e9a:	f001 f831 	bl	8001f00 <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
 8000e9e:	f7ff ffc5 	bl	8000e2c <SystemClock_Config>
		Error_Handler();
	}
#endif	//#ifdef CONFIG_USE_FREERTOS
	
	// Monitor
	USART_Init(&Debug_UartHandle);
 8000ea2:	4804      	ldr	r0, [pc, #16]	; (8000eb4 <main+0x1c>)
 8000ea4:	f7ff f9e0 	bl	8000268 <USART_Init>
	MONITOR_Init();
 8000ea8:	f7ff fd9c 	bl	80009e4 <MONITOR_Init>
				MONITOR_TASK_PRIORITY, &MONITOR_TaskHandle ) != pdPASS)
	{
		Error_Handler();
	}
#else
	MONITOR_CheckCommand();	// infinite loop
 8000eac:	f7ff ff34 	bl	8000d18 <MONITOR_CheckCommand>
 8000eb0:	e7fe      	b.n	8000eb0 <main+0x18>
 8000eb2:	bf00      	nop
 8000eb4:	200001e0 	.word	0x200001e0

08000eb8 <CommandFunction_raspberrypi>:
	
#endif
	
	
	return RETURN_SUCCESS;
}
 8000eb8:	2001      	movs	r0, #1
 8000eba:	4770      	bx	lr

08000ebc <CommandFunction_cls>:
/*							COMMAND FUNCTIONS 								*/
//////////////////////////////////////////////////////////////////////////////


// Function: cls (clean screen)
uint32_t CommandFunction_cls ( uint32_t argc, char** argv ) {
 8000ebc:	b508      	push	{r3, lr}

	//(void)argc;
	//(void)argv;
	USART_SEND_CLS();
 8000ebe:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <CommandFunction_cls+0x14>)
 8000ec0:	f7ff fb28 	bl	8000514 <USART_SendMessage>
 8000ec4:	4803      	ldr	r0, [pc, #12]	; (8000ed4 <CommandFunction_cls+0x18>)
 8000ec6:	f7ff fb25 	bl	8000514 <USART_SendMessage>

	return RETURN_SUCCESS;
}
 8000eca:	2001      	movs	r0, #1
 8000ecc:	bd08      	pop	{r3, pc}
 8000ece:	bf00      	nop
 8000ed0:	08002078 	.word	0x08002078
 8000ed4:	0800207d 	.word	0x0800207d

08000ed8 <CommandFunction_reset>:
}



// Function: reset
uint32_t CommandFunction_reset ( uint32_t argc, char** argv ) {
 8000ed8:	b508      	push	{r3, lr}
	//(void)argc;
	//(void)argv;
	int i;
	//if ( argc > 1 )	USART_SendString("Too many arguments!\r\n");

	uprintf("Reset...\r\n");
 8000eda:	4808      	ldr	r0, [pc, #32]	; (8000efc <CommandFunction_reset+0x24>)
 8000edc:	f7ff fb64 	bl	80005a8 <uprintf>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee0:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ee4:	4906      	ldr	r1, [pc, #24]	; (8000f00 <CommandFunction_reset+0x28>)
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000ee6:	4b07      	ldr	r3, [pc, #28]	; (8000f04 <CommandFunction_reset+0x2c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000ee8:	68ca      	ldr	r2, [r1, #12]
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000eea:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60cb      	str	r3, [r1, #12]
 8000ef2:	f3bf 8f4f 	dsb	sy
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000ef6:	bf00      	nop
 8000ef8:	e7fd      	b.n	8000ef6 <CommandFunction_reset+0x1e>
 8000efa:	bf00      	nop
 8000efc:	080021c9 	.word	0x080021c9
 8000f00:	e000ed00 	.word	0xe000ed00
 8000f04:	05fa0004 	.word	0x05fa0004

08000f08 <CommandFunction_test>:
*/



// Function: TEST...
uint32_t CommandFunction_test	( uint32_t argc, char** argv ) {
 8000f08:	b508      	push	{r3, lr}
	//(void)argc;
	//(void)argv;
	//uint8_t i = 0;
	//uint8_t buf[2];
	
	uprintf("Test start:\r\n");
 8000f0a:	4804      	ldr	r0, [pc, #16]	; (8000f1c <CommandFunction_test+0x14>)
 8000f0c:	f7ff fb4c 	bl	80005a8 <uprintf>
			"\r\n",
			230,
			520);
	*/

	uprintf("Test end\r\n");
 8000f10:	4803      	ldr	r0, [pc, #12]	; (8000f20 <CommandFunction_test+0x18>)
 8000f12:	f7ff fb49 	bl	80005a8 <uprintf>

	return RETURN_SUCCESS;

}
 8000f16:	2001      	movs	r0, #1
 8000f18:	bd08      	pop	{r3, pc}
 8000f1a:	bf00      	nop
 8000f1c:	080021d4 	.word	0x080021d4
 8000f20:	080021e2 	.word	0x080021e2

08000f24 <CommandFunction_flashdel>:

// Function: Flash erase
// Syntax: flashdel <address> <block/sector>
uint32_t CommandFunction_flashdel	( uint32_t argc, char** argv ) {

	if ( argc < 3 )
 8000f24:	2802      	cmp	r0, #2
#endif


// Function: Flash erase
// Syntax: flashdel <address> <block/sector>
uint32_t CommandFunction_flashdel	( uint32_t argc, char** argv ) {
 8000f26:	b538      	push	{r3, r4, r5, lr}
 8000f28:	460b      	mov	r3, r1

	if ( argc < 3 )
 8000f2a:	d801      	bhi.n	8000f30 <CommandFunction_flashdel+0xc>
	{
		uprintf("Too few arguments!\r\n");
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <CommandFunction_flashdel+0x3c>)
 8000f2e:	e002      	b.n	8000f36 <CommandFunction_flashdel+0x12>
		return RETURN_FALSE;
	}
	if ( argc > 3 )
 8000f30:	2803      	cmp	r0, #3
 8000f32:	d004      	beq.n	8000f3e <CommandFunction_flashdel+0x1a>
	{
		uprintf("Too many arguments!\r\n");
 8000f34:	480b      	ldr	r0, [pc, #44]	; (8000f64 <CommandFunction_flashdel+0x40>)
 8000f36:	f7ff fb37 	bl	80005a8 <uprintf>
		return RETURN_FALSE;
 8000f3a:	2000      	movs	r0, #0
 8000f3c:	bd38      	pop	{r3, r4, r5, pc}
	}
	
	// Convert arg2 hex
	if ( !StringHexToNum(argv[1],&Arg2Num,0))
 8000f3e:	4d0a      	ldr	r5, [pc, #40]	; (8000f68 <CommandFunction_flashdel+0x44>)
 8000f40:	6858      	ldr	r0, [r3, #4]
 8000f42:	2200      	movs	r2, #0
 8000f44:	4629      	mov	r1, r5
 8000f46:	f7ff fca4 	bl	8000892 <StringHexToNum>
 8000f4a:	b918      	cbnz	r0, 8000f54 <CommandFunction_flashdel+0x30>
	{
		USART_SendString("Wrong Argument!\r\n");
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <CommandFunction_flashdel+0x48>)
 8000f4e:	f7ff fae1 	bl	8000514 <USART_SendMessage>
 8000f52:	e7f2      	b.n	8000f3a <CommandFunction_flashdel+0x16>
	{
		return RETURN_FALSE;
	}
	#endif		
			
	uprintf("address erased: 0x%h\r\n",
 8000f54:	6829      	ldr	r1, [r5, #0]
 8000f56:	4806      	ldr	r0, [pc, #24]	; (8000f70 <CommandFunction_flashdel+0x4c>)
 8000f58:	f7ff fb26 	bl	80005a8 <uprintf>
 8000f5c:	2001      	movs	r0, #1
			Arg2Num
			);
	
	return RETURN_SUCCESS;
}
 8000f5e:	bd38      	pop	{r3, r4, r5, pc}
 8000f60:	080021ed 	.word	0x080021ed
 8000f64:	08002165 	.word	0x08002165
 8000f68:	20000330 	.word	0x20000330
 8000f6c:	08002202 	.word	0x08002202
 8000f70:	08002214 	.word	0x08002214

08000f74 <CommandFunction_flashread>:
// Function: FLASH read
// Syntax: flashread <address>
uint32_t CommandFunction_flashread	( uint32_t argc, char** argv ) {
	
	
	if ( argc < 2 )
 8000f74:	2801      	cmp	r0, #1



// Function: FLASH read
// Syntax: flashread <address>
uint32_t CommandFunction_flashread	( uint32_t argc, char** argv ) {
 8000f76:	b510      	push	{r4, lr}
 8000f78:	460b      	mov	r3, r1
	
	
	if ( argc < 2 )
 8000f7a:	d801      	bhi.n	8000f80 <CommandFunction_flashread+0xc>
	{
		uprintf("Too few arguments!\r\n");
 8000f7c:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <CommandFunction_flashread+0x34>)
 8000f7e:	e002      	b.n	8000f86 <CommandFunction_flashread+0x12>
		return RETURN_FALSE;
	}
	if ( argc > 2 )
 8000f80:	2802      	cmp	r0, #2
 8000f82:	d004      	beq.n	8000f8e <CommandFunction_flashread+0x1a>
	{
		uprintf("Too many arguments!\r\n");
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <CommandFunction_flashread+0x38>)
 8000f86:	f7ff fb0f 	bl	80005a8 <uprintf>
		return RETURN_FALSE;
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	bd10      	pop	{r4, pc}
	}
	
	
	// Convert arg2 hex
	if ( !StringHexToNum(argv[1],&Arg2Num,0))
 8000f8e:	2200      	movs	r2, #0
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <CommandFunction_flashread+0x3c>)
 8000f92:	6858      	ldr	r0, [r3, #4]
 8000f94:	f7ff fc7d 	bl	8000892 <StringHexToNum>
 8000f98:	b918      	cbnz	r0, 8000fa2 <CommandFunction_flashread+0x2e>
	{
		USART_SendString("Wrong Argument!\r\n");
 8000f9a:	4806      	ldr	r0, [pc, #24]	; (8000fb4 <CommandFunction_flashread+0x40>)
 8000f9c:	f7ff faba 	bl	8000514 <USART_SendMessage>
 8000fa0:	e7f3      	b.n	8000f8a <CommandFunction_flashread+0x16>
			Arg2Num,
			Buffer[0]
			);
	#endif
	
	return RETURN_SUCCESS;
 8000fa2:	2001      	movs	r0, #1
}
 8000fa4:	bd10      	pop	{r4, pc}
 8000fa6:	bf00      	nop
 8000fa8:	080021ed 	.word	0x080021ed
 8000fac:	08002165 	.word	0x08002165
 8000fb0:	20000330 	.word	0x20000330
 8000fb4:	08002202 	.word	0x08002202

08000fb8 <CommandFunction_help>:
uint32_t CommandFunction_help ( uint32_t argc, char** argv ) {

	uint8_t i;
	uint8_t found = 0;

	if ( argc > 2 )
 8000fb8:	2802      	cmp	r0, #2


// Function: help (list commands)
// 'help' or 'help <command>'
// Listing commands or write the command's describe
uint32_t CommandFunction_help ( uint32_t argc, char** argv ) {
 8000fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fbe:	460e      	mov	r6, r1

	uint8_t i;
	uint8_t found = 0;

	if ( argc > 2 )
 8000fc0:	d903      	bls.n	8000fca <CommandFunction_help+0x12>
	{
		uprintf("Too many arguments!\r\n");
 8000fc2:	481a      	ldr	r0, [pc, #104]	; (800102c <CommandFunction_help+0x74>)
 8000fc4:	f7ff faf0 	bl	80005a8 <uprintf>
 8000fc8:	e02d      	b.n	8001026 <CommandFunction_help+0x6e>
		return RETURN_FALSE;
	}

	if ( argc == 1) {																		// if Arg2 is empty, listing all commands
 8000fca:	2801      	cmp	r0, #1
 8000fcc:	d10c      	bne.n	8000fe8 <CommandFunction_help+0x30>
		uprintf("Using help:\r\n"
 8000fce:	4818      	ldr	r0, [pc, #96]	; (8001030 <CommandFunction_help+0x78>)
				"help <command>\r\n\r\n"
				"Commands list:\r\n");
		for (i=0; i < MONITOR_MAX_COMMAND_NUM; i++) uprintf("%s\r\n",CommandList[i].name);	// listing
 8000fd0:	4d18      	ldr	r5, [pc, #96]	; (8001034 <CommandFunction_help+0x7c>)
		uprintf("Too many arguments!\r\n");
		return RETURN_FALSE;
	}

	if ( argc == 1) {																		// if Arg2 is empty, listing all commands
		uprintf("Using help:\r\n"
 8000fd2:	f7ff fae9 	bl	80005a8 <uprintf>
 8000fd6:	2400      	movs	r4, #0
				"help <command>\r\n\r\n"
				"Commands list:\r\n");
		for (i=0; i < MONITOR_MAX_COMMAND_NUM; i++) uprintf("%s\r\n",CommandList[i].name);	// listing
 8000fd8:	5961      	ldr	r1, [r4, r5]
 8000fda:	4817      	ldr	r0, [pc, #92]	; (8001038 <CommandFunction_help+0x80>)
 8000fdc:	340c      	adds	r4, #12
 8000fde:	f7ff fae3 	bl	80005a8 <uprintf>
 8000fe2:	2c78      	cmp	r4, #120	; 0x78
 8000fe4:	d1f8      	bne.n	8000fd8 <CommandFunction_help+0x20>
 8000fe6:	e01b      	b.n	8001020 <CommandFunction_help+0x68>
	}
	else if (argc == 2) {																	// Arg2 not empty, find the command
 8000fe8:	2802      	cmp	r0, #2
 8000fea:	d11c      	bne.n	8001026 <CommandFunction_help+0x6e>
		for (i=0; i < MONITOR_MAX_COMMAND_NUM; i++) {										// Find the command
			if (!StrCmp(CommandList[i].name,argv[1])) { uprintf("%s\r\n",CommandList[i].description); found = 1; }		// Command's describe
 8000fec:	4f11      	ldr	r7, [pc, #68]	; (8001034 <CommandFunction_help+0x7c>)
 8000fee:	2400      	movs	r4, #0
 8000ff0:	f04f 080c 	mov.w	r8, #12
 8000ff4:	fb08 f504 	mul.w	r5, r8, r4
 8000ff8:	6871      	ldr	r1, [r6, #4]
 8000ffa:	59e8      	ldr	r0, [r5, r7]
 8000ffc:	f7ff fc94 	bl	8000928 <StrCmp>
 8001000:	b940      	cbnz	r0, 8001014 <CommandFunction_help+0x5c>
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <CommandFunction_help+0x7c>)
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <CommandFunction_help+0x80>)
 8001006:	441d      	add	r5, r3
 8001008:	68a9      	ldr	r1, [r5, #8]
 800100a:	f7ff facd 	bl	80005a8 <uprintf>
			if (found) return 2;
 800100e:	2002      	movs	r0, #2
 8001010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001014:	3401      	adds	r4, #1
				"help <command>\r\n\r\n"
				"Commands list:\r\n");
		for (i=0; i < MONITOR_MAX_COMMAND_NUM; i++) uprintf("%s\r\n",CommandList[i].name);	// listing
	}
	else if (argc == 2) {																	// Arg2 not empty, find the command
		for (i=0; i < MONITOR_MAX_COMMAND_NUM; i++) {										// Find the command
 8001016:	2c0a      	cmp	r4, #10
 8001018:	d1ec      	bne.n	8000ff4 <CommandFunction_help+0x3c>
			if (!StrCmp(CommandList[i].name,argv[1])) { uprintf("%s\r\n",CommandList[i].description); found = 1; }		// Command's describe
			if (found) return 2;
		}
		if (!found) uprintf("There isn't this command.\r\n");
 800101a:	4808      	ldr	r0, [pc, #32]	; (800103c <CommandFunction_help+0x84>)
 800101c:	f7ff fac4 	bl	80005a8 <uprintf>
	}
	else {
		return RETURN_FALSE;
	}

	return RETURN_SUCCESS;
 8001020:	2001      	movs	r0, #1
 8001022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (found) return 2;
		}
		if (!found) uprintf("There isn't this command.\r\n");
	}
	else {
		return RETURN_FALSE;
 8001026:	2000      	movs	r0, #0
 8001028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800102c:	08002165 	.word	0x08002165
 8001030:	0800222b 	.word	0x0800222b
 8001034:	0800248c 	.word	0x0800248c
 8001038:	0800225b 	.word	0x0800225b
 800103c:	08002260 	.word	0x08002260

08001040 <CommandFunction_led>:
// or led toggle <num>
// or led status <dummy>
uint32_t CommandFunction_led ( uint32_t argc, char** argv )	// TODO: !!IMPORTANT!! atirni
{

	if ( argc < 3 )
 8001040:	2802      	cmp	r0, #2
// led on <num>
// or led off <num>
// or led toggle <num>
// or led status <dummy>
uint32_t CommandFunction_led ( uint32_t argc, char** argv )	// TODO: !!IMPORTANT!! atirni
{
 8001042:	b510      	push	{r4, lr}
 8001044:	460b      	mov	r3, r1

	if ( argc < 3 )
 8001046:	d801      	bhi.n	800104c <CommandFunction_led+0xc>
	{
		uprintf("Too few arguments!\r\n");
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <CommandFunction_led+0x30>)
 800104a:	e002      	b.n	8001052 <CommandFunction_led+0x12>
		return RETURN_FALSE;
	}
	if ( argc > 3 )
 800104c:	2803      	cmp	r0, #3
 800104e:	d004      	beq.n	800105a <CommandFunction_led+0x1a>
	{
		uprintf("Too many arguments!\r\n");
 8001050:	4808      	ldr	r0, [pc, #32]	; (8001074 <CommandFunction_led+0x34>)
 8001052:	f7ff faa9 	bl	80005a8 <uprintf>
		return RETURN_FALSE;
 8001056:	2000      	movs	r0, #0
 8001058:	bd10      	pop	{r4, pc}
	}

	// Convert arg2, decimal
	if (!UnsignedDecimalStringToNum(argv[2],&Arg3Num))
 800105a:	4907      	ldr	r1, [pc, #28]	; (8001078 <CommandFunction_led+0x38>)
 800105c:	6898      	ldr	r0, [r3, #8]
 800105e:	f7ff fc44 	bl	80008ea <UnsignedDecimalStringToNum>
 8001062:	b918      	cbnz	r0, 800106c <CommandFunction_led+0x2c>
	{
		USART_SendString("Wrong 1. argument!\r\n");
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <CommandFunction_led+0x3c>)
 8001066:	f7ff fa55 	bl	8000514 <USART_SendMessage>
 800106a:	e7f4      	b.n	8001056 <CommandFunction_led+0x16>
		return RETURN_FALSE;
	}

#endif
	
	return RETURN_SUCCESS;
 800106c:	2001      	movs	r0, #1

}
 800106e:	bd10      	pop	{r4, pc}
 8001070:	080021ed 	.word	0x080021ed
 8001074:	08002165 	.word	0x08002165
 8001078:	20000334 	.word	0x20000334
 800107c:	0800227c 	.word	0x0800227c

08001080 <CommandFunction_flashwrite>:

// Function: FLASH write
// Syntax: flashwrite <address> <data>
uint32_t CommandFunction_flashwrite	( uint32_t argc, char** argv ) {

	if ( argc < 3 )
 8001080:	2802      	cmp	r0, #2



// Function: FLASH write
// Syntax: flashwrite <address> <data>
uint32_t CommandFunction_flashwrite	( uint32_t argc, char** argv ) {
 8001082:	b570      	push	{r4, r5, r6, lr}
 8001084:	460e      	mov	r6, r1

	if ( argc < 3 )
 8001086:	d801      	bhi.n	800108c <CommandFunction_flashwrite+0xc>
	{
		uprintf("Too few arguments!\r\n");
 8001088:	4810      	ldr	r0, [pc, #64]	; (80010cc <CommandFunction_flashwrite+0x4c>)
 800108a:	e002      	b.n	8001092 <CommandFunction_flashwrite+0x12>
		return RETURN_FALSE;
	}
	if ( argc > 3 )
 800108c:	2803      	cmp	r0, #3
 800108e:	d004      	beq.n	800109a <CommandFunction_flashwrite+0x1a>
	{
		uprintf("Too many arguments!\r\n");
 8001090:	480f      	ldr	r0, [pc, #60]	; (80010d0 <CommandFunction_flashwrite+0x50>)
 8001092:	f7ff fa89 	bl	80005a8 <uprintf>
		return RETURN_FALSE;
 8001096:	2000      	movs	r0, #0
 8001098:	bd70      	pop	{r4, r5, r6, pc}
	}
	
	// Convert arg2 hex
	if ( !StringHexToNum(argv[1],&Arg2Num,0))
 800109a:	4c0e      	ldr	r4, [pc, #56]	; (80010d4 <CommandFunction_flashwrite+0x54>)
 800109c:	6870      	ldr	r0, [r6, #4]
 800109e:	2200      	movs	r2, #0
 80010a0:	4621      	mov	r1, r4
 80010a2:	f7ff fbf6 	bl	8000892 <StringHexToNum>
 80010a6:	b918      	cbnz	r0, 80010b0 <CommandFunction_flashwrite+0x30>
	{
		USART_SendString("Wrong 1. argument!\r\n");
 80010a8:	480b      	ldr	r0, [pc, #44]	; (80010d8 <CommandFunction_flashwrite+0x58>)
 80010aa:	f7ff fa33 	bl	8000514 <USART_SendMessage>
 80010ae:	e7f2      	b.n	8001096 <CommandFunction_flashwrite+0x16>
		return RETURN_FALSE;
	}
	
	// Convert arg3, decimal
	if (!UnsignedDecimalStringToNum(argv[2],&Arg3Num))
 80010b0:	4d0a      	ldr	r5, [pc, #40]	; (80010dc <CommandFunction_flashwrite+0x5c>)
 80010b2:	68b0      	ldr	r0, [r6, #8]
 80010b4:	4629      	mov	r1, r5
 80010b6:	f7ff fc18 	bl	80008ea <UnsignedDecimalStringToNum>
 80010ba:	2800      	cmp	r0, #0
 80010bc:	d0f4      	beq.n	80010a8 <CommandFunction_flashwrite+0x28>
	Buffer[0] = (uint8_t)Arg3Num;
		
	FLASH_Write(Arg2Num,Buffer,1,5000);
	#endif
	
	uprintf("address: 0x%w\r\n"
 80010be:	682a      	ldr	r2, [r5, #0]
 80010c0:	6821      	ldr	r1, [r4, #0]
 80010c2:	4807      	ldr	r0, [pc, #28]	; (80010e0 <CommandFunction_flashwrite+0x60>)
 80010c4:	f7ff fa70 	bl	80005a8 <uprintf>
 80010c8:	2001      	movs	r0, #1
			Arg2Num,
			Arg3Num);

	
	return RETURN_SUCCESS;
}
 80010ca:	bd70      	pop	{r4, r5, r6, pc}
 80010cc:	080021ed 	.word	0x080021ed
 80010d0:	08002165 	.word	0x08002165
 80010d4:	20000330 	.word	0x20000330
 80010d8:	0800227c 	.word	0x0800227c
 80010dc:	20000334 	.word	0x20000334
 80010e0:	08002291 	.word	0x08002291

080010e4 <CommandFunction_temp>:
 80010e4:	2001      	movs	r0, #1
 80010e6:	4770      	bx	lr

080010e8 <COMMAND_GetCommandNum>:

uint8_t COMMAND_GetCommandNum( void )
{
	return MONITOR_MAX_COMMAND_NUM;

}
 80010e8:	200a      	movs	r0, #10
 80010ea:	4770      	bx	lr

080010ec <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010ec:	4a06      	ldr	r2, [pc, #24]	; (8001108 <prvResetNextTaskUnblockTime+0x1c>)
 80010ee:	6813      	ldr	r3, [r2, #0]
 80010f0:	6819      	ldr	r1, [r3, #0]
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <prvResetNextTaskUnblockTime+0x20>)
 80010f4:	b911      	cbnz	r1, 80010fc <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80010f6:	f04f 32ff 	mov.w	r2, #4294967295
 80010fa:	e003      	b.n	8001104 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80010fc:	6812      	ldr	r2, [r2, #0]
 80010fe:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 8001100:	68d2      	ldr	r2, [r2, #12]
 8001102:	6852      	ldr	r2, [r2, #4]
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	4770      	bx	lr
 8001108:	20000028 	.word	0x20000028
 800110c:	200000c8 	.word	0x200000c8

08001110 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001110:	4b40      	ldr	r3, [pc, #256]	; (8001214 <xTaskIncrementTick+0x104>)
 8001112:	681b      	ldr	r3, [r3, #0]

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001118:	2b00      	cmp	r3, #0
 800111a:	d13c      	bne.n	8001196 <xTaskIncrementTick+0x86>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 800111c:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <xTaskIncrementTick+0x108>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	3201      	adds	r2, #1
 8001122:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8001124:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 8001126:	b9bd      	cbnz	r5, 8001158 <xTaskIncrementTick+0x48>
			{
				taskSWITCH_DELAYED_LISTS();
 8001128:	4b3c      	ldr	r3, [pc, #240]	; (800121c <xTaskIncrementTick+0x10c>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	6812      	ldr	r2, [r2, #0]
 800112e:	b142      	cbz	r2, 8001142 <xTaskIncrementTick+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001134:	f383 8811 	msr	BASEPRI, r3
 8001138:	f3bf 8f6f 	isb	sy
 800113c:	f3bf 8f4f 	dsb	sy
 8001140:	e7fe      	b.n	8001140 <xTaskIncrementTick+0x30>
 8001142:	4a37      	ldr	r2, [pc, #220]	; (8001220 <xTaskIncrementTick+0x110>)
 8001144:	6819      	ldr	r1, [r3, #0]
 8001146:	6810      	ldr	r0, [r2, #0]
 8001148:	6018      	str	r0, [r3, #0]
 800114a:	6011      	str	r1, [r2, #0]
 800114c:	4a35      	ldr	r2, [pc, #212]	; (8001224 <xTaskIncrementTick+0x114>)
 800114e:	6813      	ldr	r3, [r2, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	f7ff ffca 	bl	80010ec <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8001158:	4c33      	ldr	r4, [pc, #204]	; (8001228 <xTaskIncrementTick+0x118>)
 800115a:	9401      	str	r4, [sp, #4]
 800115c:	6823      	ldr	r3, [r4, #0]
 800115e:	4e33      	ldr	r6, [pc, #204]	; (800122c <xTaskIncrementTick+0x11c>)
 8001160:	4f33      	ldr	r7, [pc, #204]	; (8001230 <xTaskIncrementTick+0x120>)
 8001162:	429d      	cmp	r5, r3
 8001164:	f04f 0b00 	mov.w	fp, #0
 8001168:	d30b      	bcc.n	8001182 <xTaskIncrementTick+0x72>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800116a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 800121c <xTaskIncrementTick+0x10c>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 800116e:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 800123c <xTaskIncrementTick+0x12c>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001172:	f8d8 2000 	ldr.w	r2, [r8]
 8001176:	6812      	ldr	r2, [r2, #0]
 8001178:	b9a2      	cbnz	r2, 80011a4 <xTaskIncrementTick+0x94>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 800117a:	9b01      	ldr	r3, [sp, #4]
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001182:	683a      	ldr	r2, [r7, #0]
 8001184:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001186:	2214      	movs	r2, #20
 8001188:	434a      	muls	r2, r1
 800118a:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 800118c:	2a02      	cmp	r2, #2
 800118e:	bf28      	it	cs
 8001190:	f04f 0b01 	movcs.w	fp, #1
 8001194:	e034      	b.n	8001200 <xTaskIncrementTick+0xf0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8001196:	4a27      	ldr	r2, [pc, #156]	; (8001234 <xTaskIncrementTick+0x124>)
 8001198:	6813      	ldr	r3, [r2, #0]
 800119a:	3301      	adds	r3, #1
 800119c:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800119e:	f04f 0b00 	mov.w	fp, #0
 80011a2:	e02d      	b.n	8001200 <xTaskIncrementTick+0xf0>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80011a4:	f8d8 2000 	ldr.w	r2, [r8]
 80011a8:	68d2      	ldr	r2, [r2, #12]
 80011aa:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 80011ac:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 80011ae:	428d      	cmp	r5, r1
 80011b0:	d202      	bcs.n	80011b8 <xTaskIncrementTick+0xa8>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 80011b2:	9b01      	ldr	r3, [sp, #4]
 80011b4:	6019      	str	r1, [r3, #0]
							break;
 80011b6:	e7e4      	b.n	8001182 <xTaskIncrementTick+0x72>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 80011b8:	f104 0a04 	add.w	sl, r4, #4
 80011bc:	4650      	mov	r0, sl
 80011be:	f000 f8ed 	bl	800139c <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80011c2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80011c4:	b119      	cbz	r1, 80011ce <xTaskIncrementTick+0xbe>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80011c6:	f104 0018 	add.w	r0, r4, #24
 80011ca:	f000 f8e7 	bl	800139c <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 80011ce:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80011d0:	f8d9 1000 	ldr.w	r1, [r9]
 80011d4:	2301      	movs	r3, #1
 80011d6:	fa03 fe00 	lsl.w	lr, r3, r0
 80011da:	ea4e 0101 	orr.w	r1, lr, r1
 80011de:	f04f 0e14 	mov.w	lr, #20
 80011e2:	f8c9 1000 	str.w	r1, [r9]
 80011e6:	fb0e 6000 	mla	r0, lr, r0, r6
 80011ea:	4651      	mov	r1, sl
 80011ec:	f000 f8ca 	bl	8001384 <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80011f0:	6838      	ldr	r0, [r7, #0]
 80011f2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80011f4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 80011f6:	4291      	cmp	r1, r2
 80011f8:	bf28      	it	cs
 80011fa:	f04f 0b01 	movcs.w	fp, #1
 80011fe:	e7b8      	b.n	8001172 <xTaskIncrementTick+0x62>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <xTaskIncrementTick+0x128>)
 8001202:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8001204:	2a00      	cmp	r2, #0
 8001206:	bf18      	it	ne
 8001208:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 800120c:	4658      	mov	r0, fp
 800120e:	b003      	add	sp, #12
 8001210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001214:	200000c0 	.word	0x200000c0
 8001218:	200000cc 	.word	0x200000cc
 800121c:	20000028 	.word	0x20000028
 8001220:	200000d0 	.word	0x200000d0
 8001224:	20000024 	.word	0x20000024
 8001228:	200000c8 	.word	0x200000c8
 800122c:	20000034 	.word	0x20000034
 8001230:	200000c4 	.word	0x200000c4
 8001234:	20000030 	.word	0x20000030
 8001238:	200000d8 	.word	0x200000d8
 800123c:	200000d4 	.word	0x200000d4

08001240 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <vTaskSwitchContext+0x60>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <vTaskSwitchContext+0x64>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001246:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001248:	b10a      	cbz	r2, 800124e <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800124a:	2201      	movs	r2, #1
 800124c:	e025      	b.n	800129a <vTaskSwitchContext+0x5a>
	}
	else
	{
		xYieldPending = pdFALSE;
 800124e:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <vTaskSwitchContext+0x68>)
 8001252:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8001254:	fab3 f383 	clz	r3, r3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f1c3 031f 	rsb	r3, r3, #31
 800125e:	2214      	movs	r2, #20
 8001260:	4912      	ldr	r1, [pc, #72]	; (80012ac <vTaskSwitchContext+0x6c>)
 8001262:	435a      	muls	r2, r3
 8001264:	1888      	adds	r0, r1, r2
 8001266:	588c      	ldr	r4, [r1, r2]
 8001268:	b944      	cbnz	r4, 800127c <vTaskSwitchContext+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800126a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126e:	f383 8811 	msr	BASEPRI, r3
 8001272:	f3bf 8f6f 	isb	sy
 8001276:	f3bf 8f4f 	dsb	sy
 800127a:	e7fe      	b.n	800127a <vTaskSwitchContext+0x3a>
 800127c:	6844      	ldr	r4, [r0, #4]
 800127e:	3208      	adds	r2, #8
 8001280:	6864      	ldr	r4, [r4, #4]
 8001282:	6044      	str	r4, [r0, #4]
 8001284:	440a      	add	r2, r1
 8001286:	4294      	cmp	r4, r2
 8001288:	bf04      	itt	eq
 800128a:	6862      	ldreq	r2, [r4, #4]
 800128c:	6042      	streq	r2, [r0, #4]
 800128e:	2214      	movs	r2, #20
 8001290:	fb02 1303 	mla	r3, r2, r3, r1
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	4b05      	ldr	r3, [pc, #20]	; (80012b0 <vTaskSwitchContext+0x70>)
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	bd10      	pop	{r4, pc}
 800129e:	bf00      	nop
 80012a0:	200000c0 	.word	0x200000c0
 80012a4:	200000d8 	.word	0x200000d8
 80012a8:	200000d4 	.word	0x200000d4
 80012ac:	20000034 	.word	0x20000034
 80012b0:	200000c4 	.word	0x200000c4

080012b4 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <xTaskGetSchedulerState+0x18>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	b133      	cbz	r3, 80012c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80012ba:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <xTaskGetSchedulerState+0x1c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80012c0:	bf0c      	ite	eq
 80012c2:	2002      	moveq	r0, #2
 80012c4:	2000      	movne	r0, #0
 80012c6:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80012c8:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 80012ca:	4770      	bx	lr
 80012cc:	2000002c 	.word	0x2000002c
 80012d0:	200000c0 	.word	0x200000c0

080012d4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <pxCurrentTCBConst2>)
 80012d6:	6819      	ldr	r1, [r3, #0]
 80012d8:	6808      	ldr	r0, [r1, #0]
 80012da:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012de:	f380 8809 	msr	PSP, r0
 80012e2:	f3bf 8f6f 	isb	sy
 80012e6:	f04f 0000 	mov.w	r0, #0
 80012ea:	f380 8811 	msr	BASEPRI, r0
 80012ee:	4770      	bx	lr

080012f0 <pxCurrentTCBConst2>:
 80012f0:	200000c4 	.word	0x200000c4

080012f4 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80012f4:	f3ef 8009 	mrs	r0, PSP
 80012f8:	f3bf 8f6f 	isb	sy
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <pxCurrentTCBConst>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	f01e 0f10 	tst.w	lr, #16
 8001304:	bf08      	it	eq
 8001306:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800130a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800130e:	6010      	str	r0, [r2, #0]
 8001310:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001314:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001318:	f380 8811 	msr	BASEPRI, r0
 800131c:	f3bf 8f4f 	dsb	sy
 8001320:	f3bf 8f6f 	isb	sy
 8001324:	f7ff ff8c 	bl	8001240 <vTaskSwitchContext>
 8001328:	f04f 0000 	mov.w	r0, #0
 800132c:	f380 8811 	msr	BASEPRI, r0
 8001330:	bc08      	pop	{r3}
 8001332:	6819      	ldr	r1, [r3, #0]
 8001334:	6808      	ldr	r0, [r1, #0]
 8001336:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800133a:	f01e 0f10 	tst.w	lr, #16
 800133e:	bf08      	it	eq
 8001340:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001344:	f380 8809 	msr	PSP, r0
 8001348:	f3bf 8f6f 	isb	sy
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop

08001350 <pxCurrentTCBConst>:
 8001350:	200000c4 	.word	0x200000c4

08001354 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001354:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001356:	f3ef 8311 	mrs	r3, BASEPRI
 800135a:	f04f 0250 	mov.w	r2, #80	; 0x50
 800135e:	f382 8811 	msr	BASEPRI, r2
 8001362:	f3bf 8f6f 	isb	sy
 8001366:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800136a:	f7ff fed1 	bl	8001110 <xTaskIncrementTick>
 800136e:	b118      	cbz	r0, 8001378 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <xPortSysTickHandler+0x2c>)
 8001372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001376:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001378:	2300      	movs	r3, #0
 800137a:	f383 8811 	msr	BASEPRI, r3
 800137e:	bd08      	pop	{r3, pc}
 8001380:	e000ed04 	.word	0xe000ed04

08001384 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001384:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001386:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001390:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001392:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001394:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 8001396:	3301      	adds	r3, #1
 8001398:	6003      	str	r3, [r0, #0]
 800139a:	4770      	bx	lr

0800139c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800139c:	6841      	ldr	r1, [r0, #4]
 800139e:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80013a0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80013a2:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80013a4:	6882      	ldr	r2, [r0, #8]
 80013a6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80013a8:	6859      	ldr	r1, [r3, #4]
 80013aa:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80013ac:	bf08      	it	eq
 80013ae:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80013b0:	2200      	movs	r2, #0
 80013b2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80013b4:	6818      	ldr	r0, [r3, #0]
 80013b6:	3801      	subs	r0, #1
 80013b8:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80013ba:	4770      	bx	lr

080013bc <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 80013bc:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013be:	f7ff ff79 	bl	80012b4 <xTaskGetSchedulerState>
 80013c2:	2801      	cmp	r0, #1
 80013c4:	d003      	beq.n	80013ce <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80013c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 80013ca:	f7ff bfc3 	b.w	8001354 <xPortSysTickHandler>
 80013ce:	bd08      	pop	{r3, pc}

080013d0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80013d0:	6803      	ldr	r3, [r0, #0]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80013d8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80013da:	695a      	ldr	r2, [r3, #20]
 80013dc:	f022 0201 	bic.w	r2, r2, #1
 80013e0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80013e2:	2320      	movs	r3, #32
 80013e4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80013e8:	4770      	bx	lr
	...

080013ec <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80013f0:	6807      	ldr	r7, [r0, #0]
 80013f2:	693b      	ldr	r3, [r7, #16]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80013f4:	4604      	mov	r4, r0

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80013f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80013fa:	68c3      	ldr	r3, [r0, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80013fc:	68a1      	ldr	r1, [r4, #8]
 80013fe:	69c0      	ldr	r0, [r0, #28]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001400:	4313      	orrs	r3, r2
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001402:	6922      	ldr	r2, [r4, #16]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001404:	613b      	str	r3, [r7, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8001406:	68fb      	ldr	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001408:	4311      	orrs	r1, r2
 800140a:	6962      	ldr	r2, [r4, #20]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800140c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001410:	430a      	orrs	r2, r1
 8001412:	4302      	orrs	r2, r0

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001414:	f023 030c 	bic.w	r3, r3, #12
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001418:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800141a:	60fb      	str	r3, [r7, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 800141c:	697b      	ldr	r3, [r7, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800141e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001422:	69a3      	ldr	r3, [r4, #24]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001424:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001428:	ea43 0302 	orr.w	r3, r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	4b7c      	ldr	r3, [pc, #496]	; (8001620 <UART_SetConfig+0x234>)
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001430:	d17c      	bne.n	800152c <UART_SetConfig+0x140>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001432:	429f      	cmp	r7, r3
 8001434:	d003      	beq.n	800143e <UART_SetConfig+0x52>
 8001436:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800143a:	429f      	cmp	r7, r3
 800143c:	d131      	bne.n	80014a2 <UART_SetConfig+0xb6>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800143e:	f000 fbcd 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 8001442:	6863      	ldr	r3, [r4, #4]
 8001444:	2519      	movs	r5, #25
 8001446:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800144a:	4368      	muls	r0, r5
 800144c:	fbb0 f8f8 	udiv	r8, r0, r8
 8001450:	f000 fbc4 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 8001454:	6866      	ldr	r6, [r4, #4]
 8001456:	4368      	muls	r0, r5
 8001458:	0076      	lsls	r6, r6, #1
 800145a:	fbb0 f6f6 	udiv	r6, r0, r6
 800145e:	f000 fbbd 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 8001462:	6863      	ldr	r3, [r4, #4]
 8001464:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4368      	muls	r0, r5
 800146c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001470:	fbb0 f0f9 	udiv	r0, r0, r9
 8001474:	fb09 6610 	mls	r6, r9, r0, r6
 8001478:	f000 fbb0 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 800147c:	fbb8 f8f9 	udiv	r8, r8, r9
 8001480:	6861      	ldr	r1, [r4, #4]
 8001482:	00f6      	lsls	r6, r6, #3
 8001484:	3632      	adds	r6, #50	; 0x32
 8001486:	fbb6 f6f9 	udiv	r6, r6, r9
 800148a:	0076      	lsls	r6, r6, #1
 800148c:	4368      	muls	r0, r5
 800148e:	0049      	lsls	r1, r1, #1
 8001490:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001494:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 8001498:	fbb0 faf1 	udiv	sl, r0, r1
 800149c:	f000 fb9e 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 80014a0:	e030      	b.n	8001504 <UART_SetConfig+0x118>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80014a2:	f000 fb83 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 80014a6:	6863      	ldr	r3, [r4, #4]
 80014a8:	2519      	movs	r5, #25
 80014aa:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80014ae:	4368      	muls	r0, r5
 80014b0:	fbb0 f8f8 	udiv	r8, r0, r8
 80014b4:	f000 fb7a 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 80014b8:	6866      	ldr	r6, [r4, #4]
 80014ba:	4368      	muls	r0, r5
 80014bc:	0076      	lsls	r6, r6, #1
 80014be:	fbb0 f6f6 	udiv	r6, r0, r6
 80014c2:	f000 fb73 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 80014c6:	6863      	ldr	r3, [r4, #4]
 80014c8:	f04f 0964 	mov.w	r9, #100	; 0x64
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4368      	muls	r0, r5
 80014d0:	fbb0 f0f3 	udiv	r0, r0, r3
 80014d4:	fbb0 f0f9 	udiv	r0, r0, r9
 80014d8:	fb09 6610 	mls	r6, r9, r0, r6
 80014dc:	f000 fb66 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 80014e0:	fbb8 f8f9 	udiv	r8, r8, r9
 80014e4:	00f6      	lsls	r6, r6, #3
 80014e6:	6861      	ldr	r1, [r4, #4]
 80014e8:	3632      	adds	r6, #50	; 0x32
 80014ea:	fbb6 f6f9 	udiv	r6, r6, r9
 80014ee:	0076      	lsls	r6, r6, #1
 80014f0:	4368      	muls	r0, r5
 80014f2:	0049      	lsls	r1, r1, #1
 80014f4:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80014f8:	f406 76f8 	and.w	r6, r6, #496	; 0x1f0
 80014fc:	fbb0 faf1 	udiv	sl, r0, r1
 8001500:	f000 fb54 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 8001504:	4345      	muls	r5, r0
 8001506:	6860      	ldr	r0, [r4, #4]
 8001508:	0040      	lsls	r0, r0, #1
 800150a:	fbb5 f0f0 	udiv	r0, r5, r0
 800150e:	fbb0 f0f9 	udiv	r0, r0, r9
 8001512:	fb09 a210 	mls	r2, r9, r0, sl
 8001516:	00d2      	lsls	r2, r2, #3
 8001518:	3232      	adds	r2, #50	; 0x32
 800151a:	fbb2 f3f9 	udiv	r3, r2, r9
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	4443      	add	r3, r8
 8001524:	441e      	add	r6, r3
 8001526:	60be      	str	r6, [r7, #8]
 8001528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    }
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 800152c:	429f      	cmp	r7, r3
 800152e:	d002      	beq.n	8001536 <UART_SetConfig+0x14a>
 8001530:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <UART_SetConfig+0x238>)
 8001532:	429f      	cmp	r7, r3
 8001534:	d130      	bne.n	8001598 <UART_SetConfig+0x1ac>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001536:	f000 fb51 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 800153a:	6863      	ldr	r3, [r4, #4]
 800153c:	2519      	movs	r5, #25
 800153e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8001542:	4368      	muls	r0, r5
 8001544:	fbb0 f8f8 	udiv	r8, r0, r8
 8001548:	f000 fb48 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 800154c:	6866      	ldr	r6, [r4, #4]
 800154e:	4368      	muls	r0, r5
 8001550:	00b6      	lsls	r6, r6, #2
 8001552:	fbb0 f6f6 	udiv	r6, r0, r6
 8001556:	f000 fb41 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 800155a:	6863      	ldr	r3, [r4, #4]
 800155c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8001560:	009b      	lsls	r3, r3, #2
 8001562:	4368      	muls	r0, r5
 8001564:	fbb0 f0f3 	udiv	r0, r0, r3
 8001568:	fbb0 f0f9 	udiv	r0, r0, r9
 800156c:	fb09 6610 	mls	r6, r9, r0, r6
 8001570:	f000 fb34 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 8001574:	fbb8 f8f9 	udiv	r8, r8, r9
 8001578:	6861      	ldr	r1, [r4, #4]
 800157a:	0136      	lsls	r6, r6, #4
 800157c:	4368      	muls	r0, r5
 800157e:	0089      	lsls	r1, r1, #2
 8001580:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8001584:	3632      	adds	r6, #50	; 0x32
 8001586:	fbb0 faf1 	udiv	sl, r0, r1
 800158a:	fbb6 f6f9 	udiv	r6, r6, r9
 800158e:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 8001592:	f000 fb23 	bl	8001bdc <HAL_RCC_GetPCLK2Freq>
 8001596:	e02f      	b.n	80015f8 <UART_SetConfig+0x20c>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001598:	f000 fb08 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 800159c:	6863      	ldr	r3, [r4, #4]
 800159e:	2519      	movs	r5, #25
 80015a0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80015a4:	4368      	muls	r0, r5
 80015a6:	fbb0 f8f8 	udiv	r8, r0, r8
 80015aa:	f000 faff 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 80015ae:	6866      	ldr	r6, [r4, #4]
 80015b0:	4368      	muls	r0, r5
 80015b2:	00b6      	lsls	r6, r6, #2
 80015b4:	fbb0 f6f6 	udiv	r6, r0, r6
 80015b8:	f000 faf8 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 80015bc:	6863      	ldr	r3, [r4, #4]
 80015be:	f04f 0964 	mov.w	r9, #100	; 0x64
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4368      	muls	r0, r5
 80015c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80015ca:	fbb0 f0f9 	udiv	r0, r0, r9
 80015ce:	fb09 6610 	mls	r6, r9, r0, r6
 80015d2:	f000 faeb 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 80015d6:	fbb8 f8f9 	udiv	r8, r8, r9
 80015da:	6861      	ldr	r1, [r4, #4]
 80015dc:	0136      	lsls	r6, r6, #4
 80015de:	3632      	adds	r6, #50	; 0x32
 80015e0:	4368      	muls	r0, r5
 80015e2:	fbb6 f6f9 	udiv	r6, r6, r9
 80015e6:	0089      	lsls	r1, r1, #2
 80015e8:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80015ec:	f006 06f0 	and.w	r6, r6, #240	; 0xf0
 80015f0:	fbb0 faf1 	udiv	sl, r0, r1
 80015f4:	f000 fada 	bl	8001bac <HAL_RCC_GetPCLK1Freq>
 80015f8:	4345      	muls	r5, r0
 80015fa:	6860      	ldr	r0, [r4, #4]
 80015fc:	0080      	lsls	r0, r0, #2
 80015fe:	fbb5 f0f0 	udiv	r0, r5, r0
 8001602:	fbb0 f0f9 	udiv	r0, r0, r9
 8001606:	fb09 a210 	mls	r2, r9, r0, sl
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	3232      	adds	r2, #50	; 0x32
 800160e:	fbb2 f3f9 	udiv	r3, r2, r9
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	4433      	add	r3, r6
 8001618:	4443      	add	r3, r8
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001620:	40011000 	.word	0x40011000
 8001624:	40011400 	.word	0x40011400

08001628 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001628:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 800162a:	4604      	mov	r4, r0
 800162c:	b340      	cbz	r0, 8001680 <HAL_UART_Init+0x58>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 800162e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001632:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001636:	b91b      	cbnz	r3, 8001640 <HAL_UART_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001638:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 800163c:	f7fe fe42 	bl	80002c4 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001640:	6822      	ldr	r2, [r4, #0]
    huart->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001642:	2324      	movs	r3, #36	; 0x24
 8001644:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001648:	68d3      	ldr	r3, [r2, #12]
 800164a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800164e:	60d3      	str	r3, [r2, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001650:	4620      	mov	r0, r4
 8001652:	f7ff fecb 	bl	80013ec <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001656:	6823      	ldr	r3, [r4, #0]
 8001658:	691a      	ldr	r2, [r3, #16]
 800165a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800165e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001666:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800166e:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001670:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8001672:	2320      	movs	r3, #32
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001674:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8001676:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800167a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  
  return HAL_OK;
 800167e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if(huart == NULL)
  {
    return HAL_ERROR;
 8001680:	2001      	movs	r0, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
  huart->gState= HAL_UART_STATE_READY;
  huart->RxState= HAL_UART_STATE_READY;
  
  return HAL_OK;
}
 8001682:	bd10      	pop	{r4, pc}

08001684 <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001684:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001688:	2b20      	cmp	r3, #32
 800168a:	d118      	bne.n	80016be <HAL_UART_Transmit_IT+0x3a>
  {
    if((pData == NULL ) || (Size == 0U)) 
 800168c:	b1a9      	cbz	r1, 80016ba <HAL_UART_Transmit_IT+0x36>
 800168e:	b1a2      	cbz	r2, 80016ba <HAL_UART_Transmit_IT+0x36>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001690:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001694:	2b01      	cmp	r3, #1
 8001696:	d012      	beq.n	80016be <HAL_UART_Transmit_IT+0x3a>
    
    huart->pTxBuffPtr = pData;
 8001698:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800169a:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800169c:	84c2      	strh	r2, [r0, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800169e:	2300      	movs	r3, #0

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80016a0:	6801      	ldr	r1, [r0, #0]
    
    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016a2:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80016a4:	2221      	movs	r2, #33	; 0x21
 80016a6:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80016aa:	68ca      	ldr	r2, [r1, #12]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016ac:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80016b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016b4:	60ca      	str	r2, [r1, #12]
    
    return HAL_OK;
 80016b6:	4618      	mov	r0, r3
 80016b8:	4770      	bx	lr
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return HAL_ERROR;
 80016ba:	2001      	movs	r0, #1
 80016bc:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;   
 80016be:	2002      	movs	r0, #2
  }
}
 80016c0:	4770      	bx	lr

080016c2 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 80016c2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80016c6:	2b20      	cmp	r3, #32
 80016c8:	d11c      	bne.n	8001704 <HAL_UART_Receive_IT+0x42>
  {
    if((pData == NULL ) || (Size == 0U)) 
 80016ca:	b1c9      	cbz	r1, 8001700 <HAL_UART_Receive_IT+0x3e>
 80016cc:	b1c2      	cbz	r2, 8001700 <HAL_UART_Receive_IT+0x3e>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80016ce:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d016      	beq.n	8001704 <HAL_UART_Receive_IT+0x42>
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 80016d6:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 80016d8:	85c2      	strh	r2, [r0, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016da:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016dc:	2222      	movs	r2, #34	; 0x22
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016de:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016e0:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016e4:	6802      	ldr	r2, [r0, #0]
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
 80016e6:	6281      	str	r1, [r0, #40]	; 0x28
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016e8:	6951      	ldr	r1, [r2, #20]
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016ea:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016ee:	f041 0101 	orr.w	r1, r1, #1
 80016f2:	6151      	str	r1, [r2, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80016f4:	68d1      	ldr	r1, [r2, #12]
 80016f6:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 80016fa:	60d1      	str	r1, [r2, #12]
    
    return HAL_OK;
 80016fc:	4618      	mov	r0, r3
 80016fe:	4770      	bx	lr
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return HAL_ERROR;
 8001700:	2001      	movs	r0, #1
 8001702:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
 8001704:	2002      	movs	r0, #2
  }
}
 8001706:	4770      	bx	lr

08001708 <UART_Receive_IT>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001708:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 800170c:	2b22      	cmp	r3, #34	; 0x22
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800170e:	b510      	push	{r4, lr}
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 8001710:	d132      	bne.n	8001778 <UART_Receive_IT+0x70>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001712:	6883      	ldr	r3, [r0, #8]
 8001714:	6901      	ldr	r1, [r0, #16]
 8001716:	6802      	ldr	r2, [r0, #0]
 8001718:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800171c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800171e:	d10b      	bne.n	8001738 <UART_Receive_IT+0x30>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8001720:	6852      	ldr	r2, [r2, #4]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001722:	b921      	cbnz	r1, 800172e <UART_Receive_IT+0x26>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8001724:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001728:	f823 2b02 	strh.w	r2, [r3], #2
 800172c:	e002      	b.n	8001734 <UART_Receive_IT+0x2c>
        huart->pRxBuffPtr += 2U;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8001734:	6283      	str	r3, [r0, #40]	; 0x28
 8001736:	e00a      	b.n	800174e <UART_Receive_IT+0x46>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001738:	b919      	cbnz	r1, 8001742 <UART_Receive_IT+0x3a>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 800173a:	1c59      	adds	r1, r3, #1
 800173c:	6281      	str	r1, [r0, #40]	; 0x28
 800173e:	6852      	ldr	r2, [r2, #4]
 8001740:	e004      	b.n	800174c <UART_Receive_IT+0x44>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 8001742:	6852      	ldr	r2, [r2, #4]
 8001744:	1c59      	adds	r1, r3, #1
 8001746:	6281      	str	r1, [r0, #40]	; 0x28
 8001748:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800174c:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800174e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001750:	3c01      	subs	r4, #1
 8001752:	b2a4      	uxth	r4, r4
 8001754:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001756:	b98c      	cbnz	r4, 800177c <UART_Receive_IT+0x74>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001758:	6803      	ldr	r3, [r0, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001760:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001762:	695a      	ldr	r2, [r3, #20]
 8001764:	f022 0201 	bic.w	r2, r2, #1
 8001768:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800176a:	2320      	movs	r3, #32
 800176c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8001770:	f7fe fdf6 	bl	8000360 <HAL_UART_RxCpltCallback>
 8001774:	4620      	mov	r0, r4
 8001776:	bd10      	pop	{r4, pc}
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001778:	2002      	movs	r0, #2
 800177a:	bd10      	pop	{r4, pc}
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
      }
    }

    if(--huart->RxXferCount == 0U)
 800177c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800177e:	bd10      	pop	{r4, pc}

08001780 <HAL_UART_IRQHandler>:
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001780:	6803      	ldr	r3, [r0, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001784:	68d9      	ldr	r1, [r3, #12]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001786:	b570      	push	{r4, r5, r6, lr}
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8001788:	0716      	lsls	r6, r2, #28
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800178a:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800178c:	695d      	ldr	r5, [r3, #20]
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 800178e:	d107      	bne.n	80017a0 <HAL_UART_IRQHandler+0x20>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001790:	0696      	lsls	r6, r2, #26
 8001792:	d55a      	bpl.n	800184a <HAL_UART_IRQHandler+0xca>
 8001794:	068d      	lsls	r5, r1, #26
 8001796:	d558      	bpl.n	800184a <HAL_UART_IRQHandler+0xca>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8001798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if(errorflags == RESET)
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
    {
      UART_Receive_IT(huart);
 800179c:	f7ff bfb4 	b.w	8001708 <UART_Receive_IT>
      return;
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80017a0:	f015 0001 	ands.w	r0, r5, #1
 80017a4:	d102      	bne.n	80017ac <HAL_UART_IRQHandler+0x2c>
 80017a6:	f411 7f90 	tst.w	r1, #288	; 0x120
 80017aa:	d04e      	beq.n	800184a <HAL_UART_IRQHandler+0xca>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80017ac:	07d3      	lsls	r3, r2, #31
 80017ae:	d505      	bpl.n	80017bc <HAL_UART_IRQHandler+0x3c>
 80017b0:	05ce      	lsls	r6, r1, #23
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80017b2:	bf42      	ittt	mi
 80017b4:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80017b6:	f043 0301 	orrmi.w	r3, r3, #1
 80017ba:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017bc:	0755      	lsls	r5, r2, #29
 80017be:	d504      	bpl.n	80017ca <HAL_UART_IRQHandler+0x4a>
 80017c0:	b118      	cbz	r0, 80017ca <HAL_UART_IRQHandler+0x4a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017ca:	0793      	lsls	r3, r2, #30
 80017cc:	d504      	bpl.n	80017d8 <HAL_UART_IRQHandler+0x58>
 80017ce:	b118      	cbz	r0, 80017d8 <HAL_UART_IRQHandler+0x58>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017d0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017d2:	f043 0304 	orr.w	r3, r3, #4
 80017d6:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017d8:	0716      	lsls	r6, r2, #28
 80017da:	d504      	bpl.n	80017e6 <HAL_UART_IRQHandler+0x66>
 80017dc:	b118      	cbz	r0, 80017e6 <HAL_UART_IRQHandler+0x66>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017de:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017e0:	f043 0308 	orr.w	r3, r3, #8
 80017e4:	63e3      	str	r3, [r4, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d066      	beq.n	80018ba <HAL_UART_IRQHandler+0x13a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017ec:	0695      	lsls	r5, r2, #26
 80017ee:	d504      	bpl.n	80017fa <HAL_UART_IRQHandler+0x7a>
 80017f0:	0688      	lsls	r0, r1, #26
 80017f2:	d502      	bpl.n	80017fa <HAL_UART_IRQHandler+0x7a>
      {
        UART_Receive_IT(huart);
 80017f4:	4620      	mov	r0, r4
 80017f6:	f7ff ff87 	bl	8001708 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	695b      	ldr	r3, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017fe:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001800:	0711      	lsls	r1, r2, #28
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001802:	4620      	mov	r0, r4
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001804:	d402      	bmi.n	800180c <HAL_UART_IRQHandler+0x8c>
 8001806:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 800180a:	d01a      	beq.n	8001842 <HAL_UART_IRQHandler+0xc2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800180c:	f7ff fde0 	bl	80013d0 <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001810:	6823      	ldr	r3, [r4, #0]
 8001812:	695a      	ldr	r2, [r3, #20]
 8001814:	0652      	lsls	r2, r2, #25
 8001816:	d510      	bpl.n	800183a <HAL_UART_IRQHandler+0xba>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001818:	695a      	ldr	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 800181a:	6b60      	ldr	r0, [r4, #52]	; 0x34
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800181c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001820:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001822:	b150      	cbz	r0, 800183a <HAL_UART_IRQHandler+0xba>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001824:	4b25      	ldr	r3, [pc, #148]	; (80018bc <HAL_UART_IRQHandler+0x13c>)
 8001826:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001828:	f000 fad0 	bl	8001dcc <HAL_DMA_Abort_IT>
 800182c:	2800      	cmp	r0, #0
 800182e:	d044      	beq.n	80018ba <HAL_UART_IRQHandler+0x13a>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001830:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8001832:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001836:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001838:	4718      	bx	r3
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800183a:	4620      	mov	r0, r4
 800183c:	f7fe fe28 	bl	8000490 <HAL_UART_ErrorCallback>
 8001840:	bd70      	pop	{r4, r5, r6, pc}
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001842:	f7fe fe25 	bl	8000490 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001846:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001848:	bd70      	pop	{r4, r5, r6, pc}
    }
    return;
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800184a:	0616      	lsls	r6, r2, #24
 800184c:	d527      	bpl.n	800189e <HAL_UART_IRQHandler+0x11e>
 800184e:	060d      	lsls	r5, r1, #24
 8001850:	d525      	bpl.n	800189e <HAL_UART_IRQHandler+0x11e>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001852:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001856:	2a21      	cmp	r2, #33	; 0x21
 8001858:	d12f      	bne.n	80018ba <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800185a:	68a2      	ldr	r2, [r4, #8]
 800185c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001860:	6a22      	ldr	r2, [r4, #32]
 8001862:	d10a      	bne.n	800187a <HAL_UART_IRQHandler+0xfa>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 8001864:	8811      	ldrh	r1, [r2, #0]
 8001866:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800186a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800186c:	6921      	ldr	r1, [r4, #16]
 800186e:	b909      	cbnz	r1, 8001874 <HAL_UART_IRQHandler+0xf4>
      {
        huart->pTxBuffPtr += 2U;
 8001870:	3202      	adds	r2, #2
 8001872:	e000      	b.n	8001876 <HAL_UART_IRQHandler+0xf6>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001874:	3201      	adds	r2, #1
 8001876:	6222      	str	r2, [r4, #32]
 8001878:	e003      	b.n	8001882 <HAL_UART_IRQHandler+0x102>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 800187a:	1c51      	adds	r1, r2, #1
 800187c:	6221      	str	r1, [r4, #32]
 800187e:	7812      	ldrb	r2, [r2, #0]
 8001880:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001882:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001884:	3a01      	subs	r2, #1
 8001886:	b292      	uxth	r2, r2
 8001888:	84e2      	strh	r2, [r4, #38]	; 0x26
 800188a:	b9b2      	cbnz	r2, 80018ba <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001892:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800189a:	60da      	str	r2, [r3, #12]
 800189c:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
    return;
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800189e:	0650      	lsls	r0, r2, #25
 80018a0:	d50b      	bpl.n	80018ba <HAL_UART_IRQHandler+0x13a>
 80018a2:	064a      	lsls	r2, r1, #25
 80018a4:	d509      	bpl.n	80018ba <HAL_UART_IRQHandler+0x13a>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80018ac:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80018ae:	2320      	movs	r3, #32
 80018b0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 80018b4:	4620      	mov	r0, r4
 80018b6:	f7fe fd4d 	bl	8000354 <HAL_UART_TxCpltCallback>
 80018ba:	bd70      	pop	{r4, r5, r6, pc}
 80018bc:	080018c1 	.word	0x080018c1

080018c0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80018c0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018c2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0;
 80018c4:	2300      	movs	r3, #0
 80018c6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0;
 80018c8:	84c3      	strh	r3, [r0, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80018ca:	f7fe fde1 	bl	8000490 <HAL_UART_ErrorCallback>
 80018ce:	bd08      	pop	{r3, pc}

080018d0 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d0:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80018d6:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d8:	07d8      	lsls	r0, r3, #31
 80018da:	d403      	bmi.n	80018e4 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018dc:	6823      	ldr	r3, [r4, #0]
 80018de:	0799      	lsls	r1, r3, #30
 80018e0:	d437      	bmi.n	8001952 <HAL_RCC_OscConfig+0x82>
 80018e2:	e087      	b.n	80019f4 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018e4:	4ba7      	ldr	r3, [pc, #668]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
 80018e6:	689a      	ldr	r2, [r3, #8]
 80018e8:	f002 020c 	and.w	r2, r2, #12
 80018ec:	2a04      	cmp	r2, #4
 80018ee:	d007      	beq.n	8001900 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f0:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018f2:	f002 020c 	and.w	r2, r2, #12
 80018f6:	2a08      	cmp	r2, #8
 80018f8:	d10b      	bne.n	8001912 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	025a      	lsls	r2, r3, #9
 80018fe:	d508      	bpl.n	8001912 <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001900:	4ba0      	ldr	r3, [pc, #640]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	039b      	lsls	r3, r3, #14
 8001906:	d5e9      	bpl.n	80018dc <HAL_RCC_OscConfig+0xc>
 8001908:	6863      	ldr	r3, [r4, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d1e6      	bne.n	80018dc <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 800190e:	2001      	movs	r0, #1
 8001910:	e134      	b.n	8001b7c <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001912:	4b9d      	ldr	r3, [pc, #628]	; (8001b88 <HAL_RCC_OscConfig+0x2b8>)
 8001914:	7922      	ldrb	r2, [r4, #4]
 8001916:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001918:	6863      	ldr	r3, [r4, #4]
 800191a:	b16b      	cbz	r3, 8001938 <HAL_RCC_OscConfig+0x68>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191c:	f000 fb12 	bl	8001f44 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001920:	4d98      	ldr	r5, [pc, #608]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001924:	682b      	ldr	r3, [r5, #0]
 8001926:	039f      	lsls	r7, r3, #14
 8001928:	d4d8      	bmi.n	80018dc <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800192a:	f000 fb0b 	bl	8001f44 <HAL_GetTick>
 800192e:	1b80      	subs	r0, r0, r6
 8001930:	2864      	cmp	r0, #100	; 0x64
 8001932:	d9f7      	bls.n	8001924 <HAL_RCC_OscConfig+0x54>
          {
            return HAL_TIMEOUT;
 8001934:	2003      	movs	r0, #3
 8001936:	e121      	b.n	8001b7c <HAL_RCC_OscConfig+0x2ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001938:	f000 fb04 	bl	8001f44 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193c:	4d91      	ldr	r5, [pc, #580]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193e:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001940:	682b      	ldr	r3, [r5, #0]
 8001942:	0398      	lsls	r0, r3, #14
 8001944:	d5ca      	bpl.n	80018dc <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001946:	f000 fafd 	bl	8001f44 <HAL_GetTick>
 800194a:	1b80      	subs	r0, r0, r6
 800194c:	2864      	cmp	r0, #100	; 0x64
 800194e:	d9f7      	bls.n	8001940 <HAL_RCC_OscConfig+0x70>
 8001950:	e7f0      	b.n	8001934 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001952:	4b8c      	ldr	r3, [pc, #560]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
 8001954:	689a      	ldr	r2, [r3, #8]
 8001956:	f012 0f0c 	tst.w	r2, #12
 800195a:	d007      	beq.n	800196c <HAL_RCC_OscConfig+0x9c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800195c:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800195e:	f002 020c 	and.w	r2, r2, #12
 8001962:	2a08      	cmp	r2, #8
 8001964:	d117      	bne.n	8001996 <HAL_RCC_OscConfig+0xc6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	0259      	lsls	r1, r3, #9
 800196a:	d414      	bmi.n	8001996 <HAL_RCC_OscConfig+0xc6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800196c:	4b85      	ldr	r3, [pc, #532]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	0792      	lsls	r2, r2, #30
 8001972:	d502      	bpl.n	800197a <HAL_RCC_OscConfig+0xaa>
 8001974:	68e2      	ldr	r2, [r4, #12]
 8001976:	2a01      	cmp	r2, #1
 8001978:	d1c9      	bne.n	800190e <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197a:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	21f8      	movs	r1, #248	; 0xf8
 800197e:	fa91 f1a1 	rbit	r1, r1
 8001982:	6920      	ldr	r0, [r4, #16]
 8001984:	fab1 f181 	clz	r1, r1
 8001988:	fa00 f101 	lsl.w	r1, r0, r1
 800198c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001994:	e02e      	b.n	80019f4 <HAL_RCC_OscConfig+0x124>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001996:	68e2      	ldr	r2, [r4, #12]
 8001998:	4b7c      	ldr	r3, [pc, #496]	; (8001b8c <HAL_RCC_OscConfig+0x2bc>)
 800199a:	b1ea      	cbz	r2, 80019d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f000 fad0 	bl	8001f44 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a4:	4d77      	ldr	r5, [pc, #476]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a6:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a8:	682b      	ldr	r3, [r5, #0]
 80019aa:	4876      	ldr	r0, [pc, #472]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
 80019ac:	079b      	lsls	r3, r3, #30
 80019ae:	d405      	bmi.n	80019bc <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b0:	f000 fac8 	bl	8001f44 <HAL_GetTick>
 80019b4:	1b80      	subs	r0, r0, r6
 80019b6:	2802      	cmp	r0, #2
 80019b8:	d9f6      	bls.n	80019a8 <HAL_RCC_OscConfig+0xd8>
 80019ba:	e7bb      	b.n	8001934 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	6803      	ldr	r3, [r0, #0]
 80019be:	22f8      	movs	r2, #248	; 0xf8
 80019c0:	fa92 f2a2 	rbit	r2, r2
 80019c4:	6921      	ldr	r1, [r4, #16]
 80019c6:	fab2 f282 	clz	r2, r2
 80019ca:	fa01 f202 	lsl.w	r2, r1, r2
 80019ce:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019d2:	4313      	orrs	r3, r2
 80019d4:	6003      	str	r3, [r0, #0]
 80019d6:	e00d      	b.n	80019f4 <HAL_RCC_OscConfig+0x124>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019da:	f000 fab3 	bl	8001f44 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019de:	4d69      	ldr	r5, [pc, #420]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	682b      	ldr	r3, [r5, #0]
 80019e4:	079f      	lsls	r7, r3, #30
 80019e6:	d505      	bpl.n	80019f4 <HAL_RCC_OscConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019e8:	f000 faac 	bl	8001f44 <HAL_GetTick>
 80019ec:	1b80      	subs	r0, r0, r6
 80019ee:	2802      	cmp	r0, #2
 80019f0:	d9f7      	bls.n	80019e2 <HAL_RCC_OscConfig+0x112>
 80019f2:	e79f      	b.n	8001934 <HAL_RCC_OscConfig+0x64>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	071e      	lsls	r6, r3, #28
 80019f8:	d403      	bmi.n	8001a02 <HAL_RCC_OscConfig+0x132>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	075d      	lsls	r5, r3, #29
 80019fe:	d545      	bpl.n	8001a8c <HAL_RCC_OscConfig+0x1bc>
 8001a00:	e01f      	b.n	8001a42 <HAL_RCC_OscConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a02:	6962      	ldr	r2, [r4, #20]
 8001a04:	4b62      	ldr	r3, [pc, #392]	; (8001b90 <HAL_RCC_OscConfig+0x2c0>)
 8001a06:	b172      	cbz	r2, 8001a26 <HAL_RCC_OscConfig+0x156>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0c:	f000 fa9a 	bl	8001f44 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a10:	4d5c      	ldr	r5, [pc, #368]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a12:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a14:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a16:	0798      	lsls	r0, r3, #30
 8001a18:	d4ef      	bmi.n	80019fa <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a1a:	f000 fa93 	bl	8001f44 <HAL_GetTick>
 8001a1e:	1b80      	subs	r0, r0, r6
 8001a20:	2802      	cmp	r0, #2
 8001a22:	d9f7      	bls.n	8001a14 <HAL_RCC_OscConfig+0x144>
 8001a24:	e786      	b.n	8001934 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a26:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f000 fa8c 	bl	8001f44 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a2c:	4d55      	ldr	r5, [pc, #340]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a2e:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a30:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a32:	0799      	lsls	r1, r3, #30
 8001a34:	d5e1      	bpl.n	80019fa <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a36:	f000 fa85 	bl	8001f44 <HAL_GetTick>
 8001a3a:	1b80      	subs	r0, r0, r6
 8001a3c:	2802      	cmp	r0, #2
 8001a3e:	d9f7      	bls.n	8001a30 <HAL_RCC_OscConfig+0x160>
 8001a40:	e778      	b.n	8001934 <HAL_RCC_OscConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	4b4f      	ldr	r3, [pc, #316]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a48:	4d52      	ldr	r5, [pc, #328]	; (8001b94 <HAL_RCC_OscConfig+0x2c4>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a4c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a58:	9301      	str	r3, [sp, #4]
 8001a5a:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a5c:	682b      	ldr	r3, [r5, #0]
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a62:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001a64:	f000 fa6e 	bl	8001f44 <HAL_GetTick>
 8001a68:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a6a:	682b      	ldr	r3, [r5, #0]
 8001a6c:	05da      	lsls	r2, r3, #23
 8001a6e:	d510      	bpl.n	8001a92 <HAL_RCC_OscConfig+0x1c2>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a70:	4b49      	ldr	r3, [pc, #292]	; (8001b98 <HAL_RCC_OscConfig+0x2c8>)
 8001a72:	7a22      	ldrb	r2, [r4, #8]
 8001a74:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a76:	68a3      	ldr	r3, [r4, #8]
 8001a78:	b1bb      	cbz	r3, 8001aaa <HAL_RCC_OscConfig+0x1da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7a:	f000 fa63 	bl	8001f44 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a7e:	4d41      	ldr	r5, [pc, #260]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a86:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a88:	079b      	lsls	r3, r3, #30
 8001a8a:	d508      	bpl.n	8001a9e <HAL_RCC_OscConfig+0x1ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a8c:	69a2      	ldr	r2, [r4, #24]
 8001a8e:	b9da      	cbnz	r2, 8001ac8 <HAL_RCC_OscConfig+0x1f8>
 8001a90:	e059      	b.n	8001b46 <HAL_RCC_OscConfig+0x276>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a92:	f000 fa57 	bl	8001f44 <HAL_GetTick>
 8001a96:	1b80      	subs	r0, r0, r6
 8001a98:	2802      	cmp	r0, #2
 8001a9a:	d9e6      	bls.n	8001a6a <HAL_RCC_OscConfig+0x19a>
 8001a9c:	e74a      	b.n	8001934 <HAL_RCC_OscConfig+0x64>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9e:	f000 fa51 	bl	8001f44 <HAL_GetTick>
 8001aa2:	1b80      	subs	r0, r0, r6
 8001aa4:	42b8      	cmp	r0, r7
 8001aa6:	d9ee      	bls.n	8001a86 <HAL_RCC_OscConfig+0x1b6>
 8001aa8:	e744      	b.n	8001934 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aaa:	f000 fa4b 	bl	8001f44 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aae:	4d35      	ldr	r5, [pc, #212]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab0:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ab6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001ab8:	0798      	lsls	r0, r3, #30
 8001aba:	d5e7      	bpl.n	8001a8c <HAL_RCC_OscConfig+0x1bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001abc:	f000 fa42 	bl	8001f44 <HAL_GetTick>
 8001ac0:	1b80      	subs	r0, r0, r6
 8001ac2:	42b8      	cmp	r0, r7
 8001ac4:	d9f7      	bls.n	8001ab6 <HAL_RCC_OscConfig+0x1e6>
 8001ac6:	e735      	b.n	8001934 <HAL_RCC_OscConfig+0x64>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ac8:	4d2e      	ldr	r5, [pc, #184]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
 8001aca:	68ab      	ldr	r3, [r5, #8]
 8001acc:	f003 030c 	and.w	r3, r3, #12
 8001ad0:	2b08      	cmp	r3, #8
 8001ad2:	f43f af1c 	beq.w	800190e <HAL_RCC_OscConfig+0x3e>
 8001ad6:	4e31      	ldr	r6, [pc, #196]	; (8001b9c <HAL_RCC_OscConfig+0x2cc>)
 8001ad8:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ada:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001adc:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ade:	d141      	bne.n	8001b64 <HAL_RCC_OscConfig+0x294>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f000 fa30 	bl	8001f44 <HAL_GetTick>
 8001ae4:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae6:	682b      	ldr	r3, [r5, #0]
 8001ae8:	4f26      	ldr	r7, [pc, #152]	; (8001b84 <HAL_RCC_OscConfig+0x2b4>)
 8001aea:	0199      	lsls	r1, r3, #6
 8001aec:	d42d      	bmi.n	8001b4a <HAL_RCC_OscConfig+0x27a>
 8001aee:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001af2:	fa92 f2a2 	rbit	r2, r2
 8001af6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001afa:	fab2 fe82 	clz	lr, r2
 8001afe:	fa93 f3a3 	rbit	r3, r3
 8001b02:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001b06:	fab3 f583 	clz	r5, r3
 8001b0a:	fa92 f2a2 	rbit	r2, r2
 8001b0e:	69e0      	ldr	r0, [r4, #28]
 8001b10:	6a23      	ldr	r3, [r4, #32]
 8001b12:	fab2 f182 	clz	r1, r2
 8001b16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001b18:	4303      	orrs	r3, r0
 8001b1a:	fa02 f20e 	lsl.w	r2, r2, lr
 8001b1e:	ea43 0002 	orr.w	r0, r3, r2
 8001b22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b24:	085a      	lsrs	r2, r3, #1
 8001b26:	3a01      	subs	r2, #1
 8001b28:	fa02 f305 	lsl.w	r3, r2, r5
 8001b2c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b2e:	4303      	orrs	r3, r0
 8001b30:	408a      	lsls	r2, r1
 8001b32:	4313      	orrs	r3, r2
 8001b34:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b36:	2301      	movs	r3, #1
 8001b38:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3a:	f000 fa03 	bl	8001f44 <HAL_GetTick>
 8001b3e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	019a      	lsls	r2, r3, #6
 8001b44:	d508      	bpl.n	8001b58 <HAL_RCC_OscConfig+0x288>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001b46:	2000      	movs	r0, #0
 8001b48:	e018      	b.n	8001b7c <HAL_RCC_OscConfig+0x2ac>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b4a:	f000 f9fb 	bl	8001f44 <HAL_GetTick>
 8001b4e:	ebc8 0000 	rsb	r0, r8, r0
 8001b52:	2802      	cmp	r0, #2
 8001b54:	d9c7      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x216>
 8001b56:	e6ed      	b.n	8001934 <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b58:	f000 f9f4 	bl	8001f44 <HAL_GetTick>
 8001b5c:	1b00      	subs	r0, r0, r4
 8001b5e:	2802      	cmp	r0, #2
 8001b60:	d9ee      	bls.n	8001b40 <HAL_RCC_OscConfig+0x270>
 8001b62:	e6e7      	b.n	8001934 <HAL_RCC_OscConfig+0x64>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f000 f9ee 	bl	8001f44 <HAL_GetTick>
 8001b68:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	682b      	ldr	r3, [r5, #0]
 8001b6c:	019b      	lsls	r3, r3, #6
 8001b6e:	d5ea      	bpl.n	8001b46 <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b70:	f000 f9e8 	bl	8001f44 <HAL_GetTick>
 8001b74:	1b00      	subs	r0, r0, r4
 8001b76:	2802      	cmp	r0, #2
 8001b78:	d9f7      	bls.n	8001b6a <HAL_RCC_OscConfig+0x29a>
 8001b7a:	e6db      	b.n	8001934 <HAL_RCC_OscConfig+0x64>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001b7c:	b002      	add	sp, #8
 8001b7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40023802 	.word	0x40023802
 8001b8c:	42470000 	.word	0x42470000
 8001b90:	42470e80 	.word	0x42470e80
 8001b94:	40007000 	.word	0x40007000
 8001b98:	40023870 	.word	0x40023870
 8001b9c:	42470060 	.word	0x42470060

08001ba0 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001ba0:	4b01      	ldr	r3, [pc, #4]	; (8001ba8 <HAL_RCC_GetHCLKFreq+0x8>)
 8001ba2:	6818      	ldr	r0, [r3, #0]
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20000000 	.word	0x20000000

08001bac <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{  
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001bae:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	fa92 f2a2 	rbit	r2, r2
 8001bb8:	fab2 f282 	clz	r2, r2
 8001bbc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001bc0:	40d3      	lsrs	r3, r2
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001bc8:	6810      	ldr	r0, [r2, #0]
}
 8001bca:	40d8      	lsrs	r0, r3
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	08002504 	.word	0x08002504
 8001bd8:	20000000 	.word	0x20000000

08001bdc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bde:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	fa92 f2a2 	rbit	r2, r2
 8001be8:	fab2 f282 	clz	r2, r2
 8001bec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001bf0:	40d3      	lsrs	r3, r2
 8001bf2:	4a04      	ldr	r2, [pc, #16]	; (8001c04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001bf4:	5cd3      	ldrb	r3, [r2, r3]
 8001bf6:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001bf8:	6810      	ldr	r0, [r2, #0]
} 
 8001bfa:	40d8      	lsrs	r0, r3
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	08002504 	.word	0x08002504
 8001c08:	20000000 	.word	0x20000000

08001c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c10:	4f6a      	ldr	r7, [pc, #424]	; (8001dbc <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c12:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c14:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8001dc4 <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c18:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001dc8 <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c1c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c1e:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8001c24:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001c26:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8001c28:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001c2a:	ea34 0303 	bics.w	r3, r4, r3
 8001c2e:	f040 80bd 	bne.w	8001dac <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c32:	684d      	ldr	r5, [r1, #4]
 8001c34:	f025 0a10 	bic.w	sl, r5, #16
 8001c38:	f1ba 0f02 	cmp.w	sl, #2
 8001c3c:	d114      	bne.n	8001c68 <HAL_GPIO_Init+0x5c>
 8001c3e:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8001c42:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001c46:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c4a:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001c4e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001c52:	230f      	movs	r3, #15
 8001c54:	fa03 f30b 	lsl.w	r3, r3, fp
 8001c58:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c5c:	690b      	ldr	r3, [r1, #16]
 8001c5e:	fa03 f30b 	lsl.w	r3, r3, fp
 8001c62:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8001c64:	f8c9 3020 	str.w	r3, [r9, #32]
 8001c68:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c6c:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c70:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c72:	fa09 f90b 	lsl.w	r9, r9, fp
 8001c76:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c7a:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c7e:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c82:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c86:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c8a:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c8c:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8001c90:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c92:	d80f      	bhi.n	8001cb4 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c94:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c96:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c98:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c9c:	fa06 f60b 	lsl.w	r6, r6, fp
 8001ca0:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8001ca2:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca4:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ca6:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001caa:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cae:	4096      	lsls	r6, r2
 8001cb0:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001cb2:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cb4:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cb6:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cba:	688b      	ldr	r3, [r1, #8]
 8001cbc:	fa03 f30b 	lsl.w	r3, r3, fp
 8001cc0:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8001cc4:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cc6:	00eb      	lsls	r3, r5, #3
 8001cc8:	d570      	bpl.n	8001dac <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	9303      	str	r3, [sp, #12]
 8001cce:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd4:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001cd8:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8001cdc:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8001ce0:	f022 0903 	bic.w	r9, r2, #3
 8001ce4:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8001ce8:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001cec:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8001cf0:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001cf2:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf6:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf8:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001cfc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001d00:	260f      	movs	r6, #15
 8001d02:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d06:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001d08:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d0c:	d01c      	beq.n	8001d48 <HAL_GPIO_Init+0x13c>
 8001d0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d12:	4298      	cmp	r0, r3
 8001d14:	d01a      	beq.n	8001d4c <HAL_GPIO_Init+0x140>
 8001d16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d1a:	4298      	cmp	r0, r3
 8001d1c:	d018      	beq.n	8001d50 <HAL_GPIO_Init+0x144>
 8001d1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d22:	4298      	cmp	r0, r3
 8001d24:	d016      	beq.n	8001d54 <HAL_GPIO_Init+0x148>
 8001d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d2a:	4298      	cmp	r0, r3
 8001d2c:	d014      	beq.n	8001d58 <HAL_GPIO_Init+0x14c>
 8001d2e:	4540      	cmp	r0, r8
 8001d30:	d014      	beq.n	8001d5c <HAL_GPIO_Init+0x150>
 8001d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d36:	4298      	cmp	r0, r3
 8001d38:	d012      	beq.n	8001d60 <HAL_GPIO_Init+0x154>
 8001d3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d3e:	4298      	cmp	r0, r3
 8001d40:	bf14      	ite	ne
 8001d42:	2308      	movne	r3, #8
 8001d44:	2307      	moveq	r3, #7
 8001d46:	e00c      	b.n	8001d62 <HAL_GPIO_Init+0x156>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	e00a      	b.n	8001d62 <HAL_GPIO_Init+0x156>
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e008      	b.n	8001d62 <HAL_GPIO_Init+0x156>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e006      	b.n	8001d62 <HAL_GPIO_Init+0x156>
 8001d54:	2303      	movs	r3, #3
 8001d56:	e004      	b.n	8001d62 <HAL_GPIO_Init+0x156>
 8001d58:	2304      	movs	r3, #4
 8001d5a:	e002      	b.n	8001d62 <HAL_GPIO_Init+0x156>
 8001d5c:	2305      	movs	r3, #5
 8001d5e:	e000      	b.n	8001d62 <HAL_GPIO_Init+0x156>
 8001d60:	2306      	movs	r3, #6
 8001d62:	fa03 f30a 	lsl.w	r3, r3, sl
 8001d66:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d68:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d6c:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d70:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001d74:	bf0c      	ite	eq
 8001d76:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001d78:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8001d7a:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001d7e:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d82:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8001d86:	bf0c      	ite	eq
 8001d88:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001d8a:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8001d8c:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d90:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001d94:	bf0c      	ite	eq
 8001d96:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001d98:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8001d9a:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001d9e:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001da2:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8001da4:	bf54      	ite	pl
 8001da6:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001da8:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8001daa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dac:	3201      	adds	r2, #1
 8001dae:	2a10      	cmp	r2, #16
 8001db0:	f47f af38 	bne.w	8001c24 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8001db4:	b005      	add	sp, #20
 8001db6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001dba:	bf00      	nop
 8001dbc:	40013c00 	.word	0x40013c00
 8001dc0:	40020000 	.word	0x40020000
 8001dc4:	40023800 	.word	0x40023800
 8001dc8:	40021400 	.word	0x40021400

08001dcc <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dcc:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d003      	beq.n	8001ddc <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001dd8:	2001      	movs	r0, #1
 8001dda:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ddc:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dde:	2305      	movs	r3, #5
 8001de0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001de4:	6813      	ldr	r3, [r2, #0]
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001dec:	2000      	movs	r0, #0
}
 8001dee:	4770      	bx	lr

08001df0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df0:	4a07      	ldr	r2, [pc, #28]	; (8001e10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001df2:	68d3      	ldr	r3, [r2, #12]
 8001df4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001df8:	041b      	lsls	r3, r3, #16
 8001dfa:	0c1b      	lsrs	r3, r3, #16
 8001dfc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001e00:	0200      	lsls	r0, r0, #8
 8001e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e06:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001e0a:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001e0c:	60d3      	str	r3, [r2, #12]
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_NVIC_SetPriority+0x60>)
 8001e16:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e18:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e1c:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e1e:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e22:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e24:	2c04      	cmp	r4, #4
 8001e26:	bf28      	it	cs
 8001e28:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	2d06      	cmp	r5, #6

  return (
 8001e2c:	f04f 0501 	mov.w	r5, #1
 8001e30:	fa05 f404 	lsl.w	r4, r5, r4
 8001e34:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e38:	bf8c      	ite	hi
 8001e3a:	3b03      	subhi	r3, #3
 8001e3c:	2300      	movls	r3, #0

  return (
 8001e3e:	400c      	ands	r4, r1
 8001e40:	409c      	lsls	r4, r3
 8001e42:	fa05 f303 	lsl.w	r3, r5, r3
 8001e46:	3b01      	subs	r3, #1
 8001e48:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001e4a:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001e4c:	ea42 0204 	orr.w	r2, r2, r4
 8001e50:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	bfaf      	iteee	ge
 8001e56:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	f000 000f 	andlt.w	r0, r0, #15
 8001e5e:	4b06      	ldrlt	r3, [pc, #24]	; (8001e78 <HAL_NVIC_SetPriority+0x64>)
 8001e60:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e62:	bfa5      	ittet	ge
 8001e64:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8001e68:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001e70:	bd30      	pop	{r4, r5, pc}
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00
 8001e78:	e000ed14 	.word	0xe000ed14

08001e7c <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001e7c:	0942      	lsrs	r2, r0, #5
 8001e7e:	2301      	movs	r3, #1
 8001e80:	f000 001f 	and.w	r0, r0, #31
 8001e84:	fa03 f000 	lsl.w	r0, r3, r0
 8001e88:	4b01      	ldr	r3, [pc, #4]	; (8001e90 <HAL_NVIC_EnableIRQ+0x14>)
 8001e8a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001e8e:	4770      	bx	lr
 8001e90:	e000e100 	.word	0xe000e100

08001e94 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	3801      	subs	r0, #1
 8001e96:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001e9a:	d20a      	bcs.n	8001eb2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea0:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea2:	21f0      	movs	r1, #240	; 0xf0
 8001ea4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ea8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eaa:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eac:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000e010 	.word	0xe000e010
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001ec2:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001ec4:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001ec6:	bf0c      	ite	eq
 8001ec8:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001ecc:	f022 0204 	bicne.w	r2, r2, #4
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e010 	.word	0xe000e010

08001ed8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8001eda:	4b08      	ldr	r3, [pc, #32]	; (8001efc <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001edc:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ee4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ee8:	f7ff ffd4 	bl	8001e94 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8001eec:	2200      	movs	r2, #0
 8001eee:	4621      	mov	r1, r4
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	f7ff ff8e 	bl	8001e14 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8001ef8:	2000      	movs	r0, #0
 8001efa:	bd10      	pop	{r4, pc}
 8001efc:	20000000 	.word	0x20000000

08001f00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f00:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_Init+0x30>)
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f0a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f12:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f1a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f1c:	2003      	movs	r0, #3
 8001f1e:	f7ff ff67 	bl	8001df0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f22:	200f      	movs	r0, #15
 8001f24:	f7ff ffd8 	bl	8001ed8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001f28:	f7fe fd2b 	bl	8000982 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	bd08      	pop	{r3, pc}
 8001f30:	40023c00 	.word	0x40023c00

08001f34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8001f34:	4a02      	ldr	r2, [pc, #8]	; (8001f40 <HAL_IncTick+0xc>)
 8001f36:	6813      	ldr	r3, [r2, #0]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	6013      	str	r3, [r2, #0]
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000338 	.word	0x20000338

08001f44 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001f44:	4b01      	ldr	r3, [pc, #4]	; (8001f4c <HAL_GetTick+0x8>)
 8001f46:	6818      	ldr	r0, [r3, #0]
}
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	20000338 	.word	0x20000338

08001f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8001f50:	b513      	push	{r0, r1, r4, lr}
 8001f52:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0U;
  tickstart = HAL_GetTick();
 8001f54:	f7ff fff6 	bl	8001f44 <HAL_GetTick>
 8001f58:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8001f5a:	f7ff fff3 	bl	8001f44 <HAL_GetTick>
 8001f5e:	9b01      	ldr	r3, [sp, #4]
 8001f60:	1b00      	subs	r0, r0, r4
 8001f62:	4298      	cmp	r0, r3
 8001f64:	d3f9      	bcc.n	8001f5a <HAL_Delay+0xa>
  {
  }
}
 8001f66:	b002      	add	sp, #8
 8001f68:	bd10      	pop	{r4, pc}
	...

08001f6c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f6c:	490f      	ldr	r1, [pc, #60]	; (8001fac <SystemInit+0x40>)
 8001f6e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001f72:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <SystemInit+0x44>)
 8001f7c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f7e:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001f80:	f042 0201 	orr.w	r2, r2, #1
 8001f84:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f86:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001f8e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f92:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001f94:	4a07      	ldr	r2, [pc, #28]	; (8001fb4 <SystemInit+0x48>)
 8001f96:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f9e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001fa0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001fa2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001fa6:	608b      	str	r3, [r1, #8]
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	e000ed00 	.word	0xe000ed00
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	24003010 	.word	0x24003010

08001fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ff0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001fbc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001fbe:	e003      	b.n	8001fc8 <LoopCopyDataInit>

08001fc0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001fc2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001fc4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001fc6:	3104      	adds	r1, #4

08001fc8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001fc8:	480b      	ldr	r0, [pc, #44]	; (8001ff8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001fca:	4b0c      	ldr	r3, [pc, #48]	; (8001ffc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001fcc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001fce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001fd0:	d3f6      	bcc.n	8001fc0 <CopyDataInit>
  ldr  r2, =_sbss
 8001fd2:	4a0b      	ldr	r2, [pc, #44]	; (8002000 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001fd4:	e002      	b.n	8001fdc <LoopFillZerobss>

08001fd6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001fd6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001fd8:	f842 3b04 	str.w	r3, [r2], #4

08001fdc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001fde:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001fe0:	d3f9      	bcc.n	8001fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001fe2:	f7ff ffc3 	bl	8001f6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fe6:	f000 f811 	bl	800200c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fea:	f7fe ff55 	bl	8000e98 <main>
  bx  lr    
 8001fee:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ff0:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8001ff4:	0800251c 	.word	0x0800251c
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ff8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ffc:	20000004 	.word	0x20000004
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002000:	20000004 	.word	0x20000004
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002004:	2000033c 	.word	0x2000033c

08002008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002008:	e7fe      	b.n	8002008 <ADC_IRQHandler>
	...

0800200c <__libc_init_array>:
 800200c:	b570      	push	{r4, r5, r6, lr}
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <__libc_init_array+0x3c>)
 8002010:	4c0e      	ldr	r4, [pc, #56]	; (800204c <__libc_init_array+0x40>)
 8002012:	1ae4      	subs	r4, r4, r3
 8002014:	10a4      	asrs	r4, r4, #2
 8002016:	2500      	movs	r5, #0
 8002018:	461e      	mov	r6, r3
 800201a:	42a5      	cmp	r5, r4
 800201c:	d004      	beq.n	8002028 <__libc_init_array+0x1c>
 800201e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002022:	4798      	blx	r3
 8002024:	3501      	adds	r5, #1
 8002026:	e7f8      	b.n	800201a <__libc_init_array+0xe>
 8002028:	f000 f816 	bl	8002058 <_init>
 800202c:	4c08      	ldr	r4, [pc, #32]	; (8002050 <__libc_init_array+0x44>)
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <__libc_init_array+0x48>)
 8002030:	1ae4      	subs	r4, r4, r3
 8002032:	10a4      	asrs	r4, r4, #2
 8002034:	2500      	movs	r5, #0
 8002036:	461e      	mov	r6, r3
 8002038:	42a5      	cmp	r5, r4
 800203a:	d004      	beq.n	8002046 <__libc_init_array+0x3a>
 800203c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002040:	4798      	blx	r3
 8002042:	3501      	adds	r5, #1
 8002044:	e7f8      	b.n	8002038 <__libc_init_array+0x2c>
 8002046:	bd70      	pop	{r4, r5, r6, pc}
 8002048:	08002514 	.word	0x08002514
 800204c:	08002514 	.word	0x08002514
 8002050:	08002518 	.word	0x08002518
 8002054:	08002514 	.word	0x08002514

08002058 <_init>:
 8002058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800205a:	bf00      	nop
 800205c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800205e:	bc08      	pop	{r3}
 8002060:	469e      	mov	lr, r3
 8002062:	4770      	bx	lr

08002064 <_fini>:
 8002064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002066:	bf00      	nop
 8002068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206a:	bc08      	pop	{r3}
 800206c:	469e      	mov	lr, r3
 800206e:	4770      	bx	lr
