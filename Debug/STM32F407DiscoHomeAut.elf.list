
STM32F407DiscoHomeAut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000205c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080021e4  080021e4  000121e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800221c  0800221c  0001221c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002220  08002220  00012220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08002224  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          000040dc  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200040e8  200040e8  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011f15  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000030d8  00000000  00000000  00031f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000067cd  00000000  00000000  00035029  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000b68  00000000  00000000  0003b7f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000e80  00000000  00000000  0003c360  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005ff5  00000000  00000000  0003d1e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00004737  00000000  00000000  000431d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007e  00000000  00000000  0004790c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001e64  00000000  00000000  0004798c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080021cc 	.word	0x080021cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080021cc 	.word	0x080021cc

080001c8 <USART1_IRQHandler>:
	#ifdef CONFIG_USE_PANEL_NODESMALL
	HAL_UART_IRQHandler(&ESP8266_UartHandle);
	#endif
	
	#if ( CONFIG_USE_PANEL_NODEMEDIUM || CONFIG_USE_PANEL_CENTERPANEL )
	HAL_UART_IRQHandler(&Debug_UartHandle);
 80001c8:	4801      	ldr	r0, [pc, #4]	; (80001d0 <USART1_IRQHandler+0x8>)
 80001ca:	f001 bac9 	b.w	8001760 <HAL_UART_IRQHandler>
 80001ce:	bf00      	nop
 80001d0:	20003e78 	.word	0x20003e78

080001d4 <USART2_IRQHandler>:

#if ( CONFIG_USE_PANEL_NODEMEDIUM || CONFIG_USE_PANEL_CENTERPANEL )
void USART2_IRQHandler(void)
{

	HAL_UART_IRQHandler(&ESP8266_UartHandle);
 80001d4:	4801      	ldr	r0, [pc, #4]	; (80001dc <USART2_IRQHandler+0x8>)
 80001d6:	f001 bac3 	b.w	8001760 <HAL_UART_IRQHandler>
 80001da:	bf00      	nop
 80001dc:	20004050 	.word	0x20004050

080001e0 <HAL_UART_TxCpltCallback>:
#endif



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80001e0:	b508      	push	{r3, lr}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80001e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80001e6:	f383 8811 	msr	BASEPRI, r3
 80001ea:	f3bf 8f6f 	isb	sy
 80001ee:	f3bf 8f4f 	dsb	sy
	(void)UartHandle;

	
	// Set transmission flag: trasfer complete	
	#ifdef CONFIG_USE_FREERTOS
	xSemaphoreGiveFromISR(DEBUG_USART_Tx_Semaphore,(BaseType_t *)NULL);	// TODO FREERTOS
 80001f2:	4b06      	ldr	r3, [pc, #24]	; (800020c <HAL_UART_TxCpltCallback+0x2c>)
 80001f4:	2100      	movs	r1, #0
 80001f6:	6818      	ldr	r0, [r3, #0]
 80001f8:	f000 feea 	bl	8000fd0 <xQueueGiveFromISR>
	//xSemaphoreGive(DEBUG_USART_Tx_Semaphore);	// TODO FREERTOS
	#endif
	
	USART_SendEnable_flag = ENABLE;	// sikeres kuldes
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <HAL_UART_TxCpltCallback+0x30>)
 80001fe:	2201      	movs	r2, #1
 8000200:	701a      	strb	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000202:	2300      	movs	r3, #0
 8000204:	f383 8811 	msr	BASEPRI, r3
 8000208:	bd08      	pop	{r3, pc}
 800020a:	bf00      	nop
 800020c:	20003fc0 	.word	0x20003fc0
 8000210:	20003eb8 	.word	0x20003eb8

08000214 <HAL_UART_RxCpltCallback>:
  * @note   This example shows a simple way to report end of IT Rx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000216:	4604      	mov	r4, r0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800021c:	f383 8811 	msr	BASEPRI, r3
 8000220:	f3bf 8f6f 	isb	sy
 8000224:	f3bf 8f4f 	dsb	sy
	#ifdef CONFIG_USE_FREERTOS
	taskDISABLE_INTERRUPTS();
	#endif

	#ifndef CONFIG_USE_PANEL_NODESMALL
	if ( ( UartHandle->Instance == DEBUG_USARTx ) && ( UartHandle == &Debug_UartHandle ) )
 8000228:	4b5f      	ldr	r3, [pc, #380]	; (80003a8 <HAL_UART_RxCpltCallback+0x194>)
 800022a:	6802      	ldr	r2, [r0, #0]
 800022c:	429a      	cmp	r2, r3
 800022e:	f040 8087 	bne.w	8000340 <HAL_UART_RxCpltCallback+0x12c>
 8000232:	4b5e      	ldr	r3, [pc, #376]	; (80003ac <HAL_UART_RxCpltCallback+0x198>)
 8000234:	4298      	cmp	r0, r3
 8000236:	f040 8083 	bne.w	8000340 <HAL_UART_RxCpltCallback+0x12c>
		// TODO: USART -TEST
		//uint8_t USART_ReceivedChar = BluetoothUartHandle.pRxBuffPtr[0];
		//(void)UartHandle;


		if ( MONITOR_CommandEnable )
 800023a:	4b5d      	ldr	r3, [pc, #372]	; (80003b0 <HAL_UART_RxCpltCallback+0x19c>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8000242:	2b00      	cmp	r3, #0
 8000244:	d070      	beq.n	8000328 <HAL_UART_RxCpltCallback+0x114>
		{
			// ESCAPE SEQUENCE
			if ( MONITOR_CommandEscapeStart_flag == 1 )
 8000246:	495b      	ldr	r1, [pc, #364]	; (80003b4 <HAL_UART_RxCpltCallback+0x1a0>)
 8000248:	780a      	ldrb	r2, [r1, #0]
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	2a01      	cmp	r2, #1
 800024e:	d105      	bne.n	800025c <HAL_UART_RxCpltCallback+0x48>
			{	// We are in escape sequence
				MONITOR_CommandEscapeStart_flag = 0;
 8000250:	2300      	movs	r3, #0
 8000252:	700b      	strb	r3, [r1, #0]
				MONITOR_CommandEscapeEnd_flag = 1;
 8000254:	4b58      	ldr	r3, [pc, #352]	; (80003b8 <HAL_UART_RxCpltCallback+0x1a4>)
						MONITOR_CommandActualEscape[MONITOR_CommandEscape_cnt++] = USART_ReceivedChar;
						MONITOR_CommandEscapeStart_flag = 0;
						MONITOR_CommandEscapeEnd_flag = 1;
					}
				*/
				HAL_UART_Receive_IT(&Debug_UartHandle, (uint8_t *)USART_RxBuffer, RXBUFFERSIZE);
 8000256:	4959      	ldr	r1, [pc, #356]	; (80003bc <HAL_UART_RxCpltCallback+0x1a8>)
		{
			// ESCAPE SEQUENCE
			if ( MONITOR_CommandEscapeStart_flag == 1 )
			{	// We are in escape sequence
				MONITOR_CommandEscapeStart_flag = 0;
				MONITOR_CommandEscapeEnd_flag = 1;
 8000258:	701a      	strb	r2, [r3, #0]
 800025a:	e05a      	b.n	8000312 <HAL_UART_RxCpltCallback+0xfe>

			}
			else	// No escape sequence
			{
				// An character received
				USART_ReceivedChar = USART_RxBuffer[0];	// TODO!
 800025c:	4b57      	ldr	r3, [pc, #348]	; (80003bc <HAL_UART_RxCpltCallback+0x1a8>)
 800025e:	4a58      	ldr	r2, [pc, #352]	; (80003c0 <HAL_UART_RxCpltCallback+0x1ac>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	7013      	strb	r3, [r2, #0]

				if ( USART_ReceivedChar  == '\x1B') {	// receive an Escape sequence
 8000264:	2b1b      	cmp	r3, #27
 8000266:	d108      	bne.n	800027a <HAL_UART_RxCpltCallback+0x66>
					MONITOR_CommandEscapeStart_flag = 1;
 8000268:	2201      	movs	r2, #1
 800026a:	700a      	strb	r2, [r1, #0]
					MONITOR_CommandActualEscape[0] = USART_ReceivedChar;
 800026c:	4955      	ldr	r1, [pc, #340]	; (80003c4 <HAL_UART_RxCpltCallback+0x1b0>)
 800026e:	f801 3b01 	strb.w	r3, [r1], #1
					MONITOR_CommandEscape_cnt = 1;
 8000272:	4b55      	ldr	r3, [pc, #340]	; (80003c8 <HAL_UART_RxCpltCallback+0x1b4>)
 8000274:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(UartHandle, &MONITOR_CommandActualEscape[1], 2);
 8000276:	2202      	movs	r2, #2
 8000278:	e04b      	b.n	8000312 <HAL_UART_RxCpltCallback+0xfe>
				}
				else
				{
					if ( USART_ReceivedChar  == '\r' )
 800027a:	2b0d      	cmp	r3, #13
 800027c:	d109      	bne.n	8000292 <HAL_UART_RxCpltCallback+0x7e>
					{		// receive Enter
						MONITOR_CommandReadable = 1;
 800027e:	4b53      	ldr	r3, [pc, #332]	; (80003cc <HAL_UART_RxCpltCallback+0x1b8>)
 8000280:	2201      	movs	r2, #1
 8000282:	701a      	strb	r2, [r3, #0]
						MONITOR_CommandActual[MONITOR_CommandLength] = '\0';
 8000284:	4b52      	ldr	r3, [pc, #328]	; (80003d0 <HAL_UART_RxCpltCallback+0x1bc>)
 8000286:	4a53      	ldr	r2, [pc, #332]	; (80003d4 <HAL_UART_RxCpltCallback+0x1c0>)
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	b2db      	uxtb	r3, r3
 800028c:	2100      	movs	r1, #0
 800028e:	54d1      	strb	r1, [r2, r3]
 8000290:	e03c      	b.n	800030c <HAL_UART_RxCpltCallback+0xf8>
					}
					else if ( USART_ReceivedChar  == USART_KEY_DELETE )
 8000292:	2b7f      	cmp	r3, #127	; 0x7f
 8000294:	d102      	bne.n	800029c <HAL_UART_RxCpltCallback+0x88>
					{	// In real world this is backspace	// PuTTy vs ZOC
						MONITOR_CommandReceivedBackspace = 1;
 8000296:	2201      	movs	r2, #1
 8000298:	4b4f      	ldr	r3, [pc, #316]	; (80003d8 <HAL_UART_RxCpltCallback+0x1c4>)
 800029a:	e036      	b.n	800030a <HAL_UART_RxCpltCallback+0xf6>
					}
					else
					{	// simple char for the command
						// Receive an char
						if ( MONITOR_CommandLength < MONITOR_MAX_COMMAND_LENGTH )	// shorted than max length?
 800029c:	4a4c      	ldr	r2, [pc, #304]	; (80003d0 <HAL_UART_RxCpltCallback+0x1bc>)
 800029e:	7811      	ldrb	r1, [r2, #0]
 80002a0:	29ff      	cmp	r1, #255	; 0xff
 80002a2:	4611      	mov	r1, r2
 80002a4:	d032      	beq.n	800030c <HAL_UART_RxCpltCallback+0xf8>
						{
							if ( MONITOR_CommandCursorPosition == MONITOR_CommandLength )
 80002a6:	484d      	ldr	r0, [pc, #308]	; (80003dc <HAL_UART_RxCpltCallback+0x1c8>)
 80002a8:	7806      	ldrb	r6, [r0, #0]
 80002aa:	7815      	ldrb	r5, [r2, #0]
 80002ac:	42ae      	cmp	r6, r5
 80002ae:	4607      	mov	r7, r0
 80002b0:	4d48      	ldr	r5, [pc, #288]	; (80003d4 <HAL_UART_RxCpltCallback+0x1c0>)
 80002b2:	d10c      	bne.n	80002ce <HAL_UART_RxCpltCallback+0xba>
							{	// CursorPosition = CommandLength		(end character)
								MONITOR_CommandActual[MONITOR_CommandLength] = USART_ReceivedChar ;
 80002b4:	7811      	ldrb	r1, [r2, #0]
 80002b6:	546b      	strb	r3, [r5, r1]
								MONITOR_CommandLength++;
 80002b8:	7813      	ldrb	r3, [r2, #0]
 80002ba:	3301      	adds	r3, #1
 80002bc:	b2db      	uxtb	r3, r3
 80002be:	7013      	strb	r3, [r2, #0]
								MONITOR_CommandCursorPosition++;
 80002c0:	7803      	ldrb	r3, [r0, #0]
 80002c2:	3301      	adds	r3, #1
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	7003      	strb	r3, [r0, #0]
								MONITOR_CommandReceivedLastChar = 1;
 80002c8:	2201      	movs	r2, #1
 80002ca:	4b45      	ldr	r3, [pc, #276]	; (80003e0 <HAL_UART_RxCpltCallback+0x1cc>)
 80002cc:	e01d      	b.n	800030a <HAL_UART_RxCpltCallback+0xf6>

							}
							else
							{	// CursorPosition < CommandLength		(inner character)
								MONITOR_CommandLength++;
 80002ce:	7812      	ldrb	r2, [r2, #0]
 80002d0:	3201      	adds	r2, #1
 80002d2:	b2d2      	uxtb	r2, r2
 80002d4:	700a      	strb	r2, [r1, #0]
								// copy
								for ( int i = MONITOR_CommandLength; i > MONITOR_CommandCursorPosition; i-- ) MONITOR_CommandActual[i] = MONITOR_CommandActual[i-1];
 80002d6:	780a      	ldrb	r2, [r1, #0]
 80002d8:	442a      	add	r2, r5
 80002da:	f897 c000 	ldrb.w	ip, [r7]
 80002de:	483f      	ldr	r0, [pc, #252]	; (80003dc <HAL_UART_RxCpltCallback+0x1c8>)
 80002e0:	4e3c      	ldr	r6, [pc, #240]	; (80003d4 <HAL_UART_RxCpltCallback+0x1c0>)
 80002e2:	ebc5 0e02 	rsb	lr, r5, r2
 80002e6:	45f4      	cmp	ip, lr
 80002e8:	da03      	bge.n	80002f2 <HAL_UART_RxCpltCallback+0xde>
 80002ea:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 80002ee:	7050      	strb	r0, [r2, #1]
 80002f0:	e7f3      	b.n	80002da <HAL_UART_RxCpltCallback+0xc6>
								MONITOR_CommandActual [ MONITOR_CommandCursorPosition ] = USART_ReceivedChar ;
 80002f2:	7802      	ldrb	r2, [r0, #0]
 80002f4:	54b3      	strb	r3, [r6, r2]
								MONITOR_CommandActual [ MONITOR_CommandLength ] = '\0';
 80002f6:	780b      	ldrb	r3, [r1, #0]
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	2200      	movs	r2, #0
 80002fc:	54f2      	strb	r2, [r6, r3]
								MONITOR_CommandCursorPosition++;
 80002fe:	7803      	ldrb	r3, [r0, #0]
 8000300:	3301      	adds	r3, #1
 8000302:	b2db      	uxtb	r3, r3
 8000304:	7003      	strb	r3, [r0, #0]
								MONITOR_CommandReceivedNotLastChar = 1;
 8000306:	4b37      	ldr	r3, [pc, #220]	; (80003e4 <HAL_UART_RxCpltCallback+0x1d0>)
 8000308:	2201      	movs	r2, #1
 800030a:	701a      	strb	r2, [r3, #0]
						else	// longer than max length ...
						{
						}

					}
					HAL_UART_Receive_IT(&Debug_UartHandle, (uint8_t *)USART_RxBuffer, RXBUFFERSIZE);
 800030c:	492b      	ldr	r1, [pc, #172]	; (80003bc <HAL_UART_RxCpltCallback+0x1a8>)
 800030e:	4827      	ldr	r0, [pc, #156]	; (80003ac <HAL_UART_RxCpltCallback+0x198>)
 8000310:	2201      	movs	r2, #1
 8000312:	f001 f9c6 	bl	80016a2 <HAL_UART_Receive_IT>
			
			// Transmission end semaphore / flag
			// Szemafor beallitasa:
			#ifdef CONFIG_USE_FREERTOS
			//xSemaphoreGive(DEBUG_Rx_Semaphore); // !! IMPORTANT !! ISR-bol nem szabad hasznalni!
			xSemaphoreGiveFromISR(DEBUG_USART_Rx_Semaphore,0);
 8000316:	4b34      	ldr	r3, [pc, #208]	; (80003e8 <HAL_UART_RxCpltCallback+0x1d4>)
 8000318:	2100      	movs	r1, #0
 800031a:	6818      	ldr	r0, [r3, #0]
 800031c:	f000 fe58 	bl	8000fd0 <xQueueGiveFromISR>
			#endif
			MONITOR_CommandEvent = 1;
 8000320:	4b32      	ldr	r3, [pc, #200]	; (80003ec <HAL_UART_RxCpltCallback+0x1d8>)
 8000322:	2201      	movs	r2, #1
 8000324:	701a      	strb	r2, [r3, #0]
 8000326:	e00b      	b.n	8000340 <HAL_UART_RxCpltCallback+0x12c>

		}
		else if ( MONITOR_RemoteControl )
 8000328:	4b31      	ldr	r3, [pc, #196]	; (80003f0 <HAL_UART_RxCpltCallback+0x1dc>)
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	b143      	cbz	r3, 8000340 <HAL_UART_RxCpltCallback+0x12c>
		{
			//MONITOR_RemoteControlCharacter = MONITOR_RemoteControlBuffer[0];	// USED at remoteControl, work!
			//MONITOR_RemoteControlCharacter = UartHandle->pRxBuffPtr[0]
			#ifdef CONFIG_USE_FREERTOS
			xSemaphoreGiveFromISR(DEBUG_USART_Rx_Semaphore,0); 
 800032e:	4b2e      	ldr	r3, [pc, #184]	; (80003e8 <HAL_UART_RxCpltCallback+0x1d4>)
 8000330:	6818      	ldr	r0, [r3, #0]
 8000332:	f000 fe4d 	bl	8000fd0 <xQueueGiveFromISR>
			#endif
			HAL_UART_Receive_IT(&Debug_UartHandle, (uint8_t *)MONITOR_RemoteControlBuffer, 1);	// USED at remoteControl, work!
 8000336:	2201      	movs	r2, #1
 8000338:	492e      	ldr	r1, [pc, #184]	; (80003f4 <HAL_UART_RxCpltCallback+0x1e0>)
 800033a:	4620      	mov	r0, r4
 800033c:	f001 f9b1 	bl	80016a2 <HAL_UART_Receive_IT>
		}
	}
	#endif	// #ifndef CONFIG_USE_PANEL_NODESMALL
	
	#ifdef CONFIG_ENABLE_ESP8266
	if ( UartHandle->Instance == ESP8266_USARTx && UartHandle == &ESP8266_UartHandle )
 8000340:	6822      	ldr	r2, [r4, #0]
 8000342:	4b2d      	ldr	r3, [pc, #180]	; (80003f8 <HAL_UART_RxCpltCallback+0x1e4>)
 8000344:	429a      	cmp	r2, r3
 8000346:	d12b      	bne.n	80003a0 <HAL_UART_RxCpltCallback+0x18c>
 8000348:	4b2c      	ldr	r3, [pc, #176]	; (80003fc <HAL_UART_RxCpltCallback+0x1e8>)
 800034a:	429c      	cmp	r4, r3
 800034c:	d128      	bne.n	80003a0 <HAL_UART_RxCpltCallback+0x18c>
	{
		
		#ifdef CONFIG_USE_FREERTOS
		if ( ESP8266_Receive_Mode_FixLength == 1)
 800034e:	4b2c      	ldr	r3, [pc, #176]	; (8000400 <HAL_UART_RxCpltCallback+0x1ec>)
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d105      	bne.n	8000362 <HAL_UART_RxCpltCallback+0x14e>
		{
			xSemaphoreGiveFromISR(ESP8266_USART_Rx_Semaphore,0);	
 8000356:	4b2b      	ldr	r3, [pc, #172]	; (8000404 <HAL_UART_RxCpltCallback+0x1f0>)
 8000358:	2100      	movs	r1, #0
 800035a:	6818      	ldr	r0, [r3, #0]
 800035c:	f000 fe38 	bl	8000fd0 <xQueueGiveFromISR>
 8000360:	e01e      	b.n	80003a0 <HAL_UART_RxCpltCallback+0x18c>
		else	// ESP8266_Receive_Mode_FixLength == 0
		{
			// Put to Buffer and receive next char
			//uint8_t receivedChar = Esp8266UartHandle.pRxBuffPtr[0];	// TODO: delete
			//ESP8266_RxBuffer[ESP8266_RxBuffer_Cnt++] = receivedChar;
			if ( ESP8266_ReceiveBuffer[ESP8266_ReceiveBuffer_Cnt] != '\n' || ESP8266_ReceiveBuffer_Cnt <= 4)
 8000362:	4d29      	ldr	r5, [pc, #164]	; (8000408 <HAL_UART_RxCpltCallback+0x1f4>)
 8000364:	4e29      	ldr	r6, [pc, #164]	; (800040c <HAL_UART_RxCpltCallback+0x1f8>)
 8000366:	782b      	ldrb	r3, [r5, #0]
 8000368:	5cf2      	ldrb	r2, [r6, r3]
 800036a:	2a0a      	cmp	r2, #10
 800036c:	4631      	mov	r1, r6
 800036e:	462a      	mov	r2, r5
 8000370:	d101      	bne.n	8000376 <HAL_UART_RxCpltCallback+0x162>
 8000372:	2b04      	cmp	r3, #4
 8000374:	d806      	bhi.n	8000384 <HAL_UART_RxCpltCallback+0x170>
			{
				ESP8266_ReceiveBuffer_Cnt++;
 8000376:	3301      	adds	r3, #1
 8000378:	b2db      	uxtb	r3, r3
 800037a:	7013      	strb	r3, [r2, #0]
				HAL_UART_Receive_IT(&ESP8266_UartHandle,(uint8_t *)&ESP8266_ReceiveBuffer[ESP8266_ReceiveBuffer_Cnt],1);
 800037c:	4419      	add	r1, r3
 800037e:	2201      	movs	r2, #1
 8000380:	481e      	ldr	r0, [pc, #120]	; (80003fc <HAL_UART_RxCpltCallback+0x1e8>)
 8000382:	e00b      	b.n	800039c <HAL_UART_RxCpltCallback+0x188>
			}
			else
			{
				// received an '\n'
				xSemaphoreGiveFromISR(ESP8266_USART_Rx_Semaphore,0);
 8000384:	4b1f      	ldr	r3, [pc, #124]	; (8000404 <HAL_UART_RxCpltCallback+0x1f0>)
 8000386:	2100      	movs	r1, #0
 8000388:	6818      	ldr	r0, [r3, #0]
 800038a:	f000 fe21 	bl	8000fd0 <xQueueGiveFromISR>
				ESP8266_ReceiveBuffer_Cnt++;
 800038e:	7829      	ldrb	r1, [r5, #0]
 8000390:	3101      	adds	r1, #1
 8000392:	b2c9      	uxtb	r1, r1
 8000394:	7029      	strb	r1, [r5, #0]
				HAL_UART_Receive_IT(&ESP8266_UartHandle,(uint8_t *)&ESP8266_ReceiveBuffer[ESP8266_ReceiveBuffer_Cnt],1);
 8000396:	2201      	movs	r2, #1
 8000398:	4431      	add	r1, r6
 800039a:	4620      	mov	r0, r4
 800039c:	f001 f981 	bl	80016a2 <HAL_UART_Receive_IT>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80003a0:	2300      	movs	r3, #0
 80003a2:	f383 8811 	msr	BASEPRI, r3
 80003a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003a8:	40011000 	.word	0x40011000
 80003ac:	20003e78 	.word	0x20003e78
 80003b0:	20000028 	.word	0x20000028
 80003b4:	20003fd6 	.word	0x20003fd6
 80003b8:	20003fd3 	.word	0x20003fd3
 80003bc:	20003d74 	.word	0x20003d74
 80003c0:	20003d75 	.word	0x20003d75
 80003c4:	20003fd0 	.word	0x20003fd0
 80003c8:	20003fd5 	.word	0x20003fd5
 80003cc:	20003ebe 	.word	0x20003ebe
 80003d0:	20003ebd 	.word	0x20003ebd
 80003d4:	20003ec1 	.word	0x20003ec1
 80003d8:	20003ebf 	.word	0x20003ebf
 80003dc:	20003fc4 	.word	0x20003fc4
 80003e0:	20003fd4 	.word	0x20003fd4
 80003e4:	20003ec0 	.word	0x20003ec0
 80003e8:	20003fcc 	.word	0x20003fcc
 80003ec:	20003ebc 	.word	0x20003ebc
 80003f0:	20000029 	.word	0x20000029
 80003f4:	20003fc5 	.word	0x20003fc5
 80003f8:	40004400 	.word	0x40004400
 80003fc:	20004050 	.word	0x20004050
 8000400:	20000000 	.word	0x20000000
 8000404:	20004090 	.word	0x20004090
 8000408:	2000002b 	.word	0x2000002b
 800040c:	2000409c 	.word	0x2000409c

08000410 <HAL_UART_ErrorCallback>:

// !! IMPORTANT !! Hiba eseten ebbe az ErrorCallback-be jutunk.
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{

	if (huart->Instance == USART1 )
 8000410:	6803      	ldr	r3, [r0, #0]
 8000412:	4a1c      	ldr	r2, [pc, #112]	; (8000484 <HAL_UART_ErrorCallback+0x74>)
 8000414:	4293      	cmp	r3, r2



// !! IMPORTANT !! Hiba eseten ebbe az ErrorCallback-be jutunk.
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8000416:	b510      	push	{r4, lr}

	if (huart->Instance == USART1 )
 8000418:	d117      	bne.n	800044a <HAL_UART_ErrorCallback+0x3a>

		//__HAL_UART_RESET_HANDLE_STATE(&BluetoothUartHandle);
		//__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
		//__HAL_UART_CLEAR_FLAG(&BluetoothUartHandle, UART_FLAG_CTS | UART_FLAG_RXNE | UART_FLAG_TXE | UART_FLAG_TC | UART_FLAG_ORE | UART_FLAG_NE | UART_FLAG_FE | UART_FLAG_PE);

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800041a:	2400      	movs	r4, #0
		huart->gState = HAL_UART_STATE_READY;
 800041c:	2320      	movs	r3, #32

		//__HAL_UART_RESET_HANDLE_STATE(&BluetoothUartHandle);
		//__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
		//__HAL_UART_CLEAR_FLAG(&BluetoothUartHandle, UART_FLAG_CTS | UART_FLAG_RXNE | UART_FLAG_TXE | UART_FLAG_TC | UART_FLAG_ORE | UART_FLAG_NE | UART_FLAG_FE | UART_FLAG_PE);

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800041e:	63c4      	str	r4, [r0, #60]	; 0x3c
		huart->gState = HAL_UART_STATE_READY;
		huart->TxXferCount = 0;
 8000420:	84c4      	strh	r4, [r0, #38]	; 0x26
		//__HAL_UART_RESET_HANDLE_STATE(&BluetoothUartHandle);
		//__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
		//__HAL_UART_CLEAR_FLAG(&BluetoothUartHandle, UART_FLAG_CTS | UART_FLAG_RXNE | UART_FLAG_TXE | UART_FLAG_TC | UART_FLAG_ORE | UART_FLAG_NE | UART_FLAG_FE | UART_FLAG_PE);

		huart->ErrorCode = HAL_UART_ERROR_NONE;
		huart->gState = HAL_UART_STATE_READY;
 8000422:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		huart->TxXferCount = 0;
		huart->TxXferSize = 0;
 8000426:	8484      	strh	r4, [r0, #36]	; 0x24
		huart->RxXferCount = 0;
 8000428:	85c4      	strh	r4, [r0, #46]	; 0x2e
		huart->RxXferSize = 0;
 800042a:	8584      	strh	r4, [r0, #44]	; 0x2c

		//__HAL_UART_FLUSH_DRREGISTER(&BluetoothUartHandle);
		#if ( CONFIG_USE_PANEL_NODEMEDIUM || CONFIG_USE_PANEL_CENTERPANEL )
		
		#ifdef CONFIG_ENABLE_DEBUGUSART
		HAL_UART_Receive_IT(&Debug_UartHandle, (uint8_t *)USART_RxBuffer, RXBUFFERSIZE);
 800042c:	2201      	movs	r2, #1
 800042e:	4916      	ldr	r1, [pc, #88]	; (8000488 <HAL_UART_ErrorCallback+0x78>)
 8000430:	4816      	ldr	r0, [pc, #88]	; (800048c <HAL_UART_ErrorCallback+0x7c>)
 8000432:	f001 f936 	bl	80016a2 <HAL_UART_Receive_IT>
		HAL_UART_Transmit_IT(&Debug_UartHandle,(uint8_t *)"$",1);
 8000436:	2201      	movs	r2, #1
 8000438:	4915      	ldr	r1, [pc, #84]	; (8000490 <HAL_UART_ErrorCallback+0x80>)
 800043a:	4814      	ldr	r0, [pc, #80]	; (800048c <HAL_UART_ErrorCallback+0x7c>)
 800043c:	f001 f912 	bl	8001664 <HAL_UART_Transmit_IT>
		#endif
		
		#ifdef CONFIG_USE_FREERTOS
		//xSemaphoreGiveFromISR(DEBUG_USART_Rx_Semaphore,0);
		if ( DEBUG_USART_Tx_Semaphore != NULL )
 8000440:	4b14      	ldr	r3, [pc, #80]	; (8000494 <HAL_UART_ErrorCallback+0x84>)
 8000442:	6818      	ldr	r0, [r3, #0]
 8000444:	b1e0      	cbz	r0, 8000480 <HAL_UART_ErrorCallback+0x70>
		{
			xSemaphoreGiveFromISR(DEBUG_USART_Tx_Semaphore,0);
 8000446:	4621      	mov	r1, r4
 8000448:	e012      	b.n	8000470 <HAL_UART_ErrorCallback+0x60>
		#endif
		

	}
	#if ( CONFIG_USE_PANEL_NODEMEDIUM || CONFIG_USE_PANEL_CENTERPANEL )
	else if (huart->Instance == USART2 )
 800044a:	4a13      	ldr	r2, [pc, #76]	; (8000498 <HAL_UART_ErrorCallback+0x88>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d113      	bne.n	8000478 <HAL_UART_ErrorCallback+0x68>
		// TODO:
		// neha kapunk ORE errort.

		//__HAL_UART_RESET_HANDLE_STATE(&BluetoothUartHandle);
		//__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
		__HAL_UART_CLEAR_FLAG(&ESP8266_UartHandle, UART_FLAG_CTS | UART_FLAG_RXNE | UART_FLAG_TXE | UART_FLAG_TC | UART_FLAG_ORE | UART_FLAG_NE | UART_FLAG_FE | UART_FLAG_PE);
 8000450:	4b12      	ldr	r3, [pc, #72]	; (800049c <HAL_UART_ErrorCallback+0x8c>)
 8000452:	4a13      	ldr	r2, [pc, #76]	; (80004a0 <HAL_UART_ErrorCallback+0x90>)
 8000454:	681b      	ldr	r3, [r3, #0]

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000456:	2100      	movs	r1, #0
		// TODO:
		// neha kapunk ORE errort.

		//__HAL_UART_RESET_HANDLE_STATE(&BluetoothUartHandle);
		//__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
		__HAL_UART_CLEAR_FLAG(&ESP8266_UartHandle, UART_FLAG_CTS | UART_FLAG_RXNE | UART_FLAG_TXE | UART_FLAG_TC | UART_FLAG_ORE | UART_FLAG_NE | UART_FLAG_FE | UART_FLAG_PE);
 8000458:	601a      	str	r2, [r3, #0]

		huart->ErrorCode = HAL_UART_ERROR_NONE;
		huart->gState = HAL_UART_STATE_READY;
 800045a:	2320      	movs	r3, #32

		//__HAL_UART_RESET_HANDLE_STATE(&BluetoothUartHandle);
		//__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
		__HAL_UART_CLEAR_FLAG(&ESP8266_UartHandle, UART_FLAG_CTS | UART_FLAG_RXNE | UART_FLAG_TXE | UART_FLAG_TC | UART_FLAG_ORE | UART_FLAG_NE | UART_FLAG_FE | UART_FLAG_PE);

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 800045c:	63c1      	str	r1, [r0, #60]	; 0x3c
		huart->gState = HAL_UART_STATE_READY;
 800045e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
		huart->TxXferCount = 0;
		huart->TxXferSize = 0;
		huart->RxXferCount = 0;
		huart->RxXferSize = 0;
		
		if ( ESP8266_USART_Rx_Semaphore != NULL )
 8000462:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <HAL_UART_ErrorCallback+0x94>)
		//__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE);
		__HAL_UART_CLEAR_FLAG(&ESP8266_UartHandle, UART_FLAG_CTS | UART_FLAG_RXNE | UART_FLAG_TXE | UART_FLAG_TC | UART_FLAG_ORE | UART_FLAG_NE | UART_FLAG_FE | UART_FLAG_PE);

		huart->ErrorCode = HAL_UART_ERROR_NONE;
		huart->gState = HAL_UART_STATE_READY;
		huart->TxXferCount = 0;
 8000464:	84c1      	strh	r1, [r0, #38]	; 0x26
		huart->TxXferSize = 0;
 8000466:	8481      	strh	r1, [r0, #36]	; 0x24
		huart->RxXferCount = 0;
 8000468:	85c1      	strh	r1, [r0, #46]	; 0x2e
		huart->RxXferSize = 0;
 800046a:	8581      	strh	r1, [r0, #44]	; 0x2c
		
		if ( ESP8266_USART_Rx_Semaphore != NULL )
 800046c:	6818      	ldr	r0, [r3, #0]
 800046e:	b138      	cbz	r0, 8000480 <HAL_UART_ErrorCallback+0x70>
	{
		Error_Handler();
	}
	
	return;
}
 8000470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		huart->RxXferCount = 0;
		huart->RxXferSize = 0;
		
		if ( ESP8266_USART_Rx_Semaphore != NULL )
		{
			xSemaphoreGiveFromISR(ESP8266_USART_Rx_Semaphore,0);
 8000474:	f000 bdac 	b.w	8000fd0 <xQueueGiveFromISR>
	{
		Error_Handler();
	}
	
	return;
}
 8000478:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	}	
	#endif
	else
	{
		Error_Handler();
 800047c:	f000 b9b8 	b.w	80007f0 <Error_Handler>
 8000480:	bd10      	pop	{r4, pc}
 8000482:	bf00      	nop
 8000484:	40011000 	.word	0x40011000
 8000488:	20003d74 	.word	0x20003d74
 800048c:	20003e78 	.word	0x20003e78
 8000490:	080021f8 	.word	0x080021f8
 8000494:	20003fc0 	.word	0x20003fc0
 8000498:	40004400 	.word	0x40004400
 800049c:	20004050 	.word	0x20004050
 80004a0:	fffffd10 	.word	0xfffffd10
 80004a4:	20004090 	.word	0x20004090

080004a8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80004a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004aa:	f001 fe03 	bl	80020b4 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  osSystickHandler();
 80004b2:	f001 b8c0 	b.w	8001636 <osSystickHandler>

080004b6 <HAL_MspInit>:

/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b6:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004b8:	2003      	movs	r0, #3
 80004ba:	f001 fd65 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	4611      	mov	r1, r2
 80004c2:	f06f 000b 	mvn.w	r0, #11
 80004c6:	f001 fd71 	bl	8001fac <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80004ca:	2200      	movs	r2, #0
 80004cc:	4611      	mov	r1, r2
 80004ce:	f06f 000a 	mvn.w	r0, #10
 80004d2:	f001 fd6b 	bl	8001fac <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80004d6:	2200      	movs	r2, #0
 80004d8:	4611      	mov	r1, r2
 80004da:	f06f 0009 	mvn.w	r0, #9
 80004de:	f001 fd65 	bl	8001fac <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80004e2:	2200      	movs	r2, #0
 80004e4:	4611      	mov	r1, r2
 80004e6:	f06f 0004 	mvn.w	r0, #4
 80004ea:	f001 fd5f 	bl	8001fac <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80004ee:	2200      	movs	r2, #0
 80004f0:	4611      	mov	r1, r2
 80004f2:	f06f 0003 	mvn.w	r0, #3
 80004f6:	f001 fd59 	bl	8001fac <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004fa:	2200      	movs	r2, #0
 80004fc:	210f      	movs	r1, #15
 80004fe:	f06f 0001 	mvn.w	r0, #1
 8000502:	f001 fd53 	bl	8001fac <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000506:	2200      	movs	r2, #0
 8000508:	210f      	movs	r1, #15
 800050a:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800050e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8000512:	f001 bd4b 	b.w	8001fac <HAL_NVIC_SetPriority>

08000516 <StartDefaultTask>:

/* USER CODE END 4 */

/* StartDefaultTask function */
void StartDefaultTask(void const * argument)
{
 8000516:	b508      	push	{r3, lr}

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000518:	2001      	movs	r0, #1
 800051a:	f001 f884 	bl	8001626 <osDelay>
 800051e:	e7fb      	b.n	8000518 <StartDefaultTask+0x2>

08000520 <SystemClock_Config>:
}

/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	b094      	sub	sp, #80	; 0x50

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000524:	2300      	movs	r3, #0
 8000526:	4a27      	ldr	r2, [pc, #156]	; (80005c4 <SystemClock_Config+0xa4>)
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800052c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000530:	6411      	str	r1, [r2, #64]	; 0x40
 8000532:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000534:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000538:	9201      	str	r2, [sp, #4]
 800053a:	9a01      	ldr	r2, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	4a22      	ldr	r2, [pc, #136]	; (80005c8 <SystemClock_Config+0xa8>)
 800053e:	9302      	str	r3, [sp, #8]
 8000540:	6811      	ldr	r1, [r2, #0]
 8000542:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8000546:	6011      	str	r1, [r2, #0]
 8000548:	6812      	ldr	r2, [r2, #0]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800054a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000550:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000552:	2308      	movs	r3, #8
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000554:	9a02      	ldr	r2, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000556:	9310      	str	r3, [sp, #64]	; 0x40
  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 50;
 800055a:	2332      	movs	r3, #50	; 0x32

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800055c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800055e:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000560:	9311      	str	r3, [sp, #68]	; 0x44

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8000562:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 50;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000564:	2307      	movs	r3, #7
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 50;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000566:	2604      	movs	r6, #4
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000568:	a808      	add	r0, sp, #32

  __HAL_RCC_PWR_CLK_ENABLE();

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800056a:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800056c:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 50;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000570:	9612      	str	r6, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000572:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000574:	f001 f99c 	bl	80018b0 <HAL_RCC_OscConfig>
 8000578:	4601      	mov	r1, r0
 800057a:	b100      	cbz	r0, 800057e <SystemClock_Config+0x5e>
 800057c:	e7fe      	b.n	800057c <SystemClock_Config+0x5c>

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800057e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000582:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8000584:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000586:	250f      	movs	r5, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000588:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800058c:	a803      	add	r0, sp, #12
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800058e:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000590:	9503      	str	r5, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000592:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000594:	f001 fb32 	bl	8001bfc <HAL_RCC_ClockConfig>
 8000598:	4604      	mov	r4, r0
 800059a:	b100      	cbz	r0, 800059e <SystemClock_Config+0x7e>
 800059c:	e7fe      	b.n	800059c <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800059e:	f001 fbe1 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 80005a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80005aa:	f001 fd33 	bl	8002014 <HAL_SYSTICK_Config>

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80005ae:	4630      	mov	r0, r6
 80005b0:	f001 fd46 	bl	8002040 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 80005b4:	4622      	mov	r2, r4
 80005b6:	4629      	mov	r1, r5
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f001 fcf6 	bl	8001fac <HAL_NVIC_SetPriority>
}
 80005c0:	b014      	add	sp, #80	; 0x50
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 80005cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005d0:	b08c      	sub	sp, #48	; 0x30
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005d2:	2400      	movs	r4, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f001 fd54 	bl	8002080 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f7ff ffa2 	bl	8000520 <SystemClock_Config>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005dc:	4b7b      	ldr	r3, [pc, #492]	; (80007cc <main+0x200>)
 80005de:	9401      	str	r4, [sp, #4]
 80005e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80005e2:	487b      	ldr	r0, [pc, #492]	; (80007d0 <main+0x204>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005e4:	f8df 8204 	ldr.w	r8, [pc, #516]	; 80007ec <main+0x220>
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005e8:	f042 0210 	orr.w	r2, r2, #16
 80005ec:	631a      	str	r2, [r3, #48]	; 0x30
 80005ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005f0:	f002 0210 	and.w	r2, r2, #16
 80005f4:	9201      	str	r2, [sp, #4]
 80005f6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f8:	9402      	str	r4, [sp, #8]
 80005fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005fc:	f042 0204 	orr.w	r2, r2, #4
 8000600:	631a      	str	r2, [r3, #48]	; 0x30
 8000602:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000604:	f002 0204 	and.w	r2, r2, #4
 8000608:	9202      	str	r2, [sp, #8]
 800060a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800060c:	9403      	str	r4, [sp, #12]
 800060e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000610:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000614:	631a      	str	r2, [r3, #48]	; 0x30
 8000616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000618:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800061c:	9203      	str	r2, [sp, #12]
 800061e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000620:	9404      	str	r4, [sp, #16]
 8000622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000624:	f042 0201 	orr.w	r2, r2, #1
 8000628:	631a      	str	r2, [r3, #48]	; 0x30
 800062a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062c:	f002 0201 	and.w	r2, r2, #1
 8000630:	9204      	str	r2, [sp, #16]
 8000632:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000634:	9405      	str	r4, [sp, #20]
 8000636:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000638:	f042 0202 	orr.w	r2, r2, #2
 800063c:	631a      	str	r2, [r3, #48]	; 0x30
 800063e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000640:	f002 0202 	and.w	r2, r2, #2
 8000644:	9205      	str	r2, [sp, #20]
 8000646:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000648:	9406      	str	r4, [sp, #24]
 800064a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800064c:	f042 0208 	orr.w	r2, r2, #8
 8000650:	631a      	str	r2, [r3, #48]	; 0x30
 8000652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000654:	f003 0308 	and.w	r3, r3, #8
 8000658:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800065a:	4622      	mov	r2, r4
 800065c:	2108      	movs	r1, #8
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800065e:	9b06      	ldr	r3, [sp, #24]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000660:	f001 fc6c 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	4611      	mov	r1, r2
 8000668:	485a      	ldr	r0, [pc, #360]	; (80007d4 <main+0x208>)
 800066a:	f001 fc67 	bl	8001f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800066e:	4622      	mov	r2, r4
 8000670:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000674:	4858      	ldr	r0, [pc, #352]	; (80007d8 <main+0x20c>)
 8000676:	f001 fc61 	bl	8001f3c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2601      	movs	r6, #1
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800067c:	2508      	movs	r5, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800067e:	a907      	add	r1, sp, #28
 8000680:	4853      	ldr	r0, [pc, #332]	; (80007d0 <main+0x204>)
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000682:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000686:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800068a:	f001 fb71 	bl	8001d70 <HAL_GPIO_Init>
  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800068e:	a907      	add	r1, sp, #28
 8000690:	4850      	ldr	r0, [pc, #320]	; (80007d4 <main+0x208>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000692:	9607      	str	r6, [sp, #28]
  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000694:	2705      	movs	r7, #5
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000696:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000698:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800069c:	f001 fb68 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80006a0:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006a2:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2502      	movs	r5, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006a6:	484b      	ldr	r0, [pc, #300]	; (80007d4 <main+0x208>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ac:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006ae:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006b0:	f001 fb5e 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006b4:	a907      	add	r1, sp, #28
 80006b6:	4849      	ldr	r0, [pc, #292]	; (80007dc <main+0x210>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006b8:	9607      	str	r6, [sp, #28]
  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006ba:	f04f 0a06 	mov.w	sl, #6
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006be:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006c4:	f001 fb54 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006c8:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ca:	a907      	add	r1, sp, #28
 80006cc:	4843      	ldr	r0, [pc, #268]	; (80007dc <main+0x210>)
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80006ce:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d0:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80006d6:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006da:	f001 fb49 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006de:	23e0      	movs	r3, #224	; 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e0:	a907      	add	r1, sp, #28
 80006e2:	483e      	ldr	r0, [pc, #248]	; (80007dc <main+0x210>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80006e4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006e8:	f04f 0904 	mov.w	r9, #4
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ee:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006f0:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f2:	f001 fb3d 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80006f6:	a907      	add	r1, sp, #28
 80006f8:	4839      	ldr	r0, [pc, #228]	; (80007e0 <main+0x214>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80006fa:	f8cd 901c 	str.w	r9, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fe:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000702:	f001 fb35 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000706:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800070a:	a907      	add	r1, sp, #28
 800070c:	4834      	ldr	r0, [pc, #208]	; (80007e0 <main+0x214>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800070e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000710:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000716:	970b      	str	r7, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000718:	f001 fb2a 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800071c:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000720:	a907      	add	r1, sp, #28
 8000722:	482d      	ldr	r0, [pc, #180]	; (80007d8 <main+0x20c>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8000724:	9307      	str	r3, [sp, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000726:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800072c:	f001 fb20 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 I2S3_SCK_Pin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 8000730:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000734:	a907      	add	r1, sp, #28
 8000736:	4827      	ldr	r0, [pc, #156]	; (80007d4 <main+0x208>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

  /*Configure GPIO pins : PC7 I2S3_SCK_Pin PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|I2S3_SCK_Pin|GPIO_PIN_12;
 8000738:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000740:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000744:	f001 fb14 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000748:	f44f 7300 	mov.w	r3, #512	; 0x200
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800074c:	a907      	add	r1, sp, #28
 800074e:	4823      	ldr	r0, [pc, #140]	; (80007dc <main+0x210>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000750:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000756:	f001 fb0b 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800075a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800075e:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000760:	a907      	add	r1, sp, #28
  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000762:	230a      	movs	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000764:	481d      	ldr	r0, [pc, #116]	; (80007dc <main+0x210>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000766:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000768:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076e:	f001 faff 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000772:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000774:	a907      	add	r1, sp, #28
 8000776:	4818      	ldr	r0, [pc, #96]	; (80007d8 <main+0x20c>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000778:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800077a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800077e:	f001 faf7 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000782:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000786:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000788:	9609      	str	r6, [sp, #36]	; 0x24
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800078a:	2312      	movs	r3, #18
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	a907      	add	r1, sp, #28
 800078e:	4814      	ldr	r0, [pc, #80]	; (80007e0 <main+0x214>)
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000790:	4e14      	ldr	r6, [pc, #80]	; (80007e4 <main+0x218>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000792:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000796:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079a:	f001 fae9 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800079e:	a907      	add	r1, sp, #28
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <main+0x204>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80007a2:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007a4:	f8cd 8020 	str.w	r8, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f001 fae1 	bl	8001d70 <HAL_GPIO_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80007ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80007b0:	ad07      	add	r5, sp, #28
 80007b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b4:	6833      	ldr	r3, [r6, #0]
 80007b6:	602b      	str	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80007b8:	4621      	mov	r1, r4
 80007ba:	a807      	add	r0, sp, #28
 80007bc:	f000 ff17 	bl	80015ee <osThreadCreate>
 80007c0:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <main+0x21c>)
 80007c2:	6018      	str	r0, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
 

  /* Start scheduler */
  osKernelStart();
 80007c4:	f000 ff0e 	bl	80015e4 <osKernelStart>
 80007c8:	e7fe      	b.n	80007c8 <main+0x1fc>
 80007ca:	bf00      	nop
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40020800 	.word	0x40020800
 80007d8:	40020c00 	.word	0x40020c00
 80007dc:	40020000 	.word	0x40020000
 80007e0:	40020400 	.word	0x40020400
 80007e4:	080021e4 	.word	0x080021e4
 80007e8:	20003fd8 	.word	0x20003fd8
 80007ec:	10120000 	.word	0x10120000

080007f0 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler>

080007f2 <EXTI0_IRQHandler>:
// Left		PC9


void EXTI0_IRQHandler(void)
{
	HAL_GPIO_EXTI_IRQHandler(BUTTON_RIGHT_GPIO_PIN);
 80007f2:	2001      	movs	r0, #1
 80007f4:	f001 bbaa 	b.w	8001f4c <HAL_GPIO_EXTI_IRQHandler>

080007f8 <EXTI9_5_IRQHandler>:
}


void EXTI9_5_IRQHandler(void)
{
 80007f8:	b508      	push	{r3, lr}
	// 7-8-9
	
	if ( HAL_GPIO_ReadPin(BUTTON_LEFT_GPIO_PORT,BUTTON_LEFT_GPIO_PIN) == GPIO_PIN_SET)
 80007fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007fe:	4810      	ldr	r0, [pc, #64]	; (8000840 <EXTI9_5_IRQHandler+0x48>)
 8000800:	f001 fb96 	bl	8001f30 <HAL_GPIO_ReadPin>
 8000804:	2801      	cmp	r0, #1
 8000806:	d103      	bne.n	8000810 <EXTI9_5_IRQHandler+0x18>
	{
		HAL_GPIO_EXTI_IRQHandler(BUTTON_LEFT_GPIO_PIN);
 8000808:	f44f 7000 	mov.w	r0, #512	; 0x200
 800080c:	f001 fb9e 	bl	8001f4c <HAL_GPIO_EXTI_IRQHandler>
	}
	if (HAL_GPIO_ReadPin(BUTTON_UP_GPIO_PORT,BUTTON_UP_GPIO_PIN) == GPIO_PIN_SET)
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	480b      	ldr	r0, [pc, #44]	; (8000840 <EXTI9_5_IRQHandler+0x48>)
 8000814:	f001 fb8c 	bl	8001f30 <HAL_GPIO_ReadPin>
 8000818:	2801      	cmp	r0, #1
 800081a:	d102      	bne.n	8000822 <EXTI9_5_IRQHandler+0x2a>
	{
		HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_GPIO_PIN);
 800081c:	2080      	movs	r0, #128	; 0x80
 800081e:	f001 fb95 	bl	8001f4c <HAL_GPIO_EXTI_IRQHandler>
	}		
	if (HAL_GPIO_ReadPin(BUTTON_DOWN_GPIO_PORT,BUTTON_DOWN_GPIO_PIN) == GPIO_PIN_SET)
 8000822:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <EXTI9_5_IRQHandler+0x48>)
 8000828:	f001 fb82 	bl	8001f30 <HAL_GPIO_ReadPin>
 800082c:	2801      	cmp	r0, #1
 800082e:	d105      	bne.n	800083c <EXTI9_5_IRQHandler+0x44>
	{
		HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_GPIO_PIN);
 8000830:	f44f 7080 	mov.w	r0, #256	; 0x100
	}
}
 8000834:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	{
		HAL_GPIO_EXTI_IRQHandler(BUTTON_UP_GPIO_PIN);
	}		
	if (HAL_GPIO_ReadPin(BUTTON_DOWN_GPIO_PORT,BUTTON_DOWN_GPIO_PIN) == GPIO_PIN_SET)
	{
		HAL_GPIO_EXTI_IRQHandler(BUTTON_DOWN_GPIO_PIN);
 8000838:	f001 bb88 	b.w	8001f4c <HAL_GPIO_EXTI_IRQHandler>
 800083c:	bd08      	pop	{r3, pc}
 800083e:	bf00      	nop
 8000840:	40020800 	.word	0x40020800

08000844 <HAL_GPIO_EXTI_Callback>:
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if (GPIO_Pin == BUTTON_UP_GPIO_PIN)
 8000844:	2880      	cmp	r0, #128	; 0x80
  * @brief EXTI line detection callbacks
  * @param GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000846:	b508      	push	{r3, lr}
 8000848:	4601      	mov	r1, r0
	if (GPIO_Pin == BUTTON_UP_GPIO_PIN)
 800084a:	d109      	bne.n	8000860 <HAL_GPIO_EXTI_Callback+0x1c>
	{
		// Toggle LED
		LED_RED_TOGGLE();
 800084c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000850:	4816      	ldr	r0, [pc, #88]	; (80008ac <HAL_GPIO_EXTI_Callback+0x68>)
 8000852:	f001 fb77 	bl	8001f44 <HAL_GPIO_TogglePin>
		BUTTON_Clicked |= ( ( 1 << PressedButton_Pressed) | ( 1 << PressedButton_Up ) );
 8000856:	4a16      	ldr	r2, [pc, #88]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000858:	7813      	ldrb	r3, [r2, #0]
 800085a:	f043 0303 	orr.w	r3, r3, #3
 800085e:	e022      	b.n	80008a6 <HAL_GPIO_EXTI_Callback+0x62>
	}
	if (GPIO_Pin == BUTTON_DOWN_GPIO_PIN)
 8000860:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8000864:	d107      	bne.n	8000876 <HAL_GPIO_EXTI_Callback+0x32>
	{
		// Toggle LED
		LED_RED_TOGGLE();
 8000866:	4811      	ldr	r0, [pc, #68]	; (80008ac <HAL_GPIO_EXTI_Callback+0x68>)
 8000868:	f001 fb6c 	bl	8001f44 <HAL_GPIO_TogglePin>
		BUTTON_Clicked |= ( ( 1 << PressedButton_Pressed) | ( 1 << PressedButton_Down ) );
 800086c:	4a10      	ldr	r2, [pc, #64]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x6c>)
 800086e:	7813      	ldrb	r3, [r2, #0]
 8000870:	f043 0305 	orr.w	r3, r3, #5
 8000874:	e017      	b.n	80008a6 <HAL_GPIO_EXTI_Callback+0x62>
	}
	if (GPIO_Pin == BUTTON_RIGHT_GPIO_PIN)
 8000876:	2801      	cmp	r0, #1
 8000878:	d109      	bne.n	800088e <HAL_GPIO_EXTI_Callback+0x4a>
	{
		// Toggle LED
		LED_RED_TOGGLE();
 800087a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087e:	480b      	ldr	r0, [pc, #44]	; (80008ac <HAL_GPIO_EXTI_Callback+0x68>)
 8000880:	f001 fb60 	bl	8001f44 <HAL_GPIO_TogglePin>
		BUTTON_Clicked |= ( ( 1 << PressedButton_Pressed) | ( 1 << PressedButton_Right ) );
 8000884:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000886:	7813      	ldrb	r3, [r2, #0]
 8000888:	f043 0309 	orr.w	r3, r3, #9
 800088c:	e00b      	b.n	80008a6 <HAL_GPIO_EXTI_Callback+0x62>
	}
	if (GPIO_Pin == BUTTON_LEFT_GPIO_PIN)
 800088e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8000892:	d109      	bne.n	80008a8 <HAL_GPIO_EXTI_Callback+0x64>
	{
		// Toggle LED
		LED_RED_TOGGLE();
 8000894:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000898:	4804      	ldr	r0, [pc, #16]	; (80008ac <HAL_GPIO_EXTI_Callback+0x68>)
 800089a:	f001 fb53 	bl	8001f44 <HAL_GPIO_TogglePin>
		BUTTON_Clicked |= ( ( 1 << PressedButton_Pressed) | ( 1 << PressedButton_Left ) );
 800089e:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_GPIO_EXTI_Callback+0x6c>)
 80008a0:	7813      	ldrb	r3, [r2, #0]
 80008a2:	f043 0311 	orr.w	r3, r3, #17
 80008a6:	7013      	strb	r3, [r2, #0]
 80008a8:	bd08      	pop	{r3, pc}
 80008aa:	bf00      	nop
 80008ac:	40020000 	.word	0x40020000
 80008b0:	2000002a 	.word	0x2000002a

080008b4 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80008b4:	4a06      	ldr	r2, [pc, #24]	; (80008d0 <prvResetNextTaskUnblockTime+0x1c>)
 80008b6:	6813      	ldr	r3, [r2, #0]
 80008b8:	6819      	ldr	r1, [r3, #0]
 80008ba:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <prvResetNextTaskUnblockTime+0x20>)
 80008bc:	b911      	cbnz	r1, 80008c4 <prvResetNextTaskUnblockTime+0x10>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80008be:	f04f 32ff 	mov.w	r2, #4294967295
 80008c2:	e003      	b.n	80008cc <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80008c4:	6812      	ldr	r2, [r2, #0]
 80008c6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
 80008c8:	68d2      	ldr	r2, [r2, #12]
 80008ca:	6852      	ldr	r2, [r2, #4]
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	4770      	bx	lr
 80008d0:	20000030 	.word	0x20000030
 80008d4:	200000fc 	.word	0x200000fc

080008d8 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80008d8:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <prvAddCurrentTaskToDelayedList+0x3c>)
 80008da:	681a      	ldr	r2, [r3, #0]
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80008dc:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
 80008de:	6050      	str	r0, [r2, #4]

	if( xTimeToWake < xTickCount )
 80008e0:	4a0d      	ldr	r2, [pc, #52]	; (8000918 <prvAddCurrentTaskToDelayedList+0x40>)
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	4290      	cmp	r0, r2
	#endif /* vTaskDelete */
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
{
 80008e6:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
 80008e8:	d207      	bcs.n	80008fa <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80008ea:	4a0c      	ldr	r2, [pc, #48]	; (800091c <prvAddCurrentTaskToDelayedList+0x44>)
 80008ec:	6810      	ldr	r0, [r2, #0]
 80008ee:	6819      	ldr	r1, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80008f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );

	if( xTimeToWake < xTickCount )
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80008f4:	3104      	adds	r1, #4
 80008f6:	f000 be4d 	b.w	8001594 <vListInsert>
	}
	else
	{
		/* The wake time has not overflowed, so the current block list is used. */
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
 80008fa:	4a09      	ldr	r2, [pc, #36]	; (8000920 <prvAddCurrentTaskToDelayedList+0x48>)
 80008fc:	6810      	ldr	r0, [r2, #0]
 80008fe:	6819      	ldr	r1, [r3, #0]
 8000900:	3104      	adds	r1, #4
 8000902:	f000 fe47 	bl	8001594 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
 8000906:	4b07      	ldr	r3, [pc, #28]	; (8000924 <prvAddCurrentTaskToDelayedList+0x4c>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	4294      	cmp	r4, r2
		{
			xNextTaskUnblockTime = xTimeToWake;
 800090c:	bf38      	it	cc
 800090e:	601c      	strcc	r4, [r3, #0]
 8000910:	bd10      	pop	{r4, pc}
 8000912:	bf00      	nop
 8000914:	200000f8 	.word	0x200000f8
 8000918:	20000100 	.word	0x20000100
 800091c:	20000104 	.word	0x20000104
 8000920:	20000030 	.word	0x20000030
 8000924:	200000fc 	.word	0x200000fc

08000928 <xTaskGenericCreate.part.5>:
	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName );

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 8000928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800092c:	469a      	mov	sl, r3
 800092e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000930:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8000932:	4681      	mov	r9, r0
 8000934:	460e      	mov	r6, r1
 8000936:	4615      	mov	r5, r2
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000938:	b93b      	cbnz	r3, 800094a <xTaskGenericCreate.part.5+0x22>
 800093a:	0090      	lsls	r0, r2, #2
 800093c:	f000 fbbc 	bl	80010b8 <pvPortMalloc>

		if( pxStack != NULL )
 8000940:	4683      	mov	fp, r0
 8000942:	2800      	cmp	r0, #0
 8000944:	f000 80b2 	beq.w	8000aac <xTaskGenericCreate.part.5+0x184>
 8000948:	e000      	b.n	800094c <xTaskGenericCreate.part.5+0x24>
	#else /* portSTACK_GROWTH */
	{
	StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800094a:	469b      	mov	fp, r3

		if( pxStack != NULL )
		{
			/* Allocate space for the TCB.  Where the memory comes from depends
			on the implementation of the port malloc function. */
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800094c:	205c      	movs	r0, #92	; 0x5c
 800094e:	f000 fbb3 	bl	80010b8 <pvPortMalloc>

			if( pxNewTCB != NULL )
 8000952:	4604      	mov	r4, r0
 8000954:	b188      	cbz	r0, 800097a <xTaskGenericCreate.part.5+0x52>
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 8000956:	00ad      	lsls	r5, r5, #2
 8000958:	462a      	mov	r2, r5
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );

			if( pxNewTCB != NULL )
			{
				/* Store the stack location in the TCB. */
				pxNewTCB->pxStack = pxStack;
 800095a:	f8c0 b030 	str.w	fp, [r0, #48]	; 0x30
	{
		/* Avoid dependency on memset() if it is not required. */
		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
		{
			/* Just to help debugging. */
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
 800095e:	21a5      	movs	r1, #165	; 0xa5
 8000960:	4658      	mov	r0, fp
 8000962:	f001 fc2b 	bl	80021bc <memset>
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8000966:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000968:	3d04      	subs	r5, #4
 800096a:	441d      	add	r5, r3
 800096c:	f025 0507 	bic.w	r5, r5, #7
 8000970:	1e73      	subs	r3, r6, #1
 8000972:	f104 0233 	add.w	r2, r4, #51	; 0x33
 8000976:	360f      	adds	r6, #15
 8000978:	e005      	b.n	8000986 <xTaskGenericCreate.part.5+0x5e>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free it
				again. */
				vPortFree( pxStack );
 800097a:	4658      	mov	r0, fp
 800097c:	f000 fc2e 	bl	80011dc <vPortFree>
 8000980:	e094      	b.n	8000aac <xTaskGenericCreate.part.5+0x184>
static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
UBaseType_t x;

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000982:	429e      	cmp	r6, r3
 8000984:	d006      	beq.n	8000994 <xTaskGenericCreate.part.5+0x6c>
	{
		pxTCB->pcTaskName[ x ] = pcName[ x ];
 8000986:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800098a:	f802 1f01 	strb.w	r1, [r2, #1]!

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800098e:	7819      	ldrb	r1, [r3, #0]
 8000990:	2900      	cmp	r1, #0
 8000992:	d1f6      	bne.n	8000982 <xTaskGenericCreate.part.5+0x5a>
 8000994:	2f06      	cmp	r7, #6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000996:	f04f 0800 	mov.w	r8, #0
 800099a:	46bb      	mov	fp, r7
		pxTCB->uxBasePriority = uxPriority;
		pxTCB->uxMutexesHeld = 0;
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 800099c:	f104 0604 	add.w	r6, r4, #4
 80009a0:	bf28      	it	cs
 80009a2:	f04f 0b06 	movcs.w	fp, #6
 80009a6:	4630      	mov	r0, r6
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80009a8:	f884 8043 	strb.w	r8, [r4, #67]	; 0x43
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxTCB->uxPriority = uxPriority;
 80009ac:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
 80009b0:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
		pxTCB->uxMutexesHeld = 0;
 80009b4:	f8c4 8050 	str.w	r8, [r4, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
 80009b8:	f000 fddd 	bl	8001576 <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
 80009bc:	f104 0018 	add.w	r0, r4, #24
 80009c0:	f000 fdd9 	bl	8001576 <vListInitialiseItem>
	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80009c4:	f1cb 0307 	rsb	r3, fp, #7
 80009c8:	61a3      	str	r3, [r4, #24]
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
 80009ca:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
	vListInitialiseItem( &( pxTCB->xEventListItem ) );

	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
 80009ce:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
 80009d0:	6264      	str	r4, [r4, #36]	; 0x24
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxTCB->ulNotifiedValue = 0;
		pxTCB->eNotifyState = eNotWaitingNotification;
 80009d2:	f884 8058 	strb.w	r8, [r4, #88]	; 0x58
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80009d6:	4652      	mov	r2, sl
 80009d8:	4649      	mov	r1, r9
 80009da:	4628      	mov	r0, r5
 80009dc:	f000 fc68 	bl	80012b0 <pxPortInitialiseStack>
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80009e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else /* portUSING_MPU_WRAPPERS */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80009e2:	6020      	str	r0, [r4, #0]
		}
		#endif /* portUSING_MPU_WRAPPERS */

		if( ( void * ) pxCreatedTask != NULL )
 80009e4:	b103      	cbz	r3, 80009e8 <xTaskGenericCreate.part.5+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80009e6:	601c      	str	r4, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
 80009e8:	f000 fc84 	bl	80012f4 <vPortEnterCritical>
		{
			uxCurrentNumberOfTasks++;
 80009ec:	4a31      	ldr	r2, [pc, #196]	; (8000ab4 <xTaskGenericCreate.part.5+0x18c>)
			if( pxCurrentTCB == NULL )
 80009ee:	4d32      	ldr	r5, [pc, #200]	; (8000ab8 <xTaskGenericCreate.part.5+0x190>)

		/* Ensure interrupts don't access the task lists while they are being
		updated. */
		taskENTER_CRITICAL();
		{
			uxCurrentNumberOfTasks++;
 80009f0:	6813      	ldr	r3, [r2, #0]
 80009f2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8000ae0 <xTaskGenericCreate.part.5+0x1b8>
 80009f6:	3301      	adds	r3, #1
 80009f8:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
 80009fa:	682b      	ldr	r3, [r5, #0]
 80009fc:	bb3b      	cbnz	r3, 8000a4e <xTaskGenericCreate.part.5+0x126>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
 80009fe:	602c      	str	r4, [r5, #0]

				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000a00:	6812      	ldr	r2, [r2, #0]
 8000a02:	2a01      	cmp	r2, #1
 8000a04:	d12b      	bne.n	8000a5e <xTaskGenericCreate.part.5+0x136>
 8000a06:	4698      	mov	r8, r3
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000a08:	eb09 0008 	add.w	r0, r9, r8
 8000a0c:	f108 0814 	add.w	r8, r8, #20
 8000a10:	f000 fda6 	bl	8001560 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000a14:	f1b8 0f8c 	cmp.w	r8, #140	; 0x8c
 8000a18:	d1f6      	bne.n	8000a08 <xTaskGenericCreate.part.5+0xe0>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8000a1a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000ae4 <xTaskGenericCreate.part.5+0x1bc>
	vListInitialise( &xDelayedTaskList2 );
 8000a1e:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8000ae8 <xTaskGenericCreate.part.5+0x1c0>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( &xDelayedTaskList1 );
 8000a22:	4650      	mov	r0, sl
 8000a24:	f000 fd9c 	bl	8001560 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000a28:	4640      	mov	r0, r8
 8000a2a:	f000 fd99 	bl	8001560 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000a2e:	4823      	ldr	r0, [pc, #140]	; (8000abc <xTaskGenericCreate.part.5+0x194>)
 8000a30:	f000 fd96 	bl	8001560 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8000a34:	4822      	ldr	r0, [pc, #136]	; (8000ac0 <xTaskGenericCreate.part.5+0x198>)
 8000a36:	f000 fd93 	bl	8001560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8000a3a:	4822      	ldr	r0, [pc, #136]	; (8000ac4 <xTaskGenericCreate.part.5+0x19c>)
 8000a3c:	f000 fd90 	bl	8001560 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8000a40:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <xTaskGenericCreate.part.5+0x1a0>)
 8000a42:	f8c3 a000 	str.w	sl, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <xTaskGenericCreate.part.5+0x1a4>)
 8000a48:	f8c3 8000 	str.w	r8, [r3]
 8000a4c:	e007      	b.n	8000a5e <xTaskGenericCreate.part.5+0x136>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
 8000a4e:	4b20      	ldr	r3, [pc, #128]	; (8000ad0 <xTaskGenericCreate.part.5+0x1a8>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	b923      	cbnz	r3, 8000a5e <xTaskGenericCreate.part.5+0x136>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
 8000a54:	682b      	ldr	r3, [r5, #0]
 8000a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a58:	429f      	cmp	r7, r3
					{
						pxCurrentTCB = pxNewTCB;
 8000a5a:	bf28      	it	cs
 8000a5c:	602c      	strcs	r4, [r5, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8000a5e:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <xTaskGenericCreate.part.5+0x1ac>)
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8000a60:	491d      	ldr	r1, [pc, #116]	; (8000ad8 <xTaskGenericCreate.part.5+0x1b0>)
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}

			uxTaskNumber++;
 8000a62:	6813      	ldr	r3, [r2, #0]
 8000a64:	3301      	adds	r3, #1
 8000a66:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8000a68:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			uxTaskNumber++;

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000a6a:	6463      	str	r3, [r4, #68]	; 0x44
			}
			#endif /* configUSE_TRACE_FACILITY */
			traceTASK_CREATE( pxNewTCB );

			prvAddTaskToReadyList( pxNewTCB );
 8000a6c:	680b      	ldr	r3, [r1, #0]
 8000a6e:	2401      	movs	r4, #1
 8000a70:	fa04 f002 	lsl.w	r0, r4, r2
 8000a74:	4303      	orrs	r3, r0
 8000a76:	2014      	movs	r0, #20
 8000a78:	600b      	str	r3, [r1, #0]
 8000a7a:	fb00 9002 	mla	r0, r0, r2, r9
 8000a7e:	4631      	mov	r1, r6
 8000a80:	f000 fd7c 	bl	800157c <vListInsertEnd>

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
		}
		taskEXIT_CRITICAL();
 8000a84:	f000 fc58 	bl	8001338 <vPortExitCritical>
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <xTaskGenericCreate.part.5+0x1a8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	b15b      	cbz	r3, 8000aa6 <xTaskGenericCreate.part.5+0x17e>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8000a8e:	682b      	ldr	r3, [r5, #0]
 8000a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a92:	429f      	cmp	r7, r3
 8000a94:	d907      	bls.n	8000aa6 <xTaskGenericCreate.part.5+0x17e>
			{
				taskYIELD_IF_USING_PREEMPTION();
 8000a96:	4b11      	ldr	r3, [pc, #68]	; (8000adc <xTaskGenericCreate.part.5+0x1b4>)
 8000a98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	f3bf 8f4f 	dsb	sy
 8000aa2:	f3bf 8f6f 	isb	sy
	{
		if( xSchedulerRunning != pdFALSE )
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8000ab0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ab4:	20000148 	.word	0x20000148
 8000ab8:	200000f8 	.word	0x200000f8
 8000abc:	20000108 	.word	0x20000108
 8000ac0:	2000003c 	.word	0x2000003c
 8000ac4:	20000050 	.word	0x20000050
 8000ac8:	20000030 	.word	0x20000030
 8000acc:	20000104 	.word	0x20000104
 8000ad0:	20000034 	.word	0x20000034
 8000ad4:	2000011c 	.word	0x2000011c
 8000ad8:	2000014c 	.word	0x2000014c
 8000adc:	e000ed04 	.word	0xe000ed04
 8000ae0:	20000068 	.word	0x20000068
 8000ae4:	20000120 	.word	0x20000120
 8000ae8:	20000134 	.word	0x20000134

08000aec <xTaskGenericCreate>:

#endif
/*-----------------------------------------------------------*/

BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8000aec:	b470      	push	{r4, r5, r6}
 8000aee:	ac03      	add	r4, sp, #12
 8000af0:	cc70      	ldmia	r4, {r4, r5, r6}
BaseType_t xReturn;
TCB_t * pxNewTCB;
StackType_t *pxTopOfStack;

	configASSERT( pxTaskCode );
 8000af2:	b940      	cbnz	r0, 8000b06 <xTaskGenericCreate+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000af8:	f383 8811 	msr	BASEPRI, r3
 8000afc:	f3bf 8f6f 	isb	sy
 8000b00:	f3bf 8f4f 	dsb	sy
 8000b04:	e7fe      	b.n	8000b04 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
 8000b06:	2c06      	cmp	r4, #6
 8000b08:	d908      	bls.n	8000b1c <xTaskGenericCreate+0x30>
 8000b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b0e:	f383 8811 	msr	BASEPRI, r3
 8000b12:	f3bf 8f6f 	isb	sy
 8000b16:	f3bf 8f4f 	dsb	sy
 8000b1a:	e7fe      	b.n	8000b1a <xTaskGenericCreate+0x2e>
 8000b1c:	9605      	str	r6, [sp, #20]
 8000b1e:	9504      	str	r5, [sp, #16]
 8000b20:	9403      	str	r4, [sp, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xReturn;
}
 8000b22:	bc70      	pop	{r4, r5, r6}
 8000b24:	f7ff bf00 	b.w	8000928 <xTaskGenericCreate.part.5>

08000b28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b2a:	2400      	movs	r4, #0
 8000b2c:	9402      	str	r4, [sp, #8]
 8000b2e:	9401      	str	r4, [sp, #4]
 8000b30:	9400      	str	r4, [sp, #0]
 8000b32:	4623      	mov	r3, r4
 8000b34:	2280      	movs	r2, #128	; 0x80
 8000b36:	4913      	ldr	r1, [pc, #76]	; (8000b84 <vTaskStartScheduler+0x5c>)
 8000b38:	4813      	ldr	r0, [pc, #76]	; (8000b88 <vTaskStartScheduler+0x60>)
 8000b3a:	f7ff fef5 	bl	8000928 <xTaskGenericCreate.part.5>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000b3e:	2801      	cmp	r0, #1
 8000b40:	d114      	bne.n	8000b6c <vTaskStartScheduler+0x44>
 8000b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b46:	f383 8811 	msr	BASEPRI, r3
 8000b4a:	f3bf 8f6f 	isb	sy
 8000b4e:	f3bf 8f4f 	dsb	sy
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <vTaskStartScheduler+0x64>)
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <vTaskStartScheduler+0x68>)
 8000b5c:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8000b5e:	4b0d      	ldr	r3, [pc, #52]	; (8000b94 <vTaskStartScheduler+0x6c>)
 8000b60:	601c      	str	r4, [r3, #0]
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
	}
}
 8000b62:	b004      	add	sp, #16
 8000b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000b68:	f000 bc56 	b.w	8001418 <xPortStartScheduler>
	else
	{
		/* This line will only be reached if the kernel could not be started,
		because there was not enough FreeRTOS heap to create the idle task
		or the timer task. */
		configASSERT( xReturn );
 8000b6c:	b940      	cbnz	r0, 8000b80 <vTaskStartScheduler+0x58>
 8000b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000b72:	f383 8811 	msr	BASEPRI, r3
 8000b76:	f3bf 8f6f 	isb	sy
 8000b7a:	f3bf 8f4f 	dsb	sy
 8000b7e:	e7fe      	b.n	8000b7e <vTaskStartScheduler+0x56>
	}
}
 8000b80:	b004      	add	sp, #16
 8000b82:	bd10      	pop	{r4, pc}
 8000b84:	08002206 	.word	0x08002206
 8000b88:	08000e41 	.word	0x08000e41
 8000b8c:	200000fc 	.word	0x200000fc
 8000b90:	20000034 	.word	0x20000034
 8000b94:	20000100 	.word	0x20000100

08000b98 <vTaskSuspendAll>:
{
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000b98:	4a02      	ldr	r2, [pc, #8]	; (8000ba4 <vTaskSuspendAll+0xc>)
 8000b9a:	6813      	ldr	r3, [r2, #0]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	6013      	str	r3, [r2, #0]
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	200000f4 	.word	0x200000f4

08000ba8 <xTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000ba8:	4b40      	ldr	r3, [pc, #256]	; (8000cac <xTaskIncrementTick+0x104>)
 8000baa:	681b      	ldr	r3, [r3, #0]

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d13c      	bne.n	8000c2e <xTaskIncrementTick+0x86>
	{
		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		++xTickCount;
 8000bb4:	4b3e      	ldr	r3, [pc, #248]	; (8000cb0 <xTaskIncrementTick+0x108>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	3201      	adds	r2, #1
 8000bba:	601a      	str	r2, [r3, #0]

		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8000bbc:	681d      	ldr	r5, [r3, #0]

			if( xConstTickCount == ( TickType_t ) 0U )
 8000bbe:	b9bd      	cbnz	r5, 8000bf0 <xTaskIncrementTick+0x48>
			{
				taskSWITCH_DELAYED_LISTS();
 8000bc0:	4b3c      	ldr	r3, [pc, #240]	; (8000cb4 <xTaskIncrementTick+0x10c>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	6812      	ldr	r2, [r2, #0]
 8000bc6:	b142      	cbz	r2, 8000bda <xTaskIncrementTick+0x32>
 8000bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000bcc:	f383 8811 	msr	BASEPRI, r3
 8000bd0:	f3bf 8f6f 	isb	sy
 8000bd4:	f3bf 8f4f 	dsb	sy
 8000bd8:	e7fe      	b.n	8000bd8 <xTaskIncrementTick+0x30>
 8000bda:	4a37      	ldr	r2, [pc, #220]	; (8000cb8 <xTaskIncrementTick+0x110>)
 8000bdc:	6819      	ldr	r1, [r3, #0]
 8000bde:	6810      	ldr	r0, [r2, #0]
 8000be0:	6018      	str	r0, [r3, #0]
 8000be2:	6011      	str	r1, [r2, #0]
 8000be4:	4a35      	ldr	r2, [pc, #212]	; (8000cbc <xTaskIncrementTick+0x114>)
 8000be6:	6813      	ldr	r3, [r2, #0]
 8000be8:	3301      	adds	r3, #1
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	f7ff fe62 	bl	80008b4 <prvResetNextTaskUnblockTime>

			/* See if this tick has made a timeout expire.  Tasks are stored in
			the	queue in the order of their wake time - meaning once one task
			has been found whose block time has not expired there is no need to
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
 8000bf0:	4c33      	ldr	r4, [pc, #204]	; (8000cc0 <xTaskIncrementTick+0x118>)
 8000bf2:	9401      	str	r4, [sp, #4]
 8000bf4:	6823      	ldr	r3, [r4, #0]
 8000bf6:	4e33      	ldr	r6, [pc, #204]	; (8000cc4 <xTaskIncrementTick+0x11c>)
 8000bf8:	4f33      	ldr	r7, [pc, #204]	; (8000cc8 <xTaskIncrementTick+0x120>)
 8000bfa:	429d      	cmp	r5, r3
 8000bfc:	f04f 0b00 	mov.w	fp, #0
 8000c00:	d30b      	bcc.n	8000c1a <xTaskIncrementTick+0x72>
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c02:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8000cb4 <xTaskIncrementTick+0x10c>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8000c06:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8000cd4 <xTaskIncrementTick+0x12c>
			look any further down the list. */
			if( xConstTickCount >= xNextTaskUnblockTime )
			{
				for( ;; )
				{
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c0a:	f8d8 2000 	ldr.w	r2, [r8]
 8000c0e:	6812      	ldr	r2, [r2, #0]
 8000c10:	b9a2      	cbnz	r2, 8000c3c <xTaskIncrementTick+0x94>
						/* The delayed list is empty.  Set xNextTaskUnblockTime
						to the maximum possible value so it is extremely
						unlikely that the
						if( xTickCount >= xNextTaskUnblockTime ) test will pass
						next time through. */
						xNextTaskUnblockTime = portMAX_DELAY;
 8000c12:	9b01      	ldr	r3, [sp, #4]
 8000c14:	f04f 32ff 	mov.w	r2, #4294967295
 8000c18:	601a      	str	r2, [r3, #0]
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000c1e:	2214      	movs	r2, #20
 8000c20:	434a      	muls	r2, r1
 8000c22:	58b2      	ldr	r2, [r6, r2]
			{
				xSwitchRequired = pdTRUE;
 8000c24:	2a02      	cmp	r2, #2
 8000c26:	bf28      	it	cs
 8000c28:	f04f 0b01 	movcs.w	fp, #1
 8000c2c:	e034      	b.n	8000c98 <xTaskIncrementTick+0xf0>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000c2e:	4a27      	ldr	r2, [pc, #156]	; (8000ccc <xTaskIncrementTick+0x124>)
 8000c30:	6813      	ldr	r3, [r2, #0]
 8000c32:	3301      	adds	r3, #1
 8000c34:	6013      	str	r3, [r2, #0]

BaseType_t xTaskIncrementTick( void )
{
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000c36:	f04f 0b00 	mov.w	fp, #0
 8000c3a:	e02d      	b.n	8000c98 <xTaskIncrementTick+0xf0>
					{
						/* The delayed list is not empty, get the value of the
						item at the head of the delayed list.  This is the time
						at which the task at the head of the delayed list must
						be removed from the Blocked state. */
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000c3c:	f8d8 2000 	ldr.w	r2, [r8]
 8000c40:	68d2      	ldr	r2, [r2, #12]
 8000c42:	68d4      	ldr	r4, [r2, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
 8000c44:	6861      	ldr	r1, [r4, #4]

						if( xConstTickCount < xItemValue )
 8000c46:	428d      	cmp	r5, r1
 8000c48:	d202      	bcs.n	8000c50 <xTaskIncrementTick+0xa8>
							/* It is not time to unblock this item yet, but the
							item value is the time at which the task at the head
							of the blocked list must be removed from the Blocked
							state -	so record the item value in
							xNextTaskUnblockTime. */
							xNextTaskUnblockTime = xItemValue;
 8000c4a:	9b01      	ldr	r3, [sp, #4]
 8000c4c:	6019      	str	r1, [r3, #0]
							break;
 8000c4e:	e7e4      	b.n	8000c1a <xTaskIncrementTick+0x72>
						{
							mtCOVERAGE_TEST_MARKER();
						}

						/* It is time to remove the item from the Blocked state. */
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000c50:	f104 0a04 	add.w	sl, r4, #4
 8000c54:	4650      	mov	r0, sl
 8000c56:	f000 fcb5 	bl	80015c4 <uxListRemove>

						/* Is the task waiting on an event also?  If so remove
						it from the event list. */
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000c5a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000c5c:	b119      	cbz	r1, 8000c66 <xTaskIncrementTick+0xbe>
						{
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c5e:	f104 0018 	add.w	r0, r4, #24
 8000c62:	f000 fcaf 	bl	80015c4 <uxListRemove>
							mtCOVERAGE_TEST_MARKER();
						}

						/* Place the unblocked task into the appropriate ready
						list. */
						prvAddTaskToReadyList( pxTCB );
 8000c66:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8000c68:	f8d9 1000 	ldr.w	r1, [r9]
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	fa03 fe00 	lsl.w	lr, r3, r0
 8000c72:	ea4e 0101 	orr.w	r1, lr, r1
 8000c76:	f04f 0e14 	mov.w	lr, #20
 8000c7a:	f8c9 1000 	str.w	r1, [r9]
 8000c7e:	fb0e 6000 	mla	r0, lr, r0, r6
 8000c82:	4651      	mov	r1, sl
 8000c84:	f000 fc7a 	bl	800157c <vListInsertEnd>
						{
							/* Preemption is on, but a context switch should
							only be performed if the unblocked task has a
							priority that is equal to or higher than the
							currently executing task. */
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c88:	6838      	ldr	r0, [r7, #0]
 8000c8a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000c8c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							{
								xSwitchRequired = pdTRUE;
 8000c8e:	4291      	cmp	r1, r2
 8000c90:	bf28      	it	cs
 8000c92:	f04f 0b01 	movcs.w	fp, #1
 8000c96:	e7b8      	b.n	8000c0a <xTaskIncrementTick+0x62>
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000c98:	4a0d      	ldr	r2, [pc, #52]	; (8000cd0 <xTaskIncrementTick+0x128>)
 8000c9a:	6812      	ldr	r2, [r2, #0]
		{
			xSwitchRequired = pdTRUE;
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	bf18      	it	ne
 8000ca0:	f04f 0b01 	movne.w	fp, #1
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
}
 8000ca4:	4658      	mov	r0, fp
 8000ca6:	b003      	add	sp, #12
 8000ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cac:	200000f4 	.word	0x200000f4
 8000cb0:	20000100 	.word	0x20000100
 8000cb4:	20000030 	.word	0x20000030
 8000cb8:	20000104 	.word	0x20000104
 8000cbc:	2000002c 	.word	0x2000002c
 8000cc0:	200000fc 	.word	0x200000fc
 8000cc4:	20000068 	.word	0x20000068
 8000cc8:	200000f8 	.word	0x200000f8
 8000ccc:	20000064 	.word	0x20000064
 8000cd0:	20000150 	.word	0x20000150
 8000cd4:	2000014c 	.word	0x2000014c

08000cd8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000cdc:	4c30      	ldr	r4, [pc, #192]	; (8000da0 <xTaskResumeAll+0xc8>)
 8000cde:	6823      	ldr	r3, [r4, #0]
 8000ce0:	b943      	cbnz	r3, 8000cf4 <xTaskResumeAll+0x1c>
 8000ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce6:	f383 8811 	msr	BASEPRI, r3
 8000cea:	f3bf 8f6f 	isb	sy
 8000cee:	f3bf 8f4f 	dsb	sy
 8000cf2:	e7fe      	b.n	8000cf2 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000cf4:	f000 fafe 	bl	80012f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000cf8:	6823      	ldr	r3, [r4, #0]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	6023      	str	r3, [r4, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000cfe:	6823      	ldr	r3, [r4, #0]
 8000d00:	b10b      	cbz	r3, 8000d06 <xTaskResumeAll+0x2e>
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
TCB_t *pxTCB;
BaseType_t xAlreadyYielded = pdFALSE;
 8000d02:	2400      	movs	r4, #0
 8000d04:	e047      	b.n	8000d96 <xTaskResumeAll+0xbe>
	{
		--uxSchedulerSuspended;

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000d06:	4b27      	ldr	r3, [pc, #156]	; (8000da4 <xTaskResumeAll+0xcc>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0f9      	beq.n	8000d02 <xTaskResumeAll+0x2a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d0e:	4d26      	ldr	r5, [pc, #152]	; (8000da8 <xTaskResumeAll+0xd0>)
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyList( pxTCB );
 8000d10:	4e26      	ldr	r6, [pc, #152]	; (8000dac <xTaskResumeAll+0xd4>)
 8000d12:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8000dc0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000d16:	682b      	ldr	r3, [r5, #0]
 8000d18:	b303      	cbz	r3, 8000d5c <xTaskResumeAll+0x84>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000d1a:	68eb      	ldr	r3, [r5, #12]
 8000d1c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000d1e:	f104 0904 	add.w	r9, r4, #4
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000d22:	f104 0018 	add.w	r0, r4, #24
 8000d26:	f000 fc4d 	bl	80015c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000d2a:	4648      	mov	r0, r9
 8000d2c:	f000 fc4a 	bl	80015c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000d30:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d32:	6833      	ldr	r3, [r6, #0]
 8000d34:	2701      	movs	r7, #1
 8000d36:	fa07 f102 	lsl.w	r1, r7, r2
 8000d3a:	2014      	movs	r0, #20
 8000d3c:	430b      	orrs	r3, r1
 8000d3e:	fb00 8002 	mla	r0, r0, r2, r8
 8000d42:	4649      	mov	r1, r9
 8000d44:	6033      	str	r3, [r6, #0]
 8000d46:	f000 fc19 	bl	800157c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000d4a:	4b19      	ldr	r3, [pc, #100]	; (8000db0 <xTaskResumeAll+0xd8>)
 8000d4c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d3df      	bcc.n	8000d16 <xTaskResumeAll+0x3e>
					{
						xYieldPending = pdTRUE;
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <xTaskResumeAll+0xdc>)
 8000d58:	601f      	str	r7, [r3, #0]
 8000d5a:	e7da      	b.n	8000d12 <xTaskResumeAll+0x3a>

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
 8000d5c:	4c16      	ldr	r4, [pc, #88]	; (8000db8 <xTaskResumeAll+0xe0>)
 8000d5e:	6823      	ldr	r3, [r4, #0]
 8000d60:	b963      	cbnz	r3, 8000d7c <xTaskResumeAll+0xa4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldPending == pdTRUE )
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <xTaskResumeAll+0xdc>)
 8000d64:	681c      	ldr	r4, [r3, #0]
 8000d66:	2c01      	cmp	r4, #1
 8000d68:	d1cb      	bne.n	8000d02 <xTaskResumeAll+0x2a>
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000d6a:	4b14      	ldr	r3, [pc, #80]	; (8000dbc <xTaskResumeAll+0xe4>)
 8000d6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	f3bf 8f4f 	dsb	sy
 8000d76:	f3bf 8f6f 	isb	sy
 8000d7a:	e00c      	b.n	8000d96 <xTaskResumeAll+0xbe>
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
					{
						if( xTaskIncrementTick() != pdFALSE )
						{
							xYieldPending = pdTRUE;
 8000d7c:	4d0d      	ldr	r5, [pc, #52]	; (8000db4 <xTaskResumeAll+0xdc>)
 8000d7e:	2601      	movs	r6, #1
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				if( uxPendedTicks > ( UBaseType_t ) 0U )
				{
					while( uxPendedTicks > ( UBaseType_t ) 0U )
 8000d80:	6823      	ldr	r3, [r4, #0]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d0ed      	beq.n	8000d62 <xTaskResumeAll+0x8a>
					{
						if( xTaskIncrementTick() != pdFALSE )
 8000d86:	f7ff ff0f 	bl	8000ba8 <xTaskIncrementTick>
 8000d8a:	b100      	cbz	r0, 8000d8e <xTaskResumeAll+0xb6>
						{
							xYieldPending = pdTRUE;
 8000d8c:	602e      	str	r6, [r5, #0]
						}
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
						--uxPendedTicks;
 8000d8e:	6823      	ldr	r3, [r4, #0]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	6023      	str	r3, [r4, #0]
 8000d94:	e7f4      	b.n	8000d80 <xTaskResumeAll+0xa8>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000d96:	f000 facf 	bl	8001338 <vPortExitCritical>

	return xAlreadyYielded;
}
 8000d9a:	4620      	mov	r0, r4
 8000d9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000da0:	200000f4 	.word	0x200000f4
 8000da4:	20000148 	.word	0x20000148
 8000da8:	20000108 	.word	0x20000108
 8000dac:	2000014c 	.word	0x2000014c
 8000db0:	200000f8 	.word	0x200000f8
 8000db4:	20000150 	.word	0x20000150
 8000db8:	20000064 	.word	0x20000064
 8000dbc:	e000ed04 	.word	0xe000ed04
 8000dc0:	20000068 	.word	0x20000068

08000dc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000dc4:	b538      	push	{r3, r4, r5, lr}
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded = pdFALSE;


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000dc6:	b940      	cbnz	r0, 8000dda <vTaskDelay+0x16>

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
		{
			portYIELD_WITHIN_API();
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <vTaskDelay+0x68>)
 8000dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	f3bf 8f4f 	dsb	sy
 8000dd4:	f3bf 8f6f 	isb	sy
 8000dd8:	bd38      	pop	{r3, r4, r5, pc}


		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8000dda:	4b15      	ldr	r3, [pc, #84]	; (8000e30 <vTaskDelay+0x6c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	b143      	cbz	r3, 8000df2 <vTaskDelay+0x2e>
 8000de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000de4:	f383 8811 	msr	BASEPRI, r3
 8000de8:	f3bf 8f6f 	isb	sy
 8000dec:	f3bf 8f4f 	dsb	sy
 8000df0:	e7fe      	b.n	8000df0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8000df2:	f7ff fed1 	bl	8000b98 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	; (8000e34 <vTaskDelay+0x70>)

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8000df8:	4d0f      	ldr	r5, [pc, #60]	; (8000e38 <vTaskDelay+0x74>)
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	18c4      	adds	r4, r0, r3

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
 8000dfe:	6828      	ldr	r0, [r5, #0]
 8000e00:	3004      	adds	r0, #4
 8000e02:	f000 fbdf 	bl	80015c4 <uxListRemove>
 8000e06:	b940      	cbnz	r0, 8000e1a <vTaskDelay+0x56>
				{
					/* The current task must be in a ready list, so there is
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8000e08:	682b      	ldr	r3, [r5, #0]
 8000e0a:	490c      	ldr	r1, [pc, #48]	; (8000e3c <vTaskDelay+0x78>)
 8000e0c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8000e0e:	680a      	ldr	r2, [r1, #0]
 8000e10:	2301      	movs	r3, #1
 8000e12:	4083      	lsls	r3, r0
 8000e14:	ea22 0303 	bic.w	r3, r2, r3
 8000e18:	600b      	str	r3, [r1, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				prvAddCurrentTaskToDelayedList( xTimeToWake );
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	f7ff fd5c 	bl	80008d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000e20:	f7ff ff5a 	bl	8000cd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000e24:	2800      	cmp	r0, #0
 8000e26:	d0cf      	beq.n	8000dc8 <vTaskDelay+0x4>
 8000e28:	bd38      	pop	{r3, r4, r5, pc}
 8000e2a:	bf00      	nop
 8000e2c:	e000ed04 	.word	0xe000ed04
 8000e30:	200000f4 	.word	0x200000f4
 8000e34:	20000100 	.word	0x20000100
 8000e38:	200000f8 	.word	0x200000f8
 8000e3c:	2000014c 	.word	0x2000014c

08000e40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000e40:	b580      	push	{r7, lr}
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8000e42:	4d18      	ldr	r5, [pc, #96]	; (8000ea4 <prvIdleTask+0x64>)
 8000e44:	462e      	mov	r6, r5
		{
			vTaskSuspendAll();
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8000e46:	4f18      	ldr	r7, [pc, #96]	; (8000ea8 <prvIdleTask+0x68>)
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
 8000e48:	682b      	ldr	r3, [r5, #0]
 8000e4a:	b1f3      	cbz	r3, 8000e8a <prvIdleTask+0x4a>
		{
			vTaskSuspendAll();
 8000e4c:	f7ff fea4 	bl	8000b98 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8000e50:	683c      	ldr	r4, [r7, #0]
			}
			( void ) xTaskResumeAll();
 8000e52:	f7ff ff41 	bl	8000cd8 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8000e56:	2c00      	cmp	r4, #0
 8000e58:	d0f6      	beq.n	8000e48 <prvIdleTask+0x8>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8000e5a:	f000 fa4b 	bl	80012f4 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <prvIdleTask+0x68>)
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
 8000e64:	1d20      	adds	r0, r4, #4
 8000e66:	f000 fbad 	bl	80015c4 <uxListRemove>
					--uxCurrentNumberOfTasks;
 8000e6a:	4a10      	ldr	r2, [pc, #64]	; (8000eac <prvIdleTask+0x6c>)
 8000e6c:	6813      	ldr	r3, [r2, #0]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
 8000e72:	6833      	ldr	r3, [r6, #0]
 8000e74:	3b01      	subs	r3, #1
 8000e76:	6033      	str	r3, [r6, #0]
				}
				taskEXIT_CRITICAL();
 8000e78:	f000 fa5e 	bl	8001338 <vPortExitCritical>
				vPortFreeAligned( pxTCB->pxStack );
			}
		}
		#else
		{
			vPortFreeAligned( pxTCB->pxStack );
 8000e7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8000e7e:	f000 f9ad 	bl	80011dc <vPortFree>
		}
		#endif

		vPortFree( pxTCB );
 8000e82:	4620      	mov	r0, r4
 8000e84:	f000 f9aa 	bl	80011dc <vPortFree>
 8000e88:	e7de      	b.n	8000e48 <prvIdleTask+0x8>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <prvIdleTask+0x70>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d9d9      	bls.n	8000e46 <prvIdleTask+0x6>
			{
				taskYIELD();
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <prvIdleTask+0x74>)
 8000e94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	f3bf 8f4f 	dsb	sy
 8000e9e:	f3bf 8f6f 	isb	sy
 8000ea2:	e7d0      	b.n	8000e46 <prvIdleTask+0x6>
 8000ea4:	20000038 	.word	0x20000038
 8000ea8:	2000003c 	.word	0x2000003c
 8000eac:	20000148 	.word	0x20000148
 8000eb0:	20000068 	.word	0x20000068
 8000eb4:	e000ed04 	.word	0xe000ed04

08000eb8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <vTaskSwitchContext+0x60>)
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <vTaskSwitchContext+0x64>)

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000ebe:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000ec0:	b10a      	cbz	r2, 8000ec6 <vTaskSwitchContext+0xe>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	e025      	b.n	8000f12 <vTaskSwitchContext+0x5a>
	}
	else
	{
		xYieldPending = pdFALSE;
 8000ec6:	601a      	str	r2, [r3, #0]
		/* Check for stack overflow, if configured. */
		taskCHECK_FOR_STACK_OVERFLOW();

		/* Select a new task to run using either the generic C or port
		optimised asm code. */
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000ec8:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <vTaskSwitchContext+0x68>)
 8000eca:	681b      	ldr	r3, [r3, #0]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000ecc:	fab3 f383 	clz	r3, r3
 8000ed0:	b2db      	uxtb	r3, r3
 8000ed2:	f1c3 031f 	rsb	r3, r3, #31
 8000ed6:	2214      	movs	r2, #20
 8000ed8:	4912      	ldr	r1, [pc, #72]	; (8000f24 <vTaskSwitchContext+0x6c>)
 8000eda:	435a      	muls	r2, r3
 8000edc:	1888      	adds	r0, r1, r2
 8000ede:	588c      	ldr	r4, [r1, r2]
 8000ee0:	b944      	cbnz	r4, 8000ef4 <vTaskSwitchContext+0x3c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee6:	f383 8811 	msr	BASEPRI, r3
 8000eea:	f3bf 8f6f 	isb	sy
 8000eee:	f3bf 8f4f 	dsb	sy
 8000ef2:	e7fe      	b.n	8000ef2 <vTaskSwitchContext+0x3a>
 8000ef4:	6844      	ldr	r4, [r0, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	6864      	ldr	r4, [r4, #4]
 8000efa:	6044      	str	r4, [r0, #4]
 8000efc:	440a      	add	r2, r1
 8000efe:	4294      	cmp	r4, r2
 8000f00:	bf04      	itt	eq
 8000f02:	6862      	ldreq	r2, [r4, #4]
 8000f04:	6042      	streq	r2, [r0, #4]
 8000f06:	2214      	movs	r2, #20
 8000f08:	fb02 1303 	mla	r3, r2, r3, r1
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	68da      	ldr	r2, [r3, #12]
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <vTaskSwitchContext+0x70>)
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	bd10      	pop	{r4, pc}
 8000f16:	bf00      	nop
 8000f18:	200000f4 	.word	0x200000f4
 8000f1c:	20000150 	.word	0x20000150
 8000f20:	2000014c 	.word	0x2000014c
 8000f24:	20000068 	.word	0x20000068
 8000f28:	200000f8 	.word	0x200000f8

08000f2c <xTaskRemoveFromEventList>:
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8000f2c:	68c3      	ldr	r3, [r0, #12]

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8000f2e:	b570      	push	{r4, r5, r6, lr}
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8000f30:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8000f32:	b944      	cbnz	r4, 8000f46 <xTaskRemoveFromEventList+0x1a>
 8000f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f38:	f383 8811 	msr	BASEPRI, r3
 8000f3c:	f3bf 8f6f 	isb	sy
 8000f40:	f3bf 8f4f 	dsb	sy
 8000f44:	e7fe      	b.n	8000f44 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8000f46:	f104 0518 	add.w	r5, r4, #24
 8000f4a:	4628      	mov	r0, r5
 8000f4c:	f000 fb3a 	bl	80015c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f50:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <xTaskRemoveFromEventList+0x6c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	b983      	cbnz	r3, 8000f78 <xTaskRemoveFromEventList+0x4c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
 8000f56:	1d26      	adds	r6, r4, #4
 8000f58:	4630      	mov	r0, r6
 8000f5a:	f000 fb33 	bl	80015c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8000f5e:	490f      	ldr	r1, [pc, #60]	; (8000f9c <xTaskRemoveFromEventList+0x70>)
 8000f60:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8000f62:	680a      	ldr	r2, [r1, #0]
 8000f64:	2301      	movs	r3, #1
 8000f66:	40ab      	lsls	r3, r5
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	600b      	str	r3, [r1, #0]
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <xTaskRemoveFromEventList+0x74>)
 8000f6e:	2014      	movs	r0, #20
 8000f70:	4631      	mov	r1, r6
 8000f72:	fb00 3005 	mla	r0, r0, r5, r3
 8000f76:	e001      	b.n	8000f7c <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8000f78:	480a      	ldr	r0, [pc, #40]	; (8000fa4 <xTaskRemoveFromEventList+0x78>)
 8000f7a:	4629      	mov	r1, r5
 8000f7c:	f000 fafe 	bl	800157c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <xTaskRemoveFromEventList+0x7c>)
 8000f82:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f88:	429a      	cmp	r2, r3
		it should force a context switch now. */
		xReturn = pdTRUE;

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8000f8a:	bf83      	ittte	hi
 8000f8c:	4b07      	ldrhi	r3, [pc, #28]	; (8000fac <xTaskRemoveFromEventList+0x80>)
 8000f8e:	2001      	movhi	r0, #1
 8000f90:	6018      	strhi	r0, [r3, #0]
	}
	else
	{
		xReturn = pdFALSE;
 8000f92:	2000      	movls	r0, #0
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
}
 8000f94:	bd70      	pop	{r4, r5, r6, pc}
 8000f96:	bf00      	nop
 8000f98:	200000f4 	.word	0x200000f4
 8000f9c:	2000014c 	.word	0x2000014c
 8000fa0:	20000068 	.word	0x20000068
 8000fa4:	20000108 	.word	0x20000108
 8000fa8:	200000f8 	.word	0x200000f8
 8000fac:	20000150 	.word	0x20000150

08000fb0 <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8000fb0:	4b05      	ldr	r3, [pc, #20]	; (8000fc8 <xTaskGetSchedulerState+0x18>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	b133      	cbz	r3, 8000fc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000fb6:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <xTaskGetSchedulerState+0x1c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8000fbc:	bf0c      	ite	eq
 8000fbe:	2002      	moveq	r0, #2
 8000fc0:	2000      	movne	r0, #0
 8000fc2:	4770      	bx	lr
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8000fc4:	2001      	movs	r0, #1
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
 8000fc6:	4770      	bx	lr
 8000fc8:	20000034 	.word	0x20000034
 8000fcc:	200000f4 	.word	0x200000f4

08000fd0 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8000fd0:	b570      	push	{r4, r5, r6, lr}
 8000fd2:	460d      	mov	r5, r1
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8000fd4:	4604      	mov	r4, r0
 8000fd6:	b940      	cbnz	r0, 8000fea <xQueueGiveFromISR+0x1a>
 8000fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000fdc:	f383 8811 	msr	BASEPRI, r3
 8000fe0:	f3bf 8f6f 	isb	sy
 8000fe4:	f3bf 8f4f 	dsb	sy
 8000fe8:	e7fe      	b.n	8000fe8 <xQueueGiveFromISR+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8000fea:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000fec:	b143      	cbz	r3, 8001000 <xQueueGiveFromISR+0x30>
 8000fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ff2:	f383 8811 	msr	BASEPRI, r3
 8000ff6:	f3bf 8f6f 	isb	sy
 8000ffa:	f3bf 8f4f 	dsb	sy
 8000ffe:	e7fe      	b.n	8000ffe <xQueueGiveFromISR+0x2e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8001000:	6803      	ldr	r3, [r0, #0]
 8001002:	b90b      	cbnz	r3, 8001008 <xQueueGiveFromISR+0x38>
 8001004:	6843      	ldr	r3, [r0, #4]
 8001006:	bb3b      	cbnz	r3, 8001058 <xQueueGiveFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001008:	f000 fa7c 	bl	8001504 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800100c:	f3ef 8611 	mrs	r6, BASEPRI
 8001010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001014:	f383 8811 	msr	BASEPRI, r3
 8001018:	f3bf 8f6f 	isb	sy
 800101c:	f3bf 8f4f 	dsb	sy
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
 8001020:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001022:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001024:	429a      	cmp	r2, r3
 8001026:	d215      	bcs.n	8001054 <xQueueGiveFromISR+0x84>
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			++( pxQueue->uxMessagesWaiting );
 8001028:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800102a:	3301      	adds	r3, #1
 800102c:	63a3      	str	r3, [r4, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
 800102e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001030:	3301      	adds	r3, #1
 8001032:	d10a      	bne.n	800104a <xQueueGiveFromISR+0x7a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001036:	b15b      	cbz	r3, 8001050 <xQueueGiveFromISR+0x80>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001038:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800103c:	f7ff ff76 	bl	8000f2c <xTaskRemoveFromEventList>
 8001040:	b130      	cbz	r0, 8001050 <xQueueGiveFromISR+0x80>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8001042:	b12d      	cbz	r5, 8001050 <xQueueGiveFromISR+0x80>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001044:	2001      	movs	r0, #1
 8001046:	6028      	str	r0, [r5, #0]
 8001048:	e00f      	b.n	800106a <xQueueGiveFromISR+0x9a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
 800104a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800104c:	3301      	adds	r3, #1
 800104e:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
 8001050:	2001      	movs	r0, #1
 8001052:	e00a      	b.n	800106a <xQueueGiveFromISR+0x9a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001054:	2000      	movs	r0, #0
 8001056:	e008      	b.n	800106a <xQueueGiveFromISR+0x9a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800105c:	f383 8811 	msr	BASEPRI, r3
 8001060:	f3bf 8f6f 	isb	sy
 8001064:	f3bf 8f4f 	dsb	sy
 8001068:	e7fe      	b.n	8001068 <xQueueGiveFromISR+0x98>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800106a:	f386 8811 	msr	BASEPRI, r6
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
}
 800106e:	bd70      	pop	{r4, r5, r6, pc}

08001070 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001070:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <prvInsertBlockIntoFreeList+0x40>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4282      	cmp	r2, r0
 8001078:	d201      	bcs.n	800107e <prvInsertBlockIntoFreeList+0xe>
 800107a:	4613      	mov	r3, r2
 800107c:	e7fa      	b.n	8001074 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800107e:	6859      	ldr	r1, [r3, #4]
 8001080:	185c      	adds	r4, r3, r1
 8001082:	42a0      	cmp	r0, r4
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001084:	bf01      	itttt	eq
 8001086:	6840      	ldreq	r0, [r0, #4]
 8001088:	1809      	addeq	r1, r1, r0
 800108a:	4618      	moveq	r0, r3
 800108c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800108e:	6841      	ldr	r1, [r0, #4]
 8001090:	1844      	adds	r4, r0, r1
 8001092:	42a2      	cmp	r2, r4
 8001094:	d107      	bne.n	80010a6 <prvInsertBlockIntoFreeList+0x36>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001096:	4c07      	ldr	r4, [pc, #28]	; (80010b4 <prvInsertBlockIntoFreeList+0x44>)
 8001098:	6824      	ldr	r4, [r4, #0]
 800109a:	42a2      	cmp	r2, r4
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800109c:	bf1f      	itttt	ne
 800109e:	6854      	ldrne	r4, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80010a0:	6812      	ldrne	r2, [r2, #0]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80010a2:	1909      	addne	r1, r1, r4
 80010a4:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80010a6:	4298      	cmp	r0, r3
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80010a8:	6002      	str	r2, [r0, #0]
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80010aa:	bf18      	it	ne
 80010ac:	6018      	strne	r0, [r3, #0]
 80010ae:	bd10      	pop	{r4, pc}
 80010b0:	2000015c 	.word	0x2000015c
 80010b4:	20000158 	.word	0x20000158

080010b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80010b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010bc:	4604      	mov	r4, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
 80010be:	f7ff fd6b 	bl	8000b98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80010c2:	4940      	ldr	r1, [pc, #256]	; (80011c4 <pvPortMalloc+0x10c>)
 80010c4:	4d40      	ldr	r5, [pc, #256]	; (80011c8 <pvPortMalloc+0x110>)
 80010c6:	680b      	ldr	r3, [r1, #0]
 80010c8:	bb0b      	cbnz	r3, 800110e <pvPortMalloc+0x56>
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80010ca:	4a40      	ldr	r2, [pc, #256]	; (80011cc <pvPortMalloc+0x114>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80010cc:	0756      	lsls	r6, r2, #29
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80010ce:	bf1f      	itttt	ne
 80010d0:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010d2:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80010d6:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 80010da:	1a1b      	subne	r3, r3, r0
	uxAddress = ( size_t ) ucHeap;

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010dc:	bf14      	ite	ne
 80010de:	4602      	movne	r2, r0
static void prvHeapInit( void )
{
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80010e0:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80010e4:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 80010e6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80010e8:	f023 0307 	bic.w	r3, r3, #7

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80010ec:	4e38      	ldr	r6, [pc, #224]	; (80011d0 <pvPortMalloc+0x118>)
	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
 80010ee:	600b      	str	r3, [r1, #0]
	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
	xStart.xBlockSize = ( size_t ) 0;
 80010f0:	2000      	movs	r0, #0
 80010f2:	6070      	str	r0, [r6, #4]

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80010f4:	6032      	str	r2, [r6, #0]
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
	uxAddress -= xHeapStructSize;
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
	pxEnd = ( void * ) uxAddress;
	pxEnd->xBlockSize = 0;
 80010f6:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80010f8:	6018      	str	r0, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80010fa:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80010fc:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80010fe:	4b35      	ldr	r3, [pc, #212]	; (80011d4 <pvPortMalloc+0x11c>)
	pxEnd->pxNextFreeBlock = NULL;

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001100:	6050      	str	r0, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001102:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001104:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <pvPortMalloc+0x120>)
 8001106:	6018      	str	r0, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001108:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800110c:	602b      	str	r3, [r5, #0]

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800110e:	682f      	ldr	r7, [r5, #0]
 8001110:	4227      	tst	r7, r4
 8001112:	d146      	bne.n	80011a2 <pvPortMalloc+0xea>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8001114:	2c00      	cmp	r4, #0
 8001116:	d045      	beq.n	80011a4 <pvPortMalloc+0xec>
			{
				xWantedSize += xHeapStructSize;
 8001118:	f104 0308 	add.w	r3, r4, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800111c:	0758      	lsls	r0, r3, #29
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800111e:	bf1c      	itt	ne
 8001120:	f023 0307 	bicne.w	r3, r3, #7
 8001124:	3308      	addne	r3, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001126:	2b00      	cmp	r3, #0
 8001128:	d039      	beq.n	800119e <pvPortMalloc+0xe6>
 800112a:	4a2b      	ldr	r2, [pc, #172]	; (80011d8 <pvPortMalloc+0x120>)
 800112c:	6816      	ldr	r6, [r2, #0]
 800112e:	42b3      	cmp	r3, r6
 8001130:	4690      	mov	r8, r2
 8001132:	d836      	bhi.n	80011a2 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
 8001134:	4a26      	ldr	r2, [pc, #152]	; (80011d0 <pvPortMalloc+0x118>)
 8001136:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001138:	6868      	ldr	r0, [r5, #4]
 800113a:	4283      	cmp	r3, r0
 800113c:	d803      	bhi.n	8001146 <pvPortMalloc+0x8e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800113e:	6809      	ldr	r1, [r1, #0]
 8001140:	428d      	cmp	r5, r1
 8001142:	d106      	bne.n	8001152 <pvPortMalloc+0x9a>
 8001144:	e02d      	b.n	80011a2 <pvPortMalloc+0xea>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001146:	682c      	ldr	r4, [r5, #0]
 8001148:	2c00      	cmp	r4, #0
 800114a:	d0f8      	beq.n	800113e <pvPortMalloc+0x86>
 800114c:	462a      	mov	r2, r5
 800114e:	4625      	mov	r5, r4
 8001150:	e7f2      	b.n	8001138 <pvPortMalloc+0x80>
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001152:	6829      	ldr	r1, [r5, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001154:	6814      	ldr	r4, [r2, #0]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001156:	6011      	str	r1, [r2, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001158:	1ac2      	subs	r2, r0, r3
 800115a:	2a10      	cmp	r2, #16
 800115c:	d90f      	bls.n	800117e <pvPortMalloc+0xc6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800115e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001160:	0741      	lsls	r1, r0, #29
 8001162:	d008      	beq.n	8001176 <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001168:	f383 8811 	msr	BASEPRI, r3
 800116c:	f3bf 8f6f 	isb	sy
 8001170:	f3bf 8f4f 	dsb	sy
 8001174:	e7fe      	b.n	8001174 <pvPortMalloc+0xbc>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001176:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001178:	606b      	str	r3, [r5, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800117a:	f7ff ff79 	bl	8001070 <prvInsertBlockIntoFreeList>
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800117e:	4915      	ldr	r1, [pc, #84]	; (80011d4 <pvPortMalloc+0x11c>)
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001180:	686b      	ldr	r3, [r5, #4]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001182:	6808      	ldr	r0, [r1, #0]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001184:	1af2      	subs	r2, r6, r3
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001186:	431f      	orrs	r7, r3
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001188:	4282      	cmp	r2, r0
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
					pxBlock->pxNextFreeBlock = NULL;
 800118a:	f04f 0300 	mov.w	r3, #0
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800118e:	f8c8 2000 	str.w	r2, [r8]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001192:	bf38      	it	cc
 8001194:	600a      	strcc	r2, [r1, #0]
				was	not found. */
				if( pxBlock != pxEnd )
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001196:	3408      	adds	r4, #8
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001198:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800119a:	602b      	str	r3, [r5, #0]
 800119c:	e002      	b.n	80011a4 <pvPortMalloc+0xec>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800119e:	461c      	mov	r4, r3
 80011a0:	e000      	b.n	80011a4 <pvPortMalloc+0xec>
 80011a2:	2400      	movs	r4, #0
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80011a4:	f7ff fd98 	bl	8000cd8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( uint32_t ) pvReturn ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80011a8:	0763      	lsls	r3, r4, #29
 80011aa:	d008      	beq.n	80011be <pvPortMalloc+0x106>
 80011ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b0:	f383 8811 	msr	BASEPRI, r3
 80011b4:	f3bf 8f6f 	isb	sy
 80011b8:	f3bf 8f4f 	dsb	sy
 80011bc:	e7fe      	b.n	80011bc <pvPortMalloc+0x104>
	return pvReturn;
}
 80011be:	4620      	mov	r0, r4
 80011c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011c4:	20000158 	.word	0x20000158
 80011c8:	20003d64 	.word	0x20003d64
 80011cc:	20000164 	.word	0x20000164
 80011d0:	2000015c 	.word	0x2000015c
 80011d4:	20003d68 	.word	0x20003d68
 80011d8:	20000154 	.word	0x20000154

080011dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80011dc:	b510      	push	{r4, lr}
uint8_t *puc = ( uint8_t * ) pv;
BlockLink_t *pxLink;

	if( pv != NULL )
 80011de:	4604      	mov	r4, r0
 80011e0:	b370      	cbz	r0, 8001240 <vPortFree+0x64>

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80011e2:	4a18      	ldr	r2, [pc, #96]	; (8001244 <vPortFree+0x68>)
 80011e4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	4213      	tst	r3, r2
 80011ec:	d108      	bne.n	8001200 <vPortFree+0x24>
 80011ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011f2:	f383 8811 	msr	BASEPRI, r3
 80011f6:	f3bf 8f6f 	isb	sy
 80011fa:	f3bf 8f4f 	dsb	sy
 80011fe:	e7fe      	b.n	80011fe <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001200:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001204:	b141      	cbz	r1, 8001218 <vPortFree+0x3c>
 8001206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800120a:	f383 8811 	msr	BASEPRI, r3
 800120e:	f3bf 8f6f 	isb	sy
 8001212:	f3bf 8f4f 	dsb	sy
 8001216:	e7fe      	b.n	8001216 <vPortFree+0x3a>
		{
			if( pxLink->pxNextFreeBlock == NULL )
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001218:	ea23 0302 	bic.w	r3, r3, r2
 800121c:	f840 3c04 	str.w	r3, [r0, #-4]

				vTaskSuspendAll();
 8001220:	f7ff fcba 	bl	8000b98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001224:	4a08      	ldr	r2, [pc, #32]	; (8001248 <vPortFree+0x6c>)
 8001226:	f854 1c04 	ldr.w	r1, [r4, #-4]
 800122a:	6813      	ldr	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800122c:	f1a4 0008 	sub.w	r0, r4, #8
				pxLink->xBlockSize &= ~xBlockAllocatedBit;

				vTaskSuspendAll();
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001230:	440b      	add	r3, r1
 8001232:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001234:	f7ff ff1c 	bl	8001070 <prvInsertBlockIntoFreeList>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
				}
				( void ) xTaskResumeAll();
 800123c:	f7ff bd4c 	b.w	8000cd8 <xTaskResumeAll>
 8001240:	bd10      	pop	{r4, pc}
 8001242:	bf00      	nop
 8001244:	20003d64 	.word	0x20003d64
 8001248:	20000154 	.word	0x20000154

0800124c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <prvTaskExitError+0x2c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	d008      	beq.n	8001266 <prvTaskExitError+0x1a>
 8001254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001258:	f383 8811 	msr	BASEPRI, r3
 800125c:	f3bf 8f6f 	isb	sy
 8001260:	f3bf 8f4f 	dsb	sy
 8001264:	e7fe      	b.n	8001264 <prvTaskExitError+0x18>
 8001266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800126a:	f383 8811 	msr	BASEPRI, r3
 800126e:	f3bf 8f6f 	isb	sy
 8001272:	f3bf 8f4f 	dsb	sy
 8001276:	e7fe      	b.n	8001276 <prvTaskExitError+0x2a>
 8001278:	20000004 	.word	0x20000004

0800127c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800127c:	4806      	ldr	r0, [pc, #24]	; (8001298 <prvPortStartFirstTask+0x1c>)
 800127e:	6800      	ldr	r0, [r0, #0]
 8001280:	6800      	ldr	r0, [r0, #0]
 8001282:	f380 8808 	msr	MSP, r0
 8001286:	b662      	cpsie	i
 8001288:	b661      	cpsie	f
 800128a:	f3bf 8f4f 	dsb	sy
 800128e:	f3bf 8f6f 	isb	sy
 8001292:	df00      	svc	0
 8001294:	bf00      	nop
 8001296:	0000      	.short	0x0000
 8001298:	e000ed08 	.word	0xe000ed08

0800129c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800129c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80012ac <vPortEnableVFP+0x10>
 80012a0:	6801      	ldr	r1, [r0, #0]
 80012a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80012a6:	6001      	str	r1, [r0, #0]
 80012a8:	4770      	bx	lr
 80012aa:	0000      	.short	0x0000
 80012ac:	e000ed88 	.word	0xe000ed88

080012b0 <pxPortInitialiseStack>:

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80012b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80012b4:	e900 000a 	stmdb	r0, {r1, r3}
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <pxPortInitialiseStack+0x20>)
 80012ba:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80012be:	f06f 0302 	mvn.w	r3, #2
	pxTopOfStack--;
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80012c2:	f840 2c20 	str.w	r2, [r0, #-32]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80012c6:	f840 3c24 	str.w	r3, [r0, #-36]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
 80012ca:	3844      	subs	r0, #68	; 0x44
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	0800124d 	.word	0x0800124d

080012d4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <pxCurrentTCBConst2>)
 80012d6:	6819      	ldr	r1, [r3, #0]
 80012d8:	6808      	ldr	r0, [r1, #0]
 80012da:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80012de:	f380 8809 	msr	PSP, r0
 80012e2:	f3bf 8f6f 	isb	sy
 80012e6:	f04f 0000 	mov.w	r0, #0
 80012ea:	f380 8811 	msr	BASEPRI, r0
 80012ee:	4770      	bx	lr

080012f0 <pxCurrentTCBConst2>:
 80012f0:	200000f8 	.word	0x200000f8

080012f4 <vPortEnterCritical>:
 80012f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80012f8:	f383 8811 	msr	BASEPRI, r3
 80012fc:	f3bf 8f6f 	isb	sy
 8001300:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001304:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <vPortEnterCritical+0x3c>)
 8001306:	6813      	ldr	r3, [r2, #0]
 8001308:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800130a:	2b01      	cmp	r3, #1
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800130c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800130e:	d10d      	bne.n	800132c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001310:	4b08      	ldr	r3, [pc, #32]	; (8001334 <vPortEnterCritical+0x40>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001318:	d008      	beq.n	800132c <vPortEnterCritical+0x38>
 800131a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800131e:	f383 8811 	msr	BASEPRI, r3
 8001322:	f3bf 8f6f 	isb	sy
 8001326:	f3bf 8f4f 	dsb	sy
 800132a:	e7fe      	b.n	800132a <vPortEnterCritical+0x36>
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000004 	.word	0x20000004
 8001334:	e000ed04 	.word	0xe000ed04

08001338 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8001338:	4a08      	ldr	r2, [pc, #32]	; (800135c <vPortExitCritical+0x24>)
 800133a:	6813      	ldr	r3, [r2, #0]
 800133c:	b943      	cbnz	r3, 8001350 <vPortExitCritical+0x18>
 800133e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001342:	f383 8811 	msr	BASEPRI, r3
 8001346:	f3bf 8f6f 	isb	sy
 800134a:	f3bf 8f4f 	dsb	sy
 800134e:	e7fe      	b.n	800134e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001350:	3b01      	subs	r3, #1
 8001352:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001354:	b90b      	cbnz	r3, 800135a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001356:	f383 8811 	msr	BASEPRI, r3
 800135a:	4770      	bx	lr
 800135c:	20000004 	.word	0x20000004

08001360 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001360:	f3ef 8009 	mrs	r0, PSP
 8001364:	f3bf 8f6f 	isb	sy
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <pxCurrentTCBConst>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	f01e 0f10 	tst.w	lr, #16
 8001370:	bf08      	it	eq
 8001372:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001376:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800137a:	6010      	str	r0, [r2, #0]
 800137c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8001380:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001384:	f380 8811 	msr	BASEPRI, r0
 8001388:	f3bf 8f4f 	dsb	sy
 800138c:	f3bf 8f6f 	isb	sy
 8001390:	f7ff fd92 	bl	8000eb8 <vTaskSwitchContext>
 8001394:	f04f 0000 	mov.w	r0, #0
 8001398:	f380 8811 	msr	BASEPRI, r0
 800139c:	bc08      	pop	{r3}
 800139e:	6819      	ldr	r1, [r3, #0]
 80013a0:	6808      	ldr	r0, [r1, #0]
 80013a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013a6:	f01e 0f10 	tst.w	lr, #16
 80013aa:	bf08      	it	eq
 80013ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80013b0:	f380 8809 	msr	PSP, r0
 80013b4:	f3bf 8f6f 	isb	sy
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop

080013bc <pxCurrentTCBConst>:
 80013bc:	200000f8 	.word	0x200000f8

080013c0 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80013c0:	b508      	push	{r3, lr}

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80013c2:	f3ef 8311 	mrs	r3, BASEPRI
 80013c6:	f04f 0250 	mov.w	r2, #80	; 0x50
 80013ca:	f382 8811 	msr	BASEPRI, r2
 80013ce:	f3bf 8f6f 	isb	sy
 80013d2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80013d6:	f7ff fbe7 	bl	8000ba8 <xTaskIncrementTick>
 80013da:	b118      	cbz	r0, 80013e4 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <xPortSysTickHandler+0x2c>)
 80013de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80013e2:	601a      	str	r2, [r3, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80013e4:	2300      	movs	r3, #0
 80013e6:	f383 8811 	msr	BASEPRI, r3
 80013ea:	bd08      	pop	{r3, pc}
 80013ec:	e000ed04 	.word	0xe000ed04

080013f0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80013f0:	4b06      	ldr	r3, [pc, #24]	; (800140c <vPortSetupTimerInterrupt+0x1c>)
 80013f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <vPortSetupTimerInterrupt+0x20>)
 80013fe:	3b01      	subs	r3, #1
 8001400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <vPortSetupTimerInterrupt+0x24>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000008 	.word	0x20000008
 8001410:	e000e014 	.word	0xe000e014
 8001414:	e000e010 	.word	0xe000e010

08001418 <xPortStartScheduler>:
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001418:	4b31      	ldr	r3, [pc, #196]	; (80014e0 <xPortStartScheduler+0xc8>)
 800141a:	4a32      	ldr	r2, [pc, #200]	; (80014e4 <xPortStartScheduler+0xcc>)

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800141c:	b513      	push	{r0, r1, r4, lr}
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800141e:	6819      	ldr	r1, [r3, #0]
 8001420:	4291      	cmp	r1, r2
 8001422:	d108      	bne.n	8001436 <xPortStartScheduler+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001428:	f383 8811 	msr	BASEPRI, r3
 800142c:	f3bf 8f6f 	isb	sy
 8001430:	f3bf 8f4f 	dsb	sy
 8001434:	e7fe      	b.n	8001434 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b2b      	ldr	r3, [pc, #172]	; (80014e8 <xPortStartScheduler+0xd0>)
 800143a:	429a      	cmp	r2, r3
 800143c:	d108      	bne.n	8001450 <xPortStartScheduler+0x38>
 800143e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001442:	f383 8811 	msr	BASEPRI, r3
 8001446:	f3bf 8f6f 	isb	sy
 800144a:	f3bf 8f4f 	dsb	sy
 800144e:	e7fe      	b.n	800144e <xPortStartScheduler+0x36>
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001450:	4b26      	ldr	r3, [pc, #152]	; (80014ec <xPortStartScheduler+0xd4>)
 8001452:	781a      	ldrb	r2, [r3, #0]
 8001454:	b2d2      	uxtb	r2, r2
 8001456:	9201      	str	r2, [sp, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001458:	22ff      	movs	r2, #255	; 0xff
 800145a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800145c:	781b      	ldrb	r3, [r3, #0]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800145e:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <xPortStartScheduler+0xd8>)
		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001460:	b2db      	uxtb	r3, r3
 8001462:	f88d 3003 	strb.w	r3, [sp, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001466:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800146a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800146e:	7013      	strb	r3, [r2, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001470:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <xPortStartScheduler+0xdc>)
 8001472:	2207      	movs	r2, #7
 8001474:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001476:	2100      	movs	r1, #0
 8001478:	f89d 0003 	ldrb.w	r0, [sp, #3]
 800147c:	0600      	lsls	r0, r0, #24
 800147e:	f102 34ff 	add.w	r4, r2, #4294967295
 8001482:	d508      	bpl.n	8001496 <xPortStartScheduler+0x7e>
		{
			ulMaxPRIGROUPValue--;
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001484:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001488:	0052      	lsls	r2, r2, #1
 800148a:	b2d2      	uxtb	r2, r2
 800148c:	f88d 2003 	strb.w	r2, [sp, #3]
 8001490:	2101      	movs	r1, #1
 8001492:	4622      	mov	r2, r4
 8001494:	e7f0      	b.n	8001478 <xPortStartScheduler+0x60>
 8001496:	b101      	cbz	r1, 800149a <xPortStartScheduler+0x82>
 8001498:	601a      	str	r2, [r3, #0]
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	0212      	lsls	r2, r2, #8
 800149e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80014a2:	601a      	str	r2, [r3, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80014a4:	9b01      	ldr	r3, [sp, #4]
 80014a6:	4a11      	ldr	r2, [pc, #68]	; (80014ec <xPortStartScheduler+0xd4>)
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	7013      	strb	r3, [r2, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <xPortStartScheduler+0xe0>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80014b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80014bc:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80014be:	f7ff ff97 	bl	80013f0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80014c2:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <xPortStartScheduler+0xe4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80014c8:	f7ff fee8 	bl	800129c <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80014cc:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <xPortStartScheduler+0xe8>)
 80014ce:	6813      	ldr	r3, [r2, #0]
 80014d0:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80014d4:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80014d6:	f7ff fed1 	bl	800127c <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 80014da:	f7ff feb7 	bl	800124c <prvTaskExitError>
 80014de:	bf00      	nop
 80014e0:	e000ed00 	.word	0xe000ed00
 80014e4:	410fc271 	.word	0x410fc271
 80014e8:	410fc270 	.word	0x410fc270
 80014ec:	e000e400 	.word	0xe000e400
 80014f0:	20003d6c 	.word	0x20003d6c
 80014f4:	20003d70 	.word	0x20003d70
 80014f8:	e000ed20 	.word	0xe000ed20
 80014fc:	20000004 	.word	0x20000004
 8001500:	e000ef34 	.word	0xe000ef34

08001504 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8001504:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001508:	2b0f      	cmp	r3, #15
 800150a:	d90e      	bls.n	800152a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800150c:	4a10      	ldr	r2, [pc, #64]	; (8001550 <vPortValidateInterruptPriority+0x4c>)
 800150e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001510:	4a10      	ldr	r2, [pc, #64]	; (8001554 <vPortValidateInterruptPriority+0x50>)
 8001512:	7812      	ldrb	r2, [r2, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d908      	bls.n	800152a <vPortValidateInterruptPriority+0x26>
 8001518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800151c:	f383 8811 	msr	BASEPRI, r3
 8001520:	f3bf 8f6f 	isb	sy
 8001524:	f3bf 8f4f 	dsb	sy
 8001528:	e7fe      	b.n	8001528 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <vPortValidateInterruptPriority+0x54>)
 800152c:	4a0b      	ldr	r2, [pc, #44]	; (800155c <vPortValidateInterruptPriority+0x58>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001536:	4293      	cmp	r3, r2
 8001538:	d908      	bls.n	800154c <vPortValidateInterruptPriority+0x48>
 800153a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800153e:	f383 8811 	msr	BASEPRI, r3
 8001542:	f3bf 8f6f 	isb	sy
 8001546:	f3bf 8f4f 	dsb	sy
 800154a:	e7fe      	b.n	800154a <vPortValidateInterruptPriority+0x46>
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000e3f0 	.word	0xe000e3f0
 8001554:	20003d6c 	.word	0x20003d6c
 8001558:	e000ed0c 	.word	0xe000ed0c
 800155c:	20003d70 	.word	0x20003d70

08001560 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001560:	f100 0308 	add.w	r3, r0, #8
 8001564:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001566:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800156a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800156c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800156e:	2300      	movs	r3, #0
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001570:	6082      	str	r2, [r0, #8]
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001572:	6003      	str	r3, [r0, #0]
 8001574:	4770      	bx	lr

08001576 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001576:	2300      	movs	r3, #0
 8001578:	6103      	str	r3, [r0, #16]
 800157a:	4770      	bx	lr

0800157c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800157c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800157e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001580:	689a      	ldr	r2, [r3, #8]
 8001582:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001584:	689a      	ldr	r2, [r3, #8]
 8001586:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001588:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800158a:	6803      	ldr	r3, [r0, #0]

	pxIndex->pxPrevious->pxNext = pxNewListItem;
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800158c:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 800158e:	3301      	adds	r3, #1
 8001590:	6003      	str	r3, [r0, #0]
 8001592:	4770      	bx	lr

08001594 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001594:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001596:	1c53      	adds	r3, r2, #1
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001598:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800159a:	d101      	bne.n	80015a0 <vListInsert+0xc>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800159c:	6903      	ldr	r3, [r0, #16]
 800159e:	e007      	b.n	80015b0 <vListInsert+0x1c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80015a0:	f100 0308 	add.w	r3, r0, #8
 80015a4:	685c      	ldr	r4, [r3, #4]
 80015a6:	6825      	ldr	r5, [r4, #0]
 80015a8:	42aa      	cmp	r2, r5
 80015aa:	d301      	bcc.n	80015b0 <vListInsert+0x1c>
 80015ac:	4623      	mov	r3, r4
 80015ae:	e7f9      	b.n	80015a4 <vListInsert+0x10>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80015b4:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80015b6:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80015b8:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80015ba:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxPrevious = pxIterator;
	pxIterator->pxNext = pxNewListItem;

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80015bc:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
 80015be:	3301      	adds	r3, #1
 80015c0:	6003      	str	r3, [r0, #0]
 80015c2:	bd30      	pop	{r4, r5, pc}

080015c4 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80015c4:	6841      	ldr	r1, [r0, #4]
 80015c6:	6882      	ldr	r2, [r0, #8]

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80015c8:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80015ca:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80015cc:	6882      	ldr	r2, [r0, #8]
 80015ce:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80015d0:	6859      	ldr	r1, [r3, #4]
 80015d2:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80015d4:	bf08      	it	eq
 80015d6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80015d8:	2200      	movs	r2, #0
 80015da:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80015dc:	6818      	ldr	r0, [r3, #0]
 80015de:	3801      	subs	r0, #1
 80015e0:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80015e2:	4770      	bx	lr

080015e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80015e4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80015e6:	f7ff fa9f 	bl	8000b28 <vTaskStartScheduler>
  
  return osOK;
}
 80015ea:	2000      	movs	r0, #0
 80015ec:	bd08      	pop	{r3, pc}

080015ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80015ee:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015f0:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 80015f4:	8a02      	ldrh	r2, [r0, #16]
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80015f6:	460b      	mov	r3, r1
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80015f8:	e890 0042 	ldmia.w	r0, {r1, r6}
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80015fc:	b086      	sub	sp, #24
/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
  
  if (priority != osPriorityError) {
 80015fe:	2c84      	cmp	r4, #132	; 0x84
 8001600:	f04f 0500 	mov.w	r5, #0
    fpriority += (priority - osPriorityIdle);
 8001604:	bf14      	ite	ne
 8001606:	3403      	addne	r4, #3
extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001608:	462c      	moveq	r4, r5
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
  TaskHandle_t handle;
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800160a:	a805      	add	r0, sp, #20
 800160c:	9001      	str	r0, [sp, #4]
 800160e:	9503      	str	r5, [sp, #12]
 8001610:	9502      	str	r5, [sp, #8]
 8001612:	9400      	str	r4, [sp, #0]
 8001614:	4630      	mov	r0, r6
 8001616:	f7ff fa69 	bl	8000aec <xTaskGenericCreate>
 800161a:	2801      	cmp	r0, #1
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
  }
  
  return handle;
 800161c:	bf0c      	ite	eq
 800161e:	9805      	ldreq	r0, [sp, #20]
  
  
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              &handle) != pdPASS)  {
    return NULL;
 8001620:	2000      	movne	r0, #0
  }
  
  return handle;
}
 8001622:	b006      	add	sp, #24
 8001624:	bd70      	pop	{r4, r5, r6, pc}

08001626 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001626:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001628:	2800      	cmp	r0, #0
 800162a:	bf08      	it	eq
 800162c:	2001      	moveq	r0, #1
 800162e:	f7ff fbc9 	bl	8000dc4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001632:	2000      	movs	r0, #0
 8001634:	bd08      	pop	{r3, pc}

08001636 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8001636:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001638:	f7ff fcba 	bl	8000fb0 <xTaskGetSchedulerState>
 800163c:	2801      	cmp	r0, #1
 800163e:	d003      	beq.n	8001648 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8001640:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 8001644:	f7ff bebc 	b.w	80013c0 <xPortSysTickHandler>
 8001648:	bd08      	pop	{r3, pc}

0800164a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800164a:	6803      	ldr	r3, [r0, #0]
 800164c:	68da      	ldr	r2, [r3, #12]
 800164e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001652:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	f022 0201 	bic.w	r2, r2, #1
 800165a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800165c:	2320      	movs	r3, #32
 800165e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8001662:	4770      	bx	lr

08001664 <HAL_UART_Transmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8001664:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001668:	2b20      	cmp	r3, #32
 800166a:	d118      	bne.n	800169e <HAL_UART_Transmit_IT+0x3a>
  {
    if((pData == NULL ) || (Size == 0U)) 
 800166c:	b1a9      	cbz	r1, 800169a <HAL_UART_Transmit_IT+0x36>
 800166e:	b1a2      	cbz	r2, 800169a <HAL_UART_Transmit_IT+0x36>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 8001670:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001674:	2b01      	cmp	r3, #1
 8001676:	d012      	beq.n	800169e <HAL_UART_Transmit_IT+0x3a>
    
    huart->pTxBuffPtr = pData;
 8001678:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 800167a:	8482      	strh	r2, [r0, #36]	; 0x24
    huart->TxXferCount = Size;
 800167c:	84c2      	strh	r2, [r0, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800167e:	2300      	movs	r3, #0

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001680:	6801      	ldr	r1, [r0, #0]
    
    huart->pTxBuffPtr = pData;
    huart->TxXferSize = Size;
    huart->TxXferCount = Size;

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001682:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001684:	2221      	movs	r2, #33	; 0x21
 8001686:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800168a:	68ca      	ldr	r2, [r1, #12]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800168c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001690:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001694:	60ca      	str	r2, [r1, #12]
    
    return HAL_OK;
 8001696:	4618      	mov	r0, r3
 8001698:	4770      	bx	lr
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return HAL_ERROR;
 800169a:	2001      	movs	r0, #1
 800169c:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;   
 800169e:	2002      	movs	r0, #2
  }
}
 80016a0:	4770      	bx	lr

080016a2 <HAL_UART_Receive_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
 80016a2:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80016a6:	2b20      	cmp	r3, #32
 80016a8:	d11c      	bne.n	80016e4 <HAL_UART_Receive_IT+0x42>
  {
    if((pData == NULL ) || (Size == 0U)) 
 80016aa:	b1c9      	cbz	r1, 80016e0 <HAL_UART_Receive_IT+0x3e>
 80016ac:	b1c2      	cbz	r2, 80016e0 <HAL_UART_Receive_IT+0x3e>
    {
      return HAL_ERROR;
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 80016ae:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d016      	beq.n	80016e4 <HAL_UART_Receive_IT+0x42>
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
 80016b6:	8582      	strh	r2, [r0, #44]	; 0x2c
    huart->RxXferCount = Size;
 80016b8:	85c2      	strh	r2, [r0, #46]	; 0x2e
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016ba:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016bc:	2222      	movs	r2, #34	; 0x22
    
    huart->pRxBuffPtr = pData;
    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80016be:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80016c0:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016c4:	6802      	ldr	r2, [r0, #0]
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
    
    huart->pRxBuffPtr = pData;
 80016c6:	6281      	str	r1, [r0, #40]	; 0x28
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016c8:	6951      	ldr	r1, [r2, #20]
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;
    
    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80016ca:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016ce:	f041 0101 	orr.w	r1, r1, #1
 80016d2:	6151      	str	r1, [r2, #20]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80016d4:	68d1      	ldr	r1, [r2, #12]
 80016d6:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 80016da:	60d1      	str	r1, [r2, #12]
    
    return HAL_OK;
 80016dc:	4618      	mov	r0, r3
 80016de:	4770      	bx	lr
  /* Check that a Rx process is not already ongoing */ 
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U)) 
    {
      return HAL_ERROR;
 80016e0:	2001      	movs	r0, #1
 80016e2:	4770      	bx	lr
    
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY; 
 80016e4:	2002      	movs	r0, #2
  }
}
 80016e6:	4770      	bx	lr

080016e8 <UART_Receive_IT>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80016e8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80016ec:	2b22      	cmp	r3, #34	; 0x22
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80016ee:	b510      	push	{r4, lr}
  uint16_t* tmp;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
 80016f0:	d132      	bne.n	8001758 <UART_Receive_IT+0x70>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80016f2:	6883      	ldr	r3, [r0, #8]
 80016f4:	6901      	ldr	r1, [r0, #16]
 80016f6:	6802      	ldr	r2, [r0, #0]
 80016f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016fc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80016fe:	d10b      	bne.n	8001718 <UART_Receive_IT+0x30>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8001700:	6852      	ldr	r2, [r2, #4]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX) 
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
    {
      tmp = (uint16_t*) huart->pRxBuffPtr;
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001702:	b921      	cbnz	r1, 800170e <UART_Receive_IT+0x26>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FFU);
 8001704:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001708:	f823 2b02 	strh.w	r2, [r3], #2
 800170c:	e002      	b.n	8001714 <UART_Receive_IT+0x2c>
        huart->pRxBuffPtr += 2U;
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FFU);
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8001714:	6283      	str	r3, [r0, #40]	; 0x28
 8001716:	e00a      	b.n	800172e <UART_Receive_IT+0x46>
      }
    }
    else
    {
      if(huart->Init.Parity == UART_PARITY_NONE)
 8001718:	b919      	cbnz	r1, 8001722 <UART_Receive_IT+0x3a>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FFU);
 800171a:	1c59      	adds	r1, r3, #1
 800171c:	6281      	str	r1, [r0, #40]	; 0x28
 800171e:	6852      	ldr	r2, [r2, #4]
 8001720:	e004      	b.n	800172c <UART_Receive_IT+0x44>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
 8001722:	6852      	ldr	r2, [r2, #4]
 8001724:	1c59      	adds	r1, r3, #1
 8001726:	6281      	str	r1, [r0, #40]	; 0x28
 8001728:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800172c:	701a      	strb	r2, [r3, #0]
      }
    }

    if(--huart->RxXferCount == 0U)
 800172e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8001730:	3c01      	subs	r4, #1
 8001732:	b2a4      	uxth	r4, r4
 8001734:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8001736:	b98c      	cbnz	r4, 800175c <UART_Receive_IT+0x74>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001738:	6803      	ldr	r3, [r0, #0]
 800173a:	68da      	ldr	r2, [r3, #12]
 800173c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001740:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001742:	695a      	ldr	r2, [r3, #20]
 8001744:	f022 0201 	bic.w	r2, r2, #1
 8001748:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800174a:	2320      	movs	r3, #32
 800174c:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
     
      HAL_UART_RxCpltCallback(huart);
 8001750:	f7fe fd60 	bl	8000214 <HAL_UART_RxCpltCallback>
 8001754:	4620      	mov	r0, r4
 8001756:	bd10      	pop	{r4, pc}
    }
    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001758:	2002      	movs	r0, #2
 800175a:	bd10      	pop	{r4, pc}
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007FU);
      }
    }

    if(--huart->RxXferCount == 0U)
 800175c:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 800175e:	bd10      	pop	{r4, pc}

08001760 <HAL_UART_IRQHandler>:
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001760:	6803      	ldr	r3, [r0, #0]
 8001762:	681a      	ldr	r2, [r3, #0]
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001764:	68d9      	ldr	r1, [r3, #12]
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001766:	b570      	push	{r4, r5, r6, lr}
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 8001768:	0716      	lsls	r6, r2, #28
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800176a:	4604      	mov	r4, r0
   uint32_t isrflags   = READ_REG(huart->Instance->SR);
   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800176c:	695d      	ldr	r5, [r3, #20]
   uint32_t errorflags = 0x00U;
   uint32_t dmarequest = 0x00U;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
  if(errorflags == RESET)
 800176e:	d107      	bne.n	8001780 <HAL_UART_IRQHandler+0x20>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001770:	0696      	lsls	r6, r2, #26
 8001772:	d55a      	bpl.n	800182a <HAL_UART_IRQHandler+0xca>
 8001774:	068d      	lsls	r5, r1, #26
 8001776:	d558      	bpl.n	800182a <HAL_UART_IRQHandler+0xca>
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8001778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if(errorflags == RESET)
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
    {
      UART_Receive_IT(huart);
 800177c:	f7ff bfb4 	b.w	80016e8 <UART_Receive_IT>
      return;
    }
  }

  /* If some errors occur */
  if((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001780:	f015 0001 	ands.w	r0, r5, #1
 8001784:	d102      	bne.n	800178c <HAL_UART_IRQHandler+0x2c>
 8001786:	f411 7f90 	tst.w	r1, #288	; 0x120
 800178a:	d04e      	beq.n	800182a <HAL_UART_IRQHandler+0xca>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if(((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800178c:	07d3      	lsls	r3, r2, #31
 800178e:	d505      	bpl.n	800179c <HAL_UART_IRQHandler+0x3c>
 8001790:	05ce      	lsls	r6, r1, #23
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001792:	bf42      	ittt	mi
 8001794:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8001796:	f043 0301 	orrmi.w	r3, r3, #1
 800179a:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    }
    
    /* UART noise error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800179c:	0755      	lsls	r5, r2, #29
 800179e:	d504      	bpl.n	80017aa <HAL_UART_IRQHandler+0x4a>
 80017a0:	b118      	cbz	r0, 80017aa <HAL_UART_IRQHandler+0x4a>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80017a2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017a4:	f043 0302 	orr.w	r3, r3, #2
 80017a8:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART frame error interrupt occurred -----------------------------------*/
    if(((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017aa:	0793      	lsls	r3, r2, #30
 80017ac:	d504      	bpl.n	80017b8 <HAL_UART_IRQHandler+0x58>
 80017ae:	b118      	cbz	r0, 80017b8 <HAL_UART_IRQHandler+0x58>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80017b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	63e3      	str	r3, [r4, #60]	; 0x3c
    }
    
    /* UART Over-Run interrupt occurred --------------------------------------*/
    if(((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80017b8:	0716      	lsls	r6, r2, #28
 80017ba:	d504      	bpl.n	80017c6 <HAL_UART_IRQHandler+0x66>
 80017bc:	b118      	cbz	r0, 80017c6 <HAL_UART_IRQHandler+0x66>
    { 
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80017be:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017c0:	f043 0308 	orr.w	r3, r3, #8
 80017c4:	63e3      	str	r3, [r4, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/    
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80017c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d066      	beq.n	800189a <HAL_UART_IRQHandler+0x13a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if(((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80017cc:	0695      	lsls	r5, r2, #26
 80017ce:	d504      	bpl.n	80017da <HAL_UART_IRQHandler+0x7a>
 80017d0:	0688      	lsls	r0, r1, #26
 80017d2:	d502      	bpl.n	80017da <HAL_UART_IRQHandler+0x7a>
      {
        UART_Receive_IT(huart);
 80017d4:	4620      	mov	r0, r4
 80017d6:	f7ff ff87 	bl	80016e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80017da:	6823      	ldr	r3, [r4, #0]
 80017dc:	695b      	ldr	r3, [r3, #20]
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017de:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80017e0:	0711      	lsls	r1, r2, #28
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80017e2:	4620      	mov	r0, r4
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
      if(((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80017e4:	d402      	bmi.n	80017ec <HAL_UART_IRQHandler+0x8c>
 80017e6:	f013 0540 	ands.w	r5, r3, #64	; 0x40
 80017ea:	d01a      	beq.n	8001822 <HAL_UART_IRQHandler+0xc2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80017ec:	f7ff ff2d 	bl	800164a <UART_EndRxTransfer>
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80017f0:	6823      	ldr	r3, [r4, #0]
 80017f2:	695a      	ldr	r2, [r3, #20]
 80017f4:	0652      	lsls	r2, r2, #25
 80017f6:	d510      	bpl.n	800181a <HAL_UART_IRQHandler+0xba>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017f8:	695a      	ldr	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 80017fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
        UART_EndRxTransfer(huart);
        
        /* Disable the UART DMA Rx request if enabled */
        if(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80017fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001800:	615a      	str	r2, [r3, #20]
          
          /* Abort the UART DMA Rx channel */
          if(huart->hdmarx != NULL)
 8001802:	b150      	cbz	r0, 800181a <HAL_UART_IRQHandler+0xba>
          {
            /* Set the UART DMA Abort callback : 
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001804:	4b25      	ldr	r3, [pc, #148]	; (800189c <HAL_UART_IRQHandler+0x13c>)
 8001806:	6503      	str	r3, [r0, #80]	; 0x50
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001808:	f000 fbac 	bl	8001f64 <HAL_DMA_Abort_IT>
 800180c:	2800      	cmp	r0, #0
 800180e:	d044      	beq.n	800189a <HAL_UART_IRQHandler+0x13a>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001810:	6b60      	ldr	r0, [r4, #52]	; 0x34
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
  {
    UART_EndTransmit_IT(huart);
    return;
  }
}
 8001812:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001816:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001818:	4718      	bx	r3
            }
          }
          else
          {
            /* Call user error callback */
            HAL_UART_ErrorCallback(huart);
 800181a:	4620      	mov	r0, r4
 800181c:	f7fe fdf8 	bl	8000410 <HAL_UART_ErrorCallback>
 8001820:	bd70      	pop	{r4, r5, r6, pc}
      }
      else
      {
        /* Non Blocking error : transfer could go on. 
           Error is notified to user through user error callback */
        HAL_UART_ErrorCallback(huart);
 8001822:	f7fe fdf5 	bl	8000410 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001826:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001828:	bd70      	pop	{r4, r5, r6, pc}
    }
    return;
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800182a:	0616      	lsls	r6, r2, #24
 800182c:	d527      	bpl.n	800187e <HAL_UART_IRQHandler+0x11e>
 800182e:	060d      	lsls	r5, r1, #24
 8001830:	d525      	bpl.n	800187e <HAL_UART_IRQHandler+0x11e>
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;
  
  /* Check that a Tx process is ongoing */
  if(huart->gState == HAL_UART_STATE_BUSY_TX)
 8001832:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001836:	2a21      	cmp	r2, #33	; 0x21
 8001838:	d12f      	bne.n	800189a <HAL_UART_IRQHandler+0x13a>
  {
    if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800183a:	68a2      	ldr	r2, [r4, #8]
 800183c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8001840:	6a22      	ldr	r2, [r4, #32]
 8001842:	d10a      	bne.n	800185a <HAL_UART_IRQHandler+0xfa>
    {
      tmp = (uint16_t*) huart->pTxBuffPtr;
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FFU);
 8001844:	8811      	ldrh	r1, [r2, #0]
 8001846:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800184a:	6059      	str	r1, [r3, #4]
      if(huart->Init.Parity == UART_PARITY_NONE)
 800184c:	6921      	ldr	r1, [r4, #16]
 800184e:	b909      	cbnz	r1, 8001854 <HAL_UART_IRQHandler+0xf4>
      {
        huart->pTxBuffPtr += 2U;
 8001850:	3202      	adds	r2, #2
 8001852:	e000      	b.n	8001856 <HAL_UART_IRQHandler+0xf6>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001854:	3201      	adds	r2, #1
 8001856:	6222      	str	r2, [r4, #32]
 8001858:	e003      	b.n	8001862 <HAL_UART_IRQHandler+0x102>
      }
    } 
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FFU);
 800185a:	1c51      	adds	r1, r2, #1
 800185c:	6221      	str	r1, [r4, #32]
 800185e:	7812      	ldrb	r2, [r2, #0]
 8001860:	605a      	str	r2, [r3, #4]
    }

    if(--huart->TxXferCount == 0U)
 8001862:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001864:	3a01      	subs	r2, #1
 8001866:	b292      	uxth	r2, r2
 8001868:	84e2      	strh	r2, [r4, #38]	; 0x26
 800186a:	b9b2      	cbnz	r2, 800189a <HAL_UART_IRQHandler+0x13a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800186c:	68da      	ldr	r2, [r3, #12]
 800186e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001872:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */    
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800187a:	60da      	str	r2, [r3, #12]
 800187c:	bd70      	pop	{r4, r5, r6, pc}
    UART_Transmit_IT(huart);
    return;
  }
  
  /* UART in mode Transmitter end --------------------------------------------*/
  if(((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800187e:	0650      	lsls	r0, r2, #25
 8001880:	d50b      	bpl.n	800189a <HAL_UART_IRQHandler+0x13a>
 8001882:	064a      	lsls	r2, r1, #25
 8001884:	d509      	bpl.n	800189a <HAL_UART_IRQHandler+0x13a>
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */    
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001886:	68da      	ldr	r2, [r3, #12]
 8001888:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800188c:	60da      	str	r2, [r3, #12]
  
  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800188e:	2320      	movs	r3, #32
 8001890:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    
  HAL_UART_TxCpltCallback(huart);
 8001894:	4620      	mov	r0, r4
 8001896:	f7fe fca3 	bl	80001e0 <HAL_UART_TxCpltCallback>
 800189a:	bd70      	pop	{r4, r5, r6, pc}
 800189c:	080018a1 	.word	0x080018a1

080018a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80018a0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0;
 80018a8:	84c3      	strh	r3, [r0, #38]	; 0x26

  HAL_UART_ErrorCallback(huart);
 80018aa:	f7fe fdb1 	bl	8000410 <HAL_UART_ErrorCallback>
 80018ae:	bd08      	pop	{r3, pc}

080018b0 <HAL_RCC_OscConfig>:
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b0:	6803      	ldr	r3, [r0, #0]
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80018b6:	4604      	mov	r4, r0
 uint32_t tickstart = 0U;  
 
  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b8:	07d8      	lsls	r0, r3, #31
 80018ba:	d403      	bmi.n	80018c4 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	0799      	lsls	r1, r3, #30
 80018c0:	d437      	bmi.n	8001932 <HAL_RCC_OscConfig+0x82>
 80018c2:	e087      	b.n	80019d4 <HAL_RCC_OscConfig+0x124>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018c4:	4ba7      	ldr	r3, [pc, #668]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	f002 020c 	and.w	r2, r2, #12
 80018cc:	2a04      	cmp	r2, #4
 80018ce:	d007      	beq.n	80018e0 <HAL_RCC_OscConfig+0x30>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018d0:	689a      	ldr	r2, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018d2:	f002 020c 	and.w	r2, r2, #12
 80018d6:	2a08      	cmp	r2, #8
 80018d8:	d10b      	bne.n	80018f2 <HAL_RCC_OscConfig+0x42>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	025a      	lsls	r2, r3, #9
 80018de:	d508      	bpl.n	80018f2 <HAL_RCC_OscConfig+0x42>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	4ba0      	ldr	r3, [pc, #640]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	039b      	lsls	r3, r3, #14
 80018e6:	d5e9      	bpl.n	80018bc <HAL_RCC_OscConfig+0xc>
 80018e8:	6863      	ldr	r3, [r4, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1e6      	bne.n	80018bc <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 80018ee:	2001      	movs	r0, #1
 80018f0:	e134      	b.n	8001b5c <HAL_RCC_OscConfig+0x2ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f2:	4b9d      	ldr	r3, [pc, #628]	; (8001b68 <HAL_RCC_OscConfig+0x2b8>)
 80018f4:	7922      	ldrb	r2, [r4, #4]
 80018f6:	701a      	strb	r2, [r3, #0]
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f8:	6863      	ldr	r3, [r4, #4]
 80018fa:	b16b      	cbz	r3, 8001918 <HAL_RCC_OscConfig+0x68>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fc:	f000 fbe2 	bl	80020c4 <HAL_GetTick>
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001900:	4d98      	ldr	r5, [pc, #608]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
      
      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001902:	4606      	mov	r6, r0
      
        /* Wait till HSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001904:	682b      	ldr	r3, [r5, #0]
 8001906:	039f      	lsls	r7, r3, #14
 8001908:	d4d8      	bmi.n	80018bc <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800190a:	f000 fbdb 	bl	80020c4 <HAL_GetTick>
 800190e:	1b80      	subs	r0, r0, r6
 8001910:	2864      	cmp	r0, #100	; 0x64
 8001912:	d9f7      	bls.n	8001904 <HAL_RCC_OscConfig+0x54>
          {
            return HAL_TIMEOUT;
 8001914:	2003      	movs	r0, #3
 8001916:	e121      	b.n	8001b5c <HAL_RCC_OscConfig+0x2ac>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f000 fbd4 	bl	80020c4 <HAL_GetTick>

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800191c:	4d91      	ldr	r5, [pc, #580]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191e:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001920:	682b      	ldr	r3, [r5, #0]
 8001922:	0398      	lsls	r0, r3, #14
 8001924:	d5ca      	bpl.n	80018bc <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001926:	f000 fbcd 	bl	80020c4 <HAL_GetTick>
 800192a:	1b80      	subs	r0, r0, r6
 800192c:	2864      	cmp	r0, #100	; 0x64
 800192e:	d9f7      	bls.n	8001920 <HAL_RCC_OscConfig+0x70>
 8001930:	e7f0      	b.n	8001914 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001932:	4b8c      	ldr	r3, [pc, #560]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
 8001934:	689a      	ldr	r2, [r3, #8]
 8001936:	f012 0f0c 	tst.w	r2, #12
 800193a:	d007      	beq.n	800194c <HAL_RCC_OscConfig+0x9c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193c:	689a      	ldr	r2, [r3, #8]
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800193e:	f002 020c 	and.w	r2, r2, #12
 8001942:	2a08      	cmp	r2, #8
 8001944:	d117      	bne.n	8001976 <HAL_RCC_OscConfig+0xc6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	0259      	lsls	r1, r3, #9
 800194a:	d414      	bmi.n	8001976 <HAL_RCC_OscConfig+0xc6>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194c:	4b85      	ldr	r3, [pc, #532]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	0792      	lsls	r2, r2, #30
 8001952:	d502      	bpl.n	800195a <HAL_RCC_OscConfig+0xaa>
 8001954:	68e2      	ldr	r2, [r4, #12]
 8001956:	2a01      	cmp	r2, #1
 8001958:	d1c9      	bne.n	80018ee <HAL_RCC_OscConfig+0x3e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195a:	681a      	ldr	r2, [r3, #0]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	21f8      	movs	r1, #248	; 0xf8
 800195e:	fa91 f1a1 	rbit	r1, r1
 8001962:	6920      	ldr	r0, [r4, #16]
 8001964:	fab1 f181 	clz	r1, r1
 8001968:	fa00 f101 	lsl.w	r1, r0, r1
 800196c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001970:	430a      	orrs	r2, r1
 8001972:	601a      	str	r2, [r3, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001974:	e02e      	b.n	80019d4 <HAL_RCC_OscConfig+0x124>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001976:	68e2      	ldr	r2, [r4, #12]
 8001978:	4b7c      	ldr	r3, [pc, #496]	; (8001b6c <HAL_RCC_OscConfig+0x2bc>)
 800197a:	b1ea      	cbz	r2, 80019b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001980:	f000 fba0 	bl	80020c4 <HAL_GetTick>

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001984:	4d77      	ldr	r5, [pc, #476]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	4606      	mov	r6, r0

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001988:	682b      	ldr	r3, [r5, #0]
 800198a:	4876      	ldr	r0, [pc, #472]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
 800198c:	079b      	lsls	r3, r3, #30
 800198e:	d405      	bmi.n	800199c <HAL_RCC_OscConfig+0xec>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001990:	f000 fb98 	bl	80020c4 <HAL_GetTick>
 8001994:	1b80      	subs	r0, r0, r6
 8001996:	2802      	cmp	r0, #2
 8001998:	d9f6      	bls.n	8001988 <HAL_RCC_OscConfig+0xd8>
 800199a:	e7bb      	b.n	8001914 <HAL_RCC_OscConfig+0x64>
            return HAL_TIMEOUT;
          }       
        } 
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199c:	6803      	ldr	r3, [r0, #0]
 800199e:	22f8      	movs	r2, #248	; 0xf8
 80019a0:	fa92 f2a2 	rbit	r2, r2
 80019a4:	6921      	ldr	r1, [r4, #16]
 80019a6:	fab2 f282 	clz	r2, r2
 80019aa:	fa01 f202 	lsl.w	r2, r1, r2
 80019ae:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80019b2:	4313      	orrs	r3, r2
 80019b4:	6003      	str	r3, [r0, #0]
 80019b6:	e00d      	b.n	80019d4 <HAL_RCC_OscConfig+0x124>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ba:	f000 fb83 	bl	80020c4 <HAL_GetTick>
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019be:	4d69      	ldr	r5, [pc, #420]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c0:	4606      	mov	r6, r0
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c2:	682b      	ldr	r3, [r5, #0]
 80019c4:	079f      	lsls	r7, r3, #30
 80019c6:	d505      	bpl.n	80019d4 <HAL_RCC_OscConfig+0x124>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019c8:	f000 fb7c 	bl	80020c4 <HAL_GetTick>
 80019cc:	1b80      	subs	r0, r0, r6
 80019ce:	2802      	cmp	r0, #2
 80019d0:	d9f7      	bls.n	80019c2 <HAL_RCC_OscConfig+0x112>
 80019d2:	e79f      	b.n	8001914 <HAL_RCC_OscConfig+0x64>
        } 
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d4:	6823      	ldr	r3, [r4, #0]
 80019d6:	071e      	lsls	r6, r3, #28
 80019d8:	d403      	bmi.n	80019e2 <HAL_RCC_OscConfig+0x132>
        }       
      } 
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019da:	6823      	ldr	r3, [r4, #0]
 80019dc:	075d      	lsls	r5, r3, #29
 80019de:	d545      	bpl.n	8001a6c <HAL_RCC_OscConfig+0x1bc>
 80019e0:	e01f      	b.n	8001a22 <HAL_RCC_OscConfig+0x172>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019e2:	6962      	ldr	r2, [r4, #20]
 80019e4:	4b62      	ldr	r3, [pc, #392]	; (8001b70 <HAL_RCC_OscConfig+0x2c0>)
 80019e6:	b172      	cbz	r2, 8001a06 <HAL_RCC_OscConfig+0x156>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e8:	2201      	movs	r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ec:	f000 fb6a 	bl	80020c4 <HAL_GetTick>
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f0:	4d5c      	ldr	r5, [pc, #368]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f2:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80019f6:	0798      	lsls	r0, r3, #30
 80019f8:	d4ef      	bmi.n	80019da <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019fa:	f000 fb63 	bl	80020c4 <HAL_GetTick>
 80019fe:	1b80      	subs	r0, r0, r6
 8001a00:	2802      	cmp	r0, #2
 8001a02:	d9f7      	bls.n	80019f4 <HAL_RCC_OscConfig+0x144>
 8001a04:	e786      	b.n	8001914 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a06:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f000 fb5c 	bl	80020c4 <HAL_GetTick>
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a0c:	4d55      	ldr	r5, [pc, #340]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
      
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a0e:	4606      	mov	r6, r0
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a10:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a12:	0799      	lsls	r1, r3, #30
 8001a14:	d5e1      	bpl.n	80019da <HAL_RCC_OscConfig+0x12a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a16:	f000 fb55 	bl	80020c4 <HAL_GetTick>
 8001a1a:	1b80      	subs	r0, r0, r6
 8001a1c:	2802      	cmp	r0, #2
 8001a1e:	d9f7      	bls.n	8001a10 <HAL_RCC_OscConfig+0x160>
 8001a20:	e778      	b.n	8001914 <HAL_RCC_OscConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	4b4f      	ldr	r3, [pc, #316]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a28:	4d52      	ldr	r5, [pc, #328]	; (8001b74 <HAL_RCC_OscConfig+0x2c4>)
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
    
    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a2c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a38:	9301      	str	r3, [sp, #4]
 8001a3a:	9b01      	ldr	r3, [sp, #4]
    
    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a3c:	682b      	ldr	r3, [r5, #0]
 8001a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a42:	602b      	str	r3, [r5, #0]
    
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 8001a44:	f000 fb3e 	bl	80020c4 <HAL_GetTick>
 8001a48:	4606      	mov	r6, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a4a:	682b      	ldr	r3, [r5, #0]
 8001a4c:	05da      	lsls	r2, r3, #23
 8001a4e:	d510      	bpl.n	8001a72 <HAL_RCC_OscConfig+0x1c2>
        return HAL_TIMEOUT;
      }      
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a50:	4b49      	ldr	r3, [pc, #292]	; (8001b78 <HAL_RCC_OscConfig+0x2c8>)
 8001a52:	7a22      	ldrb	r2, [r4, #8]
 8001a54:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a56:	68a3      	ldr	r3, [r4, #8]
 8001a58:	b1bb      	cbz	r3, 8001a8a <HAL_RCC_OscConfig+0x1da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5a:	f000 fb33 	bl	80020c4 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5e:	4d41      	ldr	r5, [pc, #260]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a66:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a68:	079b      	lsls	r3, r3, #30
 8001a6a:	d508      	bpl.n	8001a7e <HAL_RCC_OscConfig+0x1ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a6c:	69a2      	ldr	r2, [r4, #24]
 8001a6e:	b9da      	cbnz	r2, 8001aa8 <HAL_RCC_OscConfig+0x1f8>
 8001a70:	e059      	b.n	8001b26 <HAL_RCC_OscConfig+0x276>
    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a72:	f000 fb27 	bl	80020c4 <HAL_GetTick>
 8001a76:	1b80      	subs	r0, r0, r6
 8001a78:	2802      	cmp	r0, #2
 8001a7a:	d9e6      	bls.n	8001a4a <HAL_RCC_OscConfig+0x19a>
 8001a7c:	e74a      	b.n	8001914 <HAL_RCC_OscConfig+0x64>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f000 fb21 	bl	80020c4 <HAL_GetTick>
 8001a82:	1b80      	subs	r0, r0, r6
 8001a84:	42b8      	cmp	r0, r7
 8001a86:	d9ee      	bls.n	8001a66 <HAL_RCC_OscConfig+0x1b6>
 8001a88:	e744      	b.n	8001914 <HAL_RCC_OscConfig+0x64>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8a:	f000 fb1b 	bl	80020c4 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8e:	4d35      	ldr	r5, [pc, #212]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a92:	f241 3788 	movw	r7, #5000	; 0x1388
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a96:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a98:	0798      	lsls	r0, r3, #30
 8001a9a:	d5e7      	bpl.n	8001a6c <HAL_RCC_OscConfig+0x1bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f000 fb12 	bl	80020c4 <HAL_GetTick>
 8001aa0:	1b80      	subs	r0, r0, r6
 8001aa2:	42b8      	cmp	r0, r7
 8001aa4:	d9f7      	bls.n	8001a96 <HAL_RCC_OscConfig+0x1e6>
 8001aa6:	e735      	b.n	8001914 <HAL_RCC_OscConfig+0x64>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aa8:	4d2e      	ldr	r5, [pc, #184]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
 8001aaa:	68ab      	ldr	r3, [r5, #8]
 8001aac:	f003 030c 	and.w	r3, r3, #12
 8001ab0:	2b08      	cmp	r3, #8
 8001ab2:	f43f af1c 	beq.w	80018ee <HAL_RCC_OscConfig+0x3e>
 8001ab6:	4e31      	ldr	r6, [pc, #196]	; (8001b7c <HAL_RCC_OscConfig+0x2cc>)
 8001ab8:	2300      	movs	r3, #0
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aba:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	6033      	str	r3, [r6, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001abe:	d141      	bne.n	8001b44 <HAL_RCC_OscConfig+0x294>
      
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f000 fb00 	bl	80020c4 <HAL_GetTick>
 8001ac4:	4680      	mov	r8, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac6:	682b      	ldr	r3, [r5, #0]
 8001ac8:	4f26      	ldr	r7, [pc, #152]	; (8001b64 <HAL_RCC_OscConfig+0x2b4>)
 8001aca:	0199      	lsls	r1, r3, #6
 8001acc:	d42d      	bmi.n	8001b2a <HAL_RCC_OscConfig+0x27a>
 8001ace:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8001ad2:	fa92 f2a2 	rbit	r2, r2
 8001ad6:	f44f 3340 	mov.w	r3, #196608	; 0x30000
            return HAL_TIMEOUT;
          }
        }        

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ada:	fab2 fe82 	clz	lr, r2
 8001ade:	fa93 f3a3 	rbit	r3, r3
 8001ae2:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001ae6:	fab3 f583 	clz	r5, r3
 8001aea:	fa92 f2a2 	rbit	r2, r2
 8001aee:	69e0      	ldr	r0, [r4, #28]
 8001af0:	6a23      	ldr	r3, [r4, #32]
 8001af2:	fab2 f182 	clz	r1, r2
 8001af6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001af8:	4303      	orrs	r3, r0
 8001afa:	fa02 f20e 	lsl.w	r2, r2, lr
 8001afe:	ea43 0002 	orr.w	r0, r3, r2
 8001b02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001b04:	085a      	lsrs	r2, r3, #1
 8001b06:	3a01      	subs	r2, #1
 8001b08:	fa02 f305 	lsl.w	r3, r2, r5
 8001b0c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b0e:	4303      	orrs	r3, r0
 8001b10:	408a      	lsls	r2, r1
 8001b12:	4313      	orrs	r3, r2
 8001b14:	607b      	str	r3, [r7, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b16:	2301      	movs	r3, #1
 8001b18:	6033      	str	r3, [r6, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f000 fad3 	bl	80020c4 <HAL_GetTick>
 8001b1e:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	019a      	lsls	r2, r3, #6
 8001b24:	d508      	bpl.n	8001b38 <HAL_RCC_OscConfig+0x288>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001b26:	2000      	movs	r0, #0
 8001b28:	e018      	b.n	8001b5c <HAL_RCC_OscConfig+0x2ac>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2a:	f000 facb 	bl	80020c4 <HAL_GetTick>
 8001b2e:	ebc8 0000 	rsb	r0, r8, r0
 8001b32:	2802      	cmp	r0, #2
 8001b34:	d9c7      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x216>
 8001b36:	e6ed      	b.n	8001914 <HAL_RCC_OscConfig+0x64>
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b38:	f000 fac4 	bl	80020c4 <HAL_GetTick>
 8001b3c:	1b00      	subs	r0, r0, r4
 8001b3e:	2802      	cmp	r0, #2
 8001b40:	d9ee      	bls.n	8001b20 <HAL_RCC_OscConfig+0x270>
 8001b42:	e6e7      	b.n	8001914 <HAL_RCC_OscConfig+0x64>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b44:	f000 fabe 	bl	80020c4 <HAL_GetTick>
 8001b48:	4604      	mov	r4, r0
        
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b4a:	682b      	ldr	r3, [r5, #0]
 8001b4c:	019b      	lsls	r3, r3, #6
 8001b4e:	d5ea      	bpl.n	8001b26 <HAL_RCC_OscConfig+0x276>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b50:	f000 fab8 	bl	80020c4 <HAL_GetTick>
 8001b54:	1b00      	subs	r0, r0, r4
 8001b56:	2802      	cmp	r0, #2
 8001b58:	d9f7      	bls.n	8001b4a <HAL_RCC_OscConfig+0x29a>
 8001b5a:	e6db      	b.n	8001914 <HAL_RCC_OscConfig+0x64>
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001b5c:	b002      	add	sp, #8
 8001b5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40023802 	.word	0x40023802
 8001b6c:	42470000 	.word	0x42470000
 8001b70:	42470e80 	.word	0x42470e80
 8001b74:	40007000 	.word	0x40007000
 8001b78:	40023870 	.word	0x40023870
 8001b7c:	42470060 	.word	0x42470060

08001b80 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b80:	491b      	ldr	r1, [pc, #108]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x70>)
 8001b82:	688b      	ldr	r3, [r1, #8]
 8001b84:	f003 030c 	and.w	r3, r3, #12
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d02c      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0x66>
 8001b8c:	2b08      	cmp	r3, #8
 8001b8e:	d12c      	bne.n	8001bea <HAL_RCC_GetSysClockFreq+0x6a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b90:	6848      	ldr	r0, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b92:	684b      	ldr	r3, [r1, #4]
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b98:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001b9c:	f647 72c0 	movw	r2, #32704	; 0x7fc0
      {
        /* HSE used as PLL clock source */
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
 8001ba0:	684b      	ldr	r3, [r1, #4]
 8001ba2:	fa92 f2a2 	rbit	r2, r2
 8001ba6:	f647 71c0 	movw	r1, #32704	; 0x7fc0
 8001baa:	fab2 f282 	clz	r2, r2
 8001bae:	ea01 0103 	and.w	r1, r1, r3
 8001bb2:	fa21 f102 	lsr.w	r1, r1, r2
 8001bb6:	bf14      	ite	ne
 8001bb8:	4a0e      	ldrne	r2, [pc, #56]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x74>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001bba:	4a0f      	ldreq	r2, [pc, #60]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001bbc:	fbb2 f0f0 	udiv	r0, r2, r0
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001bc0:	4a0b      	ldr	r2, [pc, #44]	; (8001bf0 <HAL_RCC_GetSysClockFreq+0x70>)
        pllvco = ((HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
 8001bc2:	fb00 f301 	mul.w	r3, r0, r1
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001bc6:	6852      	ldr	r2, [r2, #4]
 8001bc8:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001bcc:	fa90 f0a0 	rbit	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001bd0:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
      else
      {
        /* HSI used as PLL clock source */
        pllvco = ((HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> POSITION_VAL(RCC_PLLCFGR_PLLN)));    
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> POSITION_VAL(RCC_PLLCFGR_PLLP)) + 1U) *2U);
 8001bd4:	fab0 f080 	clz	r0, r0
      
      sysclockfreq = pllvco/pllp;
 8001bd8:	fa22 f000 	lsr.w	r0, r2, r0
 8001bdc:	3001      	adds	r0, #1
 8001bde:	0040      	lsls	r0, r0, #1
 8001be0:	fbb3 f0f0 	udiv	r0, r3, r0
 8001be4:	4770      	bx	lr
      sysclockfreq = HSI_VALUE;
       break;
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001be6:	4803      	ldr	r0, [pc, #12]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0x74>)
 8001be8:	4770      	bx	lr
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bea:	4803      	ldr	r0, [pc, #12]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x78>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	007a1200 	.word	0x007a1200
 8001bf8:	00f42400 	.word	0x00f42400

08001bfc <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001bfc:	4b55      	ldr	r3, [pc, #340]	; (8001d54 <HAL_RCC_ClockConfig+0x158>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	f002 020f 	and.w	r2, r2, #15
 8001c04:	428a      	cmp	r2, r1
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c0a:	4605      	mov	r5, r0
 8001c0c:	460e      	mov	r6, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
    must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) and the supply voltage of the device. */
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c0e:	d30a      	bcc.n	8001c26 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }
 
  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c10:	6829      	ldr	r1, [r5, #0]
 8001c12:	0788      	lsls	r0, r1, #30
 8001c14:	d511      	bpl.n	8001c3a <HAL_RCC_ClockConfig+0x3e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c16:	4850      	ldr	r0, [pc, #320]	; (8001d58 <HAL_RCC_ClockConfig+0x15c>)
 8001c18:	6883      	ldr	r3, [r0, #8]
 8001c1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1e:	68ab      	ldr	r3, [r5, #8]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	6083      	str	r3, [r0, #8]
 8001c24:	e009      	b.n	8001c3a <HAL_RCC_ClockConfig+0x3e>
  
  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	b2ca      	uxtb	r2, r1
 8001c28:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 030f 	and.w	r3, r3, #15
 8001c30:	4299      	cmp	r1, r3
 8001c32:	d0ed      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 8001c34:	2001      	movs	r0, #1
 8001c36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }
  
  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	07c9      	lsls	r1, r1, #31
 8001c3c:	d406      	bmi.n	8001c4c <HAL_RCC_ClockConfig+0x50>
      }
    }
  }    
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001c3e:	4b45      	ldr	r3, [pc, #276]	; (8001d54 <HAL_RCC_ClockConfig+0x158>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	f002 020f 	and.w	r2, r2, #15
 8001c46:	4296      	cmp	r6, r2
 8001c48:	d351      	bcc.n	8001cee <HAL_RCC_ClockConfig+0xf2>
 8001c4a:	e057      	b.n	8001cfc <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4c:	686b      	ldr	r3, [r5, #4]
 8001c4e:	4a42      	ldr	r2, [pc, #264]	; (8001d58 <HAL_RCC_ClockConfig+0x15c>)
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d103      	bne.n	8001c5c <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c54:	6812      	ldr	r2, [r2, #0]
 8001c56:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_ClockConfig+0x72>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001c5c:	1e99      	subs	r1, r3, #2
 8001c5e:	2901      	cmp	r1, #1
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c60:	6812      	ldr	r2, [r2, #0]
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   || 
 8001c62:	d802      	bhi.n	8001c6a <HAL_RCC_ClockConfig+0x6e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c64:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001c68:	e001      	b.n	8001c6e <HAL_RCC_ClockConfig+0x72>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6a:	f012 0f02 	tst.w	r2, #2
 8001c6e:	d0e1      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x38>
      {
        return HAL_ERROR;
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c70:	4c39      	ldr	r4, [pc, #228]	; (8001d58 <HAL_RCC_ClockConfig+0x15c>)
 8001c72:	68a2      	ldr	r2, [r4, #8]
 8001c74:	f022 0203 	bic.w	r2, r2, #3
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60a3      	str	r3, [r4, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c7c:	f000 fa22 	bl	80020c4 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c80:	686b      	ldr	r3, [r5, #4]
 8001c82:	2b01      	cmp	r3, #1
      }
    }
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c84:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c86:	f241 3888 	movw	r8, #5000	; 0x1388
    
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8a:	d10c      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xaa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c8c:	68a3      	ldr	r3, [r4, #8]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b04      	cmp	r3, #4
 8001c94:	d0d3      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c96:	f000 fa15 	bl	80020c4 <HAL_GetTick>
 8001c9a:	1bc0      	subs	r0, r0, r7
 8001c9c:	4540      	cmp	r0, r8
 8001c9e:	d9f5      	bls.n	8001c8c <HAL_RCC_ClockConfig+0x90>
        {
          return HAL_TIMEOUT;
 8001ca0:	2003      	movs	r0, #3
 8001ca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d10a      	bne.n	8001cc0 <HAL_RCC_ClockConfig+0xc4>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001caa:	68a3      	ldr	r3, [r4, #8]
 8001cac:	f003 030c 	and.w	r3, r3, #12
 8001cb0:	2b08      	cmp	r3, #8
 8001cb2:	d0c4      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb4:	f000 fa06 	bl	80020c4 <HAL_GetTick>
 8001cb8:	1bc0      	subs	r0, r0, r7
 8001cba:	4540      	cmp	r0, r8
 8001cbc:	d9f5      	bls.n	8001caa <HAL_RCC_ClockConfig+0xae>
 8001cbe:	e7ef      	b.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
        {
          return HAL_TIMEOUT;
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d10f      	bne.n	8001ce4 <HAL_RCC_ClockConfig+0xe8>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8001cc4:	68a3      	ldr	r3, [r4, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
 8001cca:	2b0c      	cmp	r3, #12
 8001ccc:	d0b7      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x42>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cce:	f000 f9f9 	bl	80020c4 <HAL_GetTick>
 8001cd2:	1bc0      	subs	r0, r0, r7
 8001cd4:	4540      	cmp	r0, r8
 8001cd6:	d9f5      	bls.n	8001cc4 <HAL_RCC_ClockConfig+0xc8>
 8001cd8:	e7e2      	b.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cda:	f000 f9f3 	bl	80020c4 <HAL_GetTick>
 8001cde:	1bc0      	subs	r0, r0, r7
 8001ce0:	4540      	cmp	r0, r8
 8001ce2:	d8dd      	bhi.n	8001ca0 <HAL_RCC_ClockConfig+0xa4>
        }
      }
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ce4:	68a3      	ldr	r3, [r4, #8]
 8001ce6:	f013 0f0c 	tst.w	r3, #12
 8001cea:	d1f6      	bne.n	8001cda <HAL_RCC_ClockConfig+0xde>
 8001cec:	e7a7      	b.n	8001c3e <HAL_RCC_ClockConfig+0x42>
  
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  { 
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	b2f2      	uxtb	r2, r6
 8001cf0:	701a      	strb	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 030f 	and.w	r3, r3, #15
 8001cf8:	429e      	cmp	r6, r3
 8001cfa:	d19b      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x38>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cfc:	6829      	ldr	r1, [r5, #0]
 8001cfe:	074a      	lsls	r2, r1, #29
 8001d00:	d506      	bpl.n	8001d10 <HAL_RCC_ClockConfig+0x114>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d02:	4815      	ldr	r0, [pc, #84]	; (8001d58 <HAL_RCC_ClockConfig+0x15c>)
 8001d04:	6883      	ldr	r3, [r0, #8]
 8001d06:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d0a:	68eb      	ldr	r3, [r5, #12]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	6083      	str	r3, [r0, #8]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d10:	070b      	lsls	r3, r1, #28
 8001d12:	d507      	bpl.n	8001d24 <HAL_RCC_ClockConfig+0x128>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d14:	4a10      	ldr	r2, [pc, #64]	; (8001d58 <HAL_RCC_ClockConfig+0x15c>)
 8001d16:	6929      	ldr	r1, [r5, #16]
 8001d18:	6893      	ldr	r3, [r2, #8]
 8001d1a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001d1e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d22:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001d24:	f7ff ff2c 	bl	8001b80 <HAL_RCC_GetSysClockFreq>
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <HAL_RCC_ClockConfig+0x15c>)
 8001d2a:	22f0      	movs	r2, #240	; 0xf0
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	fa92 f2a2 	rbit	r2, r2
 8001d32:	fab2 f282 	clz	r2, r2
 8001d36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d3a:	40d3      	lsrs	r3, r2
 8001d3c:	4a07      	ldr	r2, [pc, #28]	; (8001d5c <HAL_RCC_ClockConfig+0x160>)
 8001d3e:	5cd3      	ldrb	r3, [r2, r3]
 8001d40:	40d8      	lsrs	r0, r3
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <HAL_RCC_ClockConfig+0x164>)
 8001d44:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d46:	200f      	movs	r0, #15
 8001d48:	f000 f986 	bl	8002058 <HAL_InitTick>
  
  return HAL_OK;
 8001d4c:	2000      	movs	r0, #0
}
 8001d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d52:	bf00      	nop
 8001d54:	40023c00 	.word	0x40023c00
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	0800220b 	.word	0x0800220b
 8001d60:	20000008 	.word	0x20000008

08001d64 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001d64:	4b01      	ldr	r3, [pc, #4]	; (8001d6c <HAL_RCC_GetHCLKFreq+0x8>)
 8001d66:	6818      	ldr	r0, [r3, #0]
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	20000008 	.word	0x20000008

08001d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d74:	4f6a      	ldr	r7, [pc, #424]	; (8001f20 <HAL_GPIO_Init+0x1b0>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d76:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d78:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 8001f28 <HAL_GPIO_Init+0x1b8>

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d7c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8001f2c <HAL_GPIO_Init+0x1bc>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d80:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d82:	2200      	movs	r2, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d84:	9301      	str	r3, [sp, #4]
 8001d86:	46be      	mov	lr, r7

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8001d88:	2401      	movs	r4, #1
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001d8a:	9b01      	ldr	r3, [sp, #4]

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01U) << position;
 8001d8c:	4094      	lsls	r4, r2
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;

    if(iocurrent == ioposition)
 8001d8e:	ea34 0303 	bics.w	r3, r4, r3
 8001d92:	f040 80bd 	bne.w	8001f10 <HAL_GPIO_Init+0x1a0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d96:	684d      	ldr	r5, [r1, #4]
 8001d98:	f025 0a10 	bic.w	sl, r5, #16
 8001d9c:	f1ba 0f02 	cmp.w	sl, #2
 8001da0:	d114      	bne.n	8001dcc <HAL_GPIO_Init+0x5c>
 8001da2:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8001da6:	eb00 0989 	add.w	r9, r0, r9, lsl #2
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001daa:	f002 0b07 	and.w	fp, r2, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dae:	f8d9 6020 	ldr.w	r6, [r9, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001db2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001db6:	230f      	movs	r3, #15
 8001db8:	fa03 f30b 	lsl.w	r3, r3, fp
 8001dbc:	ea26 0603 	bic.w	r6, r6, r3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001dc0:	690b      	ldr	r3, [r1, #16]
 8001dc2:	fa03 f30b 	lsl.w	r3, r3, fp
 8001dc6:	4333      	orrs	r3, r6
        GPIOx->AFR[position >> 3U] = temp;
 8001dc8:	f8c9 3020 	str.w	r3, [r9, #32]
 8001dcc:	ea4f 0b42 	mov.w	fp, r2, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd0:	f04f 0903 	mov.w	r9, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd4:	6803      	ldr	r3, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dd6:	fa09 f90b 	lsl.w	r9, r9, fp
 8001dda:	ea6f 0909 	mvn.w	r9, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dde:	f005 0603 	and.w	r6, r5, #3
        GPIOx->AFR[position >> 3U] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001de2:	ea03 0309 	and.w	r3, r3, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001de6:	fa06 f60b 	lsl.w	r6, r6, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001dea:	f10a 3aff 	add.w	sl, sl, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dee:	4333      	orrs	r3, r6
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001df0:	f1ba 0f01 	cmp.w	sl, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 8001df4:	6003      	str	r3, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001df6:	d80f      	bhi.n	8001e18 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001df8:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dfa:	68ce      	ldr	r6, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dfc:	ea09 0303 	and.w	r3, r9, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e00:	fa06 f60b 	lsl.w	r6, r6, fp
 8001e04:	431e      	orrs	r6, r3
        GPIOx->OSPEEDR = temp;
 8001e06:	6086      	str	r6, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e08:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e0a:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp |= (GPIO_Init->Speed << (position * 2U));
        GPIOx->OSPEEDR = temp;

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e0e:	ea23 0304 	bic.w	r3, r3, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e12:	4096      	lsls	r6, r2
 8001e14:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 8001e16:	6043      	str	r3, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e18:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e1a:	ea09 0903 	and.w	r9, r9, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1e:	688b      	ldr	r3, [r1, #8]
 8001e20:	fa03 f30b 	lsl.w	r3, r3, fp
 8001e24:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 8001e28:	60c3      	str	r3, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e2a:	00eb      	lsls	r3, r5, #3
 8001e2c:	d570      	bpl.n	8001f10 <HAL_GPIO_Init+0x1a0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	9303      	str	r3, [sp, #12]
 8001e32:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e36:	4b3b      	ldr	r3, [pc, #236]	; (8001f24 <HAL_GPIO_Init+0x1b4>)
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e38:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8001e3c:	f8cc 6044 	str.w	r6, [ip, #68]	; 0x44
 8001e40:	f8dc 6044 	ldr.w	r6, [ip, #68]	; 0x44
 8001e44:	f022 0903 	bic.w	r9, r2, #3
 8001e48:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
 8001e4c:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8001e50:	f509 399c 	add.w	r9, r9, #79872	; 0x13800
 8001e54:	9603      	str	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001e56:	f002 0a03 	and.w	sl, r2, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	9e03      	ldr	r6, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e5c:	f8d9 b008 	ldr.w	fp, [r9, #8]
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001e60:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001e64:	260f      	movs	r6, #15
 8001e66:	fa06 f60a 	lsl.w	r6, r6, sl
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e6a:	4298      	cmp	r0, r3
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8001e6c:	ea2b 0606 	bic.w	r6, fp, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e70:	d01c      	beq.n	8001eac <HAL_GPIO_Init+0x13c>
 8001e72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e76:	4298      	cmp	r0, r3
 8001e78:	d01a      	beq.n	8001eb0 <HAL_GPIO_Init+0x140>
 8001e7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e7e:	4298      	cmp	r0, r3
 8001e80:	d018      	beq.n	8001eb4 <HAL_GPIO_Init+0x144>
 8001e82:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e86:	4298      	cmp	r0, r3
 8001e88:	d016      	beq.n	8001eb8 <HAL_GPIO_Init+0x148>
 8001e8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e8e:	4298      	cmp	r0, r3
 8001e90:	d014      	beq.n	8001ebc <HAL_GPIO_Init+0x14c>
 8001e92:	4540      	cmp	r0, r8
 8001e94:	d014      	beq.n	8001ec0 <HAL_GPIO_Init+0x150>
 8001e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e9a:	4298      	cmp	r0, r3
 8001e9c:	d012      	beq.n	8001ec4 <HAL_GPIO_Init+0x154>
 8001e9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ea2:	4298      	cmp	r0, r3
 8001ea4:	bf14      	ite	ne
 8001ea6:	2308      	movne	r3, #8
 8001ea8:	2307      	moveq	r3, #7
 8001eaa:	e00c      	b.n	8001ec6 <HAL_GPIO_Init+0x156>
 8001eac:	2300      	movs	r3, #0
 8001eae:	e00a      	b.n	8001ec6 <HAL_GPIO_Init+0x156>
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e008      	b.n	8001ec6 <HAL_GPIO_Init+0x156>
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	e006      	b.n	8001ec6 <HAL_GPIO_Init+0x156>
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e004      	b.n	8001ec6 <HAL_GPIO_Init+0x156>
 8001ebc:	2304      	movs	r3, #4
 8001ebe:	e002      	b.n	8001ec6 <HAL_GPIO_Init+0x156>
 8001ec0:	2305      	movs	r3, #5
 8001ec2:	e000      	b.n	8001ec6 <HAL_GPIO_Init+0x156>
 8001ec4:	2306      	movs	r3, #6
 8001ec6:	fa03 f30a 	lsl.w	r3, r3, sl
 8001eca:	4333      	orrs	r3, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ecc:	f8c9 3008 	str.w	r3, [r9, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ed0:	683b      	ldr	r3, [r7, #0]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	43e6      	mvns	r6, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ed4:	f415 3f80 	tst.w	r5, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8001ed8:	bf0c      	ite	eq
 8001eda:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001edc:	4323      	orrne	r3, r4
        }
        EXTI->IMR = temp;
 8001ede:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8001ee2:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ee6:	f415 3f00 	tst.w	r5, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8001eea:	bf0c      	ite	eq
 8001eec:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 8001eee:	4323      	orrne	r3, r4
        }
        EXTI->EMR = temp;
 8001ef0:	607b      	str	r3, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef4:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001ef8:	bf0c      	ite	eq
 8001efa:	4033      	andeq	r3, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 8001efc:	4323      	orrne	r3, r4
        }
        EXTI->RTSR = temp;
 8001efe:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8001f02:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f06:	02ad      	lsls	r5, r5, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 8001f08:	bf54      	ite	pl
 8001f0a:	4033      	andpl	r3, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8001f0c:	4323      	orrmi	r3, r4
        }
        EXTI->FTSR = temp;
 8001f0e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f10:	3201      	adds	r2, #1
 8001f12:	2a10      	cmp	r2, #16
 8001f14:	f47f af38 	bne.w	8001d88 <HAL_GPIO_Init+0x18>
        }
        EXTI->FTSR = temp;
      }
    }
  }
}
 8001f18:	b005      	add	sp, #20
 8001f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f1e:	bf00      	nop
 8001f20:	40013c00 	.word	0x40013c00
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	40021400 	.word	0x40021400

08001f30 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f30:	6903      	ldr	r3, [r0, #16]
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8001f32:	4219      	tst	r1, r3
}
 8001f34:	bf14      	ite	ne
 8001f36:	2001      	movne	r0, #1
 8001f38:	2000      	moveq	r0, #0
 8001f3a:	4770      	bx	lr

08001f3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f3c:	b902      	cbnz	r2, 8001f40 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f3e:	0409      	lsls	r1, r1, #16
 8001f40:	6181      	str	r1, [r0, #24]
 8001f42:	4770      	bx	lr

08001f44 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001f44:	6943      	ldr	r3, [r0, #20]
 8001f46:	4059      	eors	r1, r3
 8001f48:	6141      	str	r1, [r0, #20]
 8001f4a:	4770      	bx	lr

08001f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f4c:	b508      	push	{r3, lr}
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001f50:	6959      	ldr	r1, [r3, #20]
 8001f52:	4201      	tst	r1, r0
 8001f54:	d002      	beq.n	8001f5c <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f56:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f58:	f7fe fc74 	bl	8000844 <HAL_GPIO_EXTI_Callback>
 8001f5c:	bd08      	pop	{r3, pc}
 8001f5e:	bf00      	nop
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <HAL_DMA_Abort_IT>:
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f64:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d003      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x10>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001f70:	2001      	movs	r0, #1
 8001f72:	4770      	bx	lr
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f74:	6802      	ldr	r2, [r0, #0]
    return HAL_ERROR;
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f76:	2305      	movs	r3, #5
 8001f78:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f7c:	6813      	ldr	r3, [r2, #0]
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8001f84:	2000      	movs	r0, #0
}
 8001f86:	4770      	bx	lr

08001f88 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f88:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001f8a:	68d3      	ldr	r3, [r2, #12]
 8001f8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001f90:	041b      	lsls	r3, r3, #16
 8001f92:	0c1b      	lsrs	r3, r3, #16
 8001f94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001f98:	0200      	lsls	r0, r0, #8
 8001f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f9e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001fa2:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001fa4:	60d3      	str	r3, [r2, #12]
 8001fa6:	4770      	bx	lr
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <HAL_NVIC_SetPriority+0x60>)
 8001fae:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fb4:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb6:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fba:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fbc:	2c04      	cmp	r4, #4
 8001fbe:	bf28      	it	cs
 8001fc0:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fc2:	2d06      	cmp	r5, #6

  return (
 8001fc4:	f04f 0501 	mov.w	r5, #1
 8001fc8:	fa05 f404 	lsl.w	r4, r5, r4
 8001fcc:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd0:	bf8c      	ite	hi
 8001fd2:	3b03      	subhi	r3, #3
 8001fd4:	2300      	movls	r3, #0

  return (
 8001fd6:	400c      	ands	r4, r1
 8001fd8:	409c      	lsls	r4, r3
 8001fda:	fa05 f303 	lsl.w	r3, r5, r3
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8001fe2:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8001fe4:	ea42 0204 	orr.w	r2, r2, r4
 8001fe8:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fec:	bfaf      	iteee	ge
 8001fee:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	f000 000f 	andlt.w	r0, r0, #15
 8001ff6:	4b06      	ldrlt	r3, [pc, #24]	; (8002010 <HAL_NVIC_SetPriority+0x64>)
 8001ff8:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ffa:	bfa5      	ittet	ge
 8001ffc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8002000:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002002:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002004:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8002008:	bd30      	pop	{r4, r5, pc}
 800200a:	bf00      	nop
 800200c:	e000ed00 	.word	0xe000ed00
 8002010:	e000ed14 	.word	0xe000ed14

08002014 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002014:	3801      	subs	r0, #1
 8002016:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800201a:	d20a      	bcs.n	8002032 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	4a07      	ldr	r2, [pc, #28]	; (800203c <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002020:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	21f0      	movs	r1, #240	; 0xf0
 8002024:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002028:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8002032:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e010 	.word	0xe000e010
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002040:	4b04      	ldr	r3, [pc, #16]	; (8002054 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002042:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8002044:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002046:	bf0c      	ite	eq
 8002048:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800204c:	f022 0204 	bicne.w	r2, r2, #4
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	4770      	bx	lr
 8002054:	e000e010 	.word	0xe000e010

08002058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002058:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800205a:	4b08      	ldr	r3, [pc, #32]	; (800207c <HAL_InitTick+0x24>)
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800205c:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800205e:	6818      	ldr	r0, [r3, #0]
 8002060:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002064:	fbb0 f0f3 	udiv	r0, r0, r3
 8002068:	f7ff ffd4 	bl	8002014 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800206c:	2200      	movs	r2, #0
 800206e:	4621      	mov	r1, r4
 8002070:	f04f 30ff 	mov.w	r0, #4294967295
 8002074:	f7ff ff9a 	bl	8001fac <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 8002078:	2000      	movs	r0, #0
 800207a:	bd10      	pop	{r4, pc}
 800207c:	20000008 	.word	0x20000008

08002080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002080:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002082:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_Init+0x30>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800208a:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002092:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800209a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209c:	2003      	movs	r0, #3
 800209e:	f7ff ff73 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a2:	200f      	movs	r0, #15
 80020a4:	f7ff ffd8 	bl	8002058 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80020a8:	f7fe fa05 	bl	80004b6 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80020ac:	2000      	movs	r0, #0
 80020ae:	bd08      	pop	{r3, pc}
 80020b0:	40023c00 	.word	0x40023c00

080020b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80020b4:	4a02      	ldr	r2, [pc, #8]	; (80020c0 <HAL_IncTick+0xc>)
 80020b6:	6813      	ldr	r3, [r2, #0]
 80020b8:	3301      	adds	r3, #1
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	200040e4 	.word	0x200040e4

080020c4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80020c4:	4b01      	ldr	r3, [pc, #4]	; (80020cc <HAL_GetTick+0x8>)
 80020c6:	6818      	ldr	r0, [r3, #0]
}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	200040e4 	.word	0x200040e4

080020d0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020d0:	490f      	ldr	r1, [pc, #60]	; (8002110 <SystemInit+0x40>)
 80020d2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80020d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80020de:	4b0d      	ldr	r3, [pc, #52]	; (8002114 <SystemInit+0x44>)
 80020e0:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020e2:	2000      	movs	r0, #0
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80020e4:	f042 0201 	orr.w	r2, r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80020ea:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80020f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020f6:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80020f8:	4a07      	ldr	r2, [pc, #28]	; (8002118 <SystemInit+0x48>)
 80020fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002102:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002104:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002106:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800210a:	608b      	str	r3, [r1, #8]
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	e000ed00 	.word	0xe000ed00
 8002114:	40023800 	.word	0x40023800
 8002118:	24003010 	.word	0x24003010

0800211c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800211c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002154 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002120:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002122:	e003      	b.n	800212c <LoopCopyDataInit>

08002124 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002124:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002126:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002128:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800212a:	3104      	adds	r1, #4

0800212c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800212c:	480b      	ldr	r0, [pc, #44]	; (800215c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800212e:	4b0c      	ldr	r3, [pc, #48]	; (8002160 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002130:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002132:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002134:	d3f6      	bcc.n	8002124 <CopyDataInit>
  ldr  r2, =_sbss
 8002136:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002138:	e002      	b.n	8002140 <LoopFillZerobss>

0800213a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800213a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800213c:	f842 3b04 	str.w	r3, [r2], #4

08002140 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002142:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002144:	d3f9      	bcc.n	800213a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002146:	f7ff ffc3 	bl	80020d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800214a:	f000 f811 	bl	8002170 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800214e:	f7fe fa3d 	bl	80005cc <main>
  bx  lr    
 8002152:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002154:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8002158:	08002224 	.word	0x08002224
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800215c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002160:	2000000c 	.word	0x2000000c
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 8002164:	2000000c 	.word	0x2000000c
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002168:	200040e8 	.word	0x200040e8

0800216c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800216c:	e7fe      	b.n	800216c <ADC_IRQHandler>
	...

08002170 <__libc_init_array>:
 8002170:	b570      	push	{r4, r5, r6, lr}
 8002172:	4b0e      	ldr	r3, [pc, #56]	; (80021ac <__libc_init_array+0x3c>)
 8002174:	4c0e      	ldr	r4, [pc, #56]	; (80021b0 <__libc_init_array+0x40>)
 8002176:	1ae4      	subs	r4, r4, r3
 8002178:	10a4      	asrs	r4, r4, #2
 800217a:	2500      	movs	r5, #0
 800217c:	461e      	mov	r6, r3
 800217e:	42a5      	cmp	r5, r4
 8002180:	d004      	beq.n	800218c <__libc_init_array+0x1c>
 8002182:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002186:	4798      	blx	r3
 8002188:	3501      	adds	r5, #1
 800218a:	e7f8      	b.n	800217e <__libc_init_array+0xe>
 800218c:	f000 f81e 	bl	80021cc <_init>
 8002190:	4c08      	ldr	r4, [pc, #32]	; (80021b4 <__libc_init_array+0x44>)
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <__libc_init_array+0x48>)
 8002194:	1ae4      	subs	r4, r4, r3
 8002196:	10a4      	asrs	r4, r4, #2
 8002198:	2500      	movs	r5, #0
 800219a:	461e      	mov	r6, r3
 800219c:	42a5      	cmp	r5, r4
 800219e:	d004      	beq.n	80021aa <__libc_init_array+0x3a>
 80021a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021a4:	4798      	blx	r3
 80021a6:	3501      	adds	r5, #1
 80021a8:	e7f8      	b.n	800219c <__libc_init_array+0x2c>
 80021aa:	bd70      	pop	{r4, r5, r6, pc}
 80021ac:	0800221c 	.word	0x0800221c
 80021b0:	0800221c 	.word	0x0800221c
 80021b4:	08002220 	.word	0x08002220
 80021b8:	0800221c 	.word	0x0800221c

080021bc <memset>:
 80021bc:	4402      	add	r2, r0
 80021be:	4603      	mov	r3, r0
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d002      	beq.n	80021ca <memset+0xe>
 80021c4:	f803 1b01 	strb.w	r1, [r3], #1
 80021c8:	e7fa      	b.n	80021c0 <memset+0x4>
 80021ca:	4770      	bx	lr

080021cc <_init>:
 80021cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021ce:	bf00      	nop
 80021d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021d2:	bc08      	pop	{r3}
 80021d4:	469e      	mov	lr, r3
 80021d6:	4770      	bx	lr

080021d8 <_fini>:
 80021d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021da:	bf00      	nop
 80021dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021de:	bc08      	pop	{r3}
 80021e0:	469e      	mov	lr, r3
 80021e2:	4770      	bx	lr
