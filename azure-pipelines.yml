# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- master


stages:
- stage: Build
  jobs:


  # Build - Linux - gcc-arm
  - job: build_linux_gcc_arm
    pool:
      vmImage: 'ubuntu-latest'
    displayName: 'Build - Linux - GCC ARM - arm-none-eabi-gcc'
    steps:
    - script: |

        echo 'Start Linux build pipeline - GCC - ARM - arm-none-eabi-gcc'
        # Print the gcc version.

        gcc --version

        #  Install a CMake 3.0.2 version.
        #- apt-get update -qq
        #- apt-get install cmake -y
        #  Alternatively you could install a CMake 3.2.2 version through PPA repository.
        sudo apt-get update -qq
        apt-get install software-properties-common -y
        # Add PPA repository.
        echo 'deb http://ppa.launchpad.net/george-edison55/cmake-3.x/ubuntu trusty main' | tee -a /etc/apt/sources.list.d/cmake.list
        sudo apt-get update -qq
        sudo apt-get install cmake -y --force-yes
        
        # ARM-none-eabi-gcc
        sudo add-apt-repository ppa:team-gcc-arm-embedded/ppa
        sudo apt-get update
        sudo apt-get install gcc-arm-embedded
        arm-none-eabi-gcc --version

        # Print the CMake version.
        echo 'Start CMake'

        cmake --version

        # TODO: Perhaps does not need
        #- cd $BITBUCKET_CLONE_DIR
        echo 'List actual directory'
        pwd
        # Win: cd
        ls

        mkdir Out
        cd Out
        mkdir CMakeBuild
        cd CMakeBuild
        pwd

        # Call the CMake.
        # Normally: "cmake" or "cmake .." used
        #cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE:PATH="..\toolchain.cmake"  ..
        cmake -G "Unix Makefiles" -DCMAKE_TOOLCHAIN_FILE:PATH="../../Toolchain_ST32F4_arm-none-eabi-gcc.cmake" ../..
        # cmake CC=gcc ../..
        # -D"CMAKE_MAKE_PROGRAM:FILEPATH=make.exe" -D"CMAKE_C_COMPILER:FILEPATH=gcc.exe" -D"CMAKE_CXX_COMPILER:FILEPATH=g++.exe" CC=gcc -G "MinGW Makefiles"

        # Build the project.
        echo 'Start Make'
        #make VERBOSE=1
        make VERBOSE=1 &>> GCC_ARM_build.log

        # Echo the file
        type GCC_ARM_build.log

        # Check the results
        echo 'Finished compile-ing'
        ls

        # Run
        echo 'Test result exists...'

        file="./FastenHomeAut"
        if [ -f "$file" ]
        then
            echo "$0: File '${file}' has found."
            echo 'Finished...'
            exit 0
        else
            echo "$0: File '${file}' not found."
            echo 'Finished...'
            exit -1
        fi
        
        echo 'Install xpack-QEMU'
        # https://www.npmjs.com/package/@xpack-dev-tools/qemu-arm
        npm install --global xpm@latest
        xpm install --global @xpack-dev-tools/qemu-arm@latest
        
        qemu-system-gnuarmeclipse.exe --version


    - publish: $(System.DefaultWorkingDirectory)/Out/CMakeBuild/GCC_ARM_build.log
      artifact: Build_GCC_ARM_Artifact

