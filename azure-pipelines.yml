# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- master


jobs:



# Win - MSVC
- job: build_win_msvc
  pool:
    vmImage: 'windows-2019'
  displayName: 'Build for Windows - MSVC'
  steps:
  - script: |
      echo 'Start Windows build pipeline: MSVC'
      
      :: Print SET
      echo 'Environment variable settings'
      SET
      
      :: Print the gcc version
      gcc --version
      :: ?? Install a CMake 3.0.2 version
      :: Print the CMake version
      echo 'Start CMake'
      cmake --version
    
      :: TODO: Perhaps does not need
      echo 'List actual directory'
      cd
      dir
      
      mkdir Out
      cd Out
      mkdir CMakeBuild
      cd CMakeBuild
      
      echo 'Actual directory'
      cd
      
      echo 'CMake'
      :: Call the CMake.
      :: Normally: "- cmake" or "-cmake .." used
      :: Note: As experience, default the mingw used
      ::cmake ../..
      
      :: MSVC
      :: TODO: parameterize
      cmake -G "Visual Studio 16 2019" -A Win32 ../..
      
      ::Visual Studio 15 2017 [arch] arch: Win64 or ARM
      
      ::https://cmake.org/cmake/help/v3.14/generator/Visual%20Studio%2016%202019.html
      ::cmake -G "Visual Studio 16 2019" -A Win32
      ::cmake -G "Visual Studio 16 2019" -A x64
      ::cmake -G "Visual Studio 16 2019" -A ARM
      ::cmake -G "Visual Studio 16 2019" -A ARM64
      
      ::-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.20.27508/bin/Hostx64/x86/cl.exe
      ::-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.20.27508/bin/Hostx64/x86/cl.exe -- works
      ::-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.20.27508/bin/Hostx64/x86/cl.exe
      ::-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.20.27508/bin/Hostx64/x86/cl.exe -- works
      ::-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.20.27508/bin/Hostx64/x64/cl.exe
      ::-- Check for working C compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.20.27508/bin/Hostx64/x64/cl.exe -- works
      ::-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.20.27508/bin/Hostx64/x64/cl.exe
      ::-- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Tools/MSVC/14.20.27508/bin/Hostx64/x64/cl.exe -- works
      
      :: -D"CMAKE_MAKE_PROGRAM:FILEPATH=make.exe" -D"CMAKE_C_COMPILER:FILEPATH=gcc.exe" -D"CMAKE_CXX_COMPILER:FILEPATH=g++.exe" CC=gcc -G "MinGW Makefiles"
      
      echo 'List actual directory'      
      dir
      
      :: Build the project.
      echo 'Start Make'
      :: For MSVC we shall execute cmake --build instead of "make"
      cmake --build .
      
      :: Check the results
      echo 'Finished compile-ing'
      dir
      
      :: Run
      echo 'Execute...'
      ::dir *.exe /S /B
      cd Debug
      FastenHomeAut.exe
      
      echo 'Finished executing'


# Win - MinGW - GCC
- job: build_win_mingw_gcc
  pool:
    vmImage: 'windows-2019'
  displayName: 'Build for Windows - MinGW GCC'
  steps:
  - script: |
      echo 'Start Windows build pipeline: MinGW + GCC'
      
      :: Print SET
      echo 'Environment variable settings'
      SET
      
      :: Print the gcc version
      gcc --version
      :: ?? Install a CMake 3.0.2 version
      :: Print the CMake version
      echo 'Start CMake'
      cmake --version
    
      :: TODO: Perhaps does not need
      echo 'List actual directory'
      cd
      dir
      
      mkdir Out
      cd Out
      mkdir CMakeBuild
      cd CMakeBuild
      
      echo 'Actual directory'
      cd
      
      :: Call the CMake.
      :: Normally: "- cmake" or "-cmake .." used
      :: Note: As experience, default the mingw used
      ::cmake ../..
      
      :: MSVC - NMake
      ::cmake -G "NMake Makefiles" ../..
      
      :: GCC - MinGW
      :: At Azure win VM there is sh in installed GIT - shall skip sh with '-DCMAKE_SH="CMAKE_SH-NOTFOUND"'
      cmake CC=gcc -G "MinGW Makefiles" -DCMAKE_SH="CMAKE_SH-NOTFOUND" ../..
      :: -D"CMAKE_MAKE_PROGRAM:FILEPATH=make.exe" -D"CMAKE_C_COMPILER:FILEPATH=gcc.exe" -D"CMAKE_CXX_COMPILER:FILEPATH=g++.exe" CC=gcc -G "MinGW Makefiles"
      
      echo 'List actual directory'      
      dir
      
      :: Build the project.
      echo 'Start Make'
      make
      
      :: Check the results
      echo 'Finished compile-ing'
      dir
      
      :: Run
      echo 'Execute...'
      FastenHomeAut.exe
      echo 'Finished executing'

# Linux - gcc
- job: build_linux_gcc
  pool:
    vmImage: 'ubuntu-latest'
  displayName: 'Build for Linux - GCC'
  steps:
  - script: |

      echo 'Start Linux build pipeline'
      # Print the gcc version.

      gcc --version
      #  Install a CMake 3.0.2 version.
      #- apt-get update -qq
      #- apt-get install cmake -y
      #  Alternatively you could install a CMake 3.2.2 version through PPA repository.
      apt-get update -qq
      apt-get install software-properties-common -y
      # Add PPA repository.
      echo 'deb http://ppa.launchpad.net/george-edison55/cmake-3.x/ubuntu trusty main' | tee -a /etc/apt/sources.list.d/cmake.list
      apt-get update -qq
      apt-get install cmake -y --force-yes
      # Print the CMake version.
      echo 'Start CMake'

      cmake --version

      # TODO: Perhaps does not need
      #- cd $BITBUCKET_CLONE_DIR
      echo 'List actual directory'
      pwd
      # Win: cd
      ls

      mkdir Out
      cd Out
      mkdir CMakeBuild
      cd CMakeBuild
      pwd

      # Call the CMake.
      # Normally: "- cmake" or "-cmake .." used
      cmake ../..
      # -D"CMAKE_MAKE_PROGRAM:FILEPATH=make.exe" -D"CMAKE_C_COMPILER:FILEPATH=gcc.exe" -D"CMAKE_CXX_COMPILER:FILEPATH=g++.exe" CC=gcc -G "MinGW Makefiles"

      # Build the project.
      echo 'Start Make'
      make

      # Check the results
      echo 'Finished compile-ing'
      ls

      # Run
      echo 'Execute...'
      ./FastenHomeAut
      echo 'Finished executing'


# Linux - gcc-arm
- job: build_linux_gcc_arm
  pool:
    vmImage: 'ubuntu-latest'
  displayName: 'Build for Linux - GCC - ARM'
  steps:
  - script: |

      echo 'Start Linux build pipeline'
      # Print the gcc version.

      gcc --version

      #  Install a CMake 3.0.2 version.
      #- apt-get update -qq
      #- apt-get install cmake -y
      #  Alternatively you could install a CMake 3.2.2 version through PPA repository.
      sudo apt-get update -qq
      apt-get install software-properties-common -y
      # Add PPA repository.
      echo 'deb http://ppa.launchpad.net/george-edison55/cmake-3.x/ubuntu trusty main' | tee -a /etc/apt/sources.list.d/cmake.list
      sudo apt-get update -qq
      sudo apt-get install cmake -y --force-yes
      
      # ARM-none-eabi-gcc
      sudo add-apt-repository ppa:team-gcc-arm-embedded/ppa
      sudo apt-get update
      sudo apt-get install gcc-arm-embedded
      arm-none-eabi-gcc --version

      # Print the CMake version.
      echo 'Start CMake'

      cmake --version

      # TODO: Perhaps does not need
      #- cd $BITBUCKET_CLONE_DIR
      echo 'List actual directory'
      pwd
      # Win: cd
      ls

      mkdir Out
      cd Out
      mkdir CMakeBuild
      cd CMakeBuild
      pwd

      # Call the CMake.
      # Normally: "cmake" or "cmake .." used
      #cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE:PATH="..\toolchain.cmake"  ..
      cmake -G "Unix Makefiles" -DCMAKE_TOOLCHAIN_FILE:PATH=" ../toolchain.cmake" ../..
      # cmake CC=gcc ../..
      # -D"CMAKE_MAKE_PROGRAM:FILEPATH=make.exe" -D"CMAKE_C_COMPILER:FILEPATH=gcc.exe" -D"CMAKE_CXX_COMPILER:FILEPATH=g++.exe" CC=gcc -G "MinGW Makefiles"

      # Build the project.
      echo 'Start Make'
      make

      # Check the results
      echo 'Finished compile-ing'
      ls

      # Run
      echo 'Execute...'
      ./FastenHomeAut
      echo 'Finished executing'
